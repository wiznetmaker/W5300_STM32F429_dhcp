
W5300_STM32F429_dhcp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077ec  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800799c  0800799c  0000899c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c84  08007c84  000090c8  2**0
                  CONTENTS
  4 .ARM          00000008  08007c84  08007c84  00008c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c8c  08007c8c  000090c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c8c  08007c8c  00008c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c90  08007c90  00008c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  08007c94  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000090c8  2**0
                  CONTENTS
 10 .bss          00000ab8  200000c8  200000c8  000090c8  2**2
                  ALLOC
 11 ._user_heap_stack 00018000  20000b80  20000b80  000090c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d01  00000000  00000000  000090f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e80  00000000  00000000  0001adf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  0001dc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de5  00000000  00000000  0001ee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002618c  00000000  00000000  0001fc55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000150df  00000000  00000000  00045de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5699  00000000  00000000  0005aec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00140559  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000523c  00000000  00000000  0014059c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  001457d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007984 	.word	0x08007984

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000cc 	.word	0x200000cc
 80001ec:	08007984 	.word	0x08007984

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART3 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFF);
 8000588:	1d39      	adds	r1, r7, #4
 800058a:	23ff      	movs	r3, #255	@ 0xff
 800058c:	2201      	movs	r2, #1
 800058e:	4804      	ldr	r0, [pc, #16]	@ (80005a0 <__io_putchar+0x20>)
 8000590:	f002 fa3a 	bl	8002a08 <HAL_UART_Transmit>

    return ch;
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	2000012c 	.word	0x2000012c

080005a4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a04      	ldr	r2, [pc, #16]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d101      	bne.n	80005ba <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 80005b6:	f000 fd15 	bl	8000fe4 <HAL_IncTick>
//        repeating_timer_callback();
    }
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40010000 	.word	0x40010000

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
    uint8_t retval = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	71bb      	strb	r3, [r7, #6]
    uint8_t dhcp_retry = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	71fb      	strb	r3, [r7, #7]
    uint8_t dns_retry = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	717b      	strb	r3, [r7, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fcb1 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f85d 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f9a7 	bl	8000934 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e6:	f000 f919 	bl	800081c <MX_USART3_UART_Init>
  MX_FMC_Init();
 80005ea:	f000 f941 	bl	8000870 <MX_FMC_Init>
  MX_TIM1_Init();
 80005ee:	f000 f8c5 	bl	800077c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim1);
 80005f2:	4824      	ldr	r0, [pc, #144]	@ (8000684 <main+0xbc>)
 80005f4:	f001 fd92 	bl	800211c <HAL_TIM_Base_Start_IT>
    wizchip_reset();
 80005f8:	f006 f968 	bl	80068cc <wizchip_reset>
    wizchip_initialize();
 80005fc:	f006 f938 	bl	8006870 <wizchip_initialize>
    wizchip_check();
 8000600:	f006 f97c 	bl	80068fc <wizchip_check>
    HAL_Delay(2000);
 8000604:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000608:	f000 fd0c 	bl	8001024 <HAL_Delay>

    if (net_info.dhcp == NETINFO_DHCP) // DHCP
 800060c:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <main+0xc0>)
 800060e:	7d9b      	ldrb	r3, [r3, #22]
 8000610:	2b02      	cmp	r3, #2
 8000612:	d101      	bne.n	8000618 <main+0x50>
    {
        wizchip_dhcp_init();
 8000614:	f000 fa26 	bl	8000a64 <wizchip_dhcp_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        if (net_info.dhcp == NETINFO_DHCP)
 8000618:	4b1b      	ldr	r3, [pc, #108]	@ (8000688 <main+0xc0>)
 800061a:	7d9b      	ldrb	r3, [r3, #22]
 800061c:	2b02      	cmp	r3, #2
 800061e:	d1fb      	bne.n	8000618 <main+0x50>
        {
            retval = DHCP_run();
 8000620:	f005 fd78 	bl	8006114 <DHCP_run>
 8000624:	4603      	mov	r3, r0
 8000626:	71bb      	strb	r3, [r7, #6]
            if (retval == DHCP_IP_LEASED)
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	2b04      	cmp	r3, #4
 800062c:	d10a      	bne.n	8000644 <main+0x7c>
            {
                if (g_dhcp_get_ip_flag == 0)
 800062e:	4b17      	ldr	r3, [pc, #92]	@ (800068c <main+0xc4>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d117      	bne.n	8000666 <main+0x9e>
                {
                    printf(" DHCP success\n");
 8000636:	4816      	ldr	r0, [pc, #88]	@ (8000690 <main+0xc8>)
 8000638:	f006 fb40 	bl	8006cbc <puts>

                    g_dhcp_get_ip_flag = 1;
 800063c:	4b13      	ldr	r3, [pc, #76]	@ (800068c <main+0xc4>)
 800063e:	2201      	movs	r2, #1
 8000640:	701a      	strb	r2, [r3, #0]
 8000642:	e010      	b.n	8000666 <main+0x9e>
                }
            }
            else if (retval == DHCP_FAILED)
 8000644:	79bb      	ldrb	r3, [r7, #6]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d10d      	bne.n	8000666 <main+0x9e>
            {
                g_dhcp_get_ip_flag = 0;
 800064a:	4b10      	ldr	r3, [pc, #64]	@ (800068c <main+0xc4>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
                dhcp_retry++;
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	3301      	adds	r3, #1
 8000654:	71fb      	strb	r3, [r7, #7]

                if (dhcp_retry <= DHCP_RETRY_COUNT)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b05      	cmp	r3, #5
 800065a:	d804      	bhi.n	8000666 <main+0x9e>
                {
                    printf(" DHCP timeout occurred and retry %d\n", dhcp_retry);
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	4619      	mov	r1, r3
 8000660:	480c      	ldr	r0, [pc, #48]	@ (8000694 <main+0xcc>)
 8000662:	f006 fac3 	bl	8006bec <iprintf>
                }
            }

            if (dhcp_retry > DHCP_RETRY_COUNT)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b05      	cmp	r3, #5
 800066a:	d906      	bls.n	800067a <main+0xb2>
            {
                printf(" DHCP failed\n");
 800066c:	480a      	ldr	r0, [pc, #40]	@ (8000698 <main+0xd0>)
 800066e:	f006 fb25 	bl	8006cbc <puts>

                DHCP_stop();
 8000672:	f005 fe67 	bl	8006344 <DHCP_stop>

                while (1)
 8000676:	bf00      	nop
 8000678:	e7fd      	b.n	8000676 <main+0xae>
                    ;
            }

            HAL_Delay(1000);
 800067a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800067e:	f000 fcd1 	bl	8001024 <HAL_Delay>
        if (net_info.dhcp == NETINFO_DHCP)
 8000682:	e7c9      	b.n	8000618 <main+0x50>
 8000684:	200000e4 	.word	0x200000e4
 8000688:	20000000 	.word	0x20000000
 800068c:	200009c4 	.word	0x200009c4
 8000690:	0800799c 	.word	0x0800799c
 8000694:	080079ac 	.word	0x080079ac
 8000698:	080079d4 	.word	0x080079d4

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f006 fbe6 	bl	8006e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <SystemClock_Config+0xd8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a2a      	ldr	r2, [pc, #168]	@ (8000774 <SystemClock_Config+0xd8>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <SystemClock_Config+0xd8>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b25      	ldr	r3, [pc, #148]	@ (8000778 <SystemClock_Config+0xdc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a24      	ldr	r2, [pc, #144]	@ (8000778 <SystemClock_Config+0xdc>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b22      	ldr	r3, [pc, #136]	@ (8000778 <SystemClock_Config+0xdc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f8:	2301      	movs	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006fc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000710:	23b4      	movs	r3, #180	@ 0xb4
 8000712:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000718:	2307      	movs	r3, #7
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f000 ffcb 	bl	80016bc <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800072c:	f000 f9e8 	bl	8000b00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000730:	f000 ff74 	bl	800161c <HAL_PWREx_EnableOverDrive>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800073a:	f000 f9e1 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800074e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000754:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2105      	movs	r1, #5
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fa25 	bl	8001bac <HAL_RCC_ClockConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000768:	f000 f9ca 	bl	8000b00 <Error_Handler>
  }
}
 800076c:	bf00      	nop
 800076e:	3750      	adds	r7, #80	@ 0x50
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000790:	463b      	mov	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000798:	4b1e      	ldr	r3, [pc, #120]	@ (8000814 <MX_TIM1_Init+0x98>)
 800079a:	4a1f      	ldr	r2, [pc, #124]	@ (8000818 <MX_TIM1_Init+0x9c>)
 800079c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8999;
 800079e:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <MX_TIM1_Init+0x98>)
 80007a0:	f242 3227 	movw	r2, #8999	@ 0x2327
 80007a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <MX_TIM1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 80007ac:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <MX_TIM1_Init+0x98>)
 80007ae:	2209      	movs	r2, #9
 80007b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b2:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <MX_TIM1_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007b8:	4b16      	ldr	r3, [pc, #88]	@ (8000814 <MX_TIM1_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007be:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <MX_TIM1_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007c4:	4813      	ldr	r0, [pc, #76]	@ (8000814 <MX_TIM1_Init+0x98>)
 80007c6:	f001 fc59 	bl	800207c <HAL_TIM_Base_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80007d0:	f000 f996 	bl	8000b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	4619      	mov	r1, r3
 80007e0:	480c      	ldr	r0, [pc, #48]	@ (8000814 <MX_TIM1_Init+0x98>)
 80007e2:	f001 fdfb 	bl	80023dc <HAL_TIM_ConfigClockSource>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80007ec:	f000 f988 	bl	8000b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f0:	2300      	movs	r3, #0
 80007f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_TIM1_Init+0x98>)
 80007fe:	f002 f823 	bl	8002848 <HAL_TIMEx_MasterConfigSynchronization>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000808:	f000 f97a 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	3718      	adds	r7, #24
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200000e4 	.word	0x200000e4
 8000818:	40010000 	.word	0x40010000

0800081c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_USART3_UART_Init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	@ (800086c <MX_USART3_UART_Init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000826:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <MX_USART3_UART_Init+0x4c>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_USART3_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_USART3_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <MX_USART3_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_USART3_UART_Init+0x4c>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <MX_USART3_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_USART3_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	@ (8000868 <MX_USART3_UART_Init+0x4c>)
 8000854:	f002 f888 	bl	8002968 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800085e:	f000 f94f 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000012c 	.word	0x2000012c
 800086c:	40004800 	.word	0x40004800

08000870 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]
 8000886:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000888:	4b28      	ldr	r3, [pc, #160]	@ (800092c <MX_FMC_Init+0xbc>)
 800088a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800088e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000890:	4b26      	ldr	r3, [pc, #152]	@ (800092c <MX_FMC_Init+0xbc>)
 8000892:	4a27      	ldr	r2, [pc, #156]	@ (8000930 <MX_FMC_Init+0xc0>)
 8000894:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000896:	4b25      	ldr	r3, [pc, #148]	@ (800092c <MX_FMC_Init+0xbc>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800089c:	4b23      	ldr	r3, [pc, #140]	@ (800092c <MX_FMC_Init+0xbc>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80008a2:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_FMC_Init+0xbc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 80008a8:	4b20      	ldr	r3, [pc, #128]	@ (800092c <MX_FMC_Init+0xbc>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80008ae:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_FMC_Init+0xbc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	@ (800092c <MX_FMC_Init+0xbc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_FMC_Init+0xbc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <MX_FMC_Init+0xbc>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80008c6:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_FMC_Init+0xbc>)
 80008c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80008ce:	4b17      	ldr	r3, [pc, #92]	@ (800092c <MX_FMC_Init+0xbc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80008d4:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MX_FMC_Init+0xbc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80008da:	4b14      	ldr	r3, [pc, #80]	@ (800092c <MX_FMC_Init+0xbc>)
 80008dc:	2200      	movs	r2, #0
 80008de:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_FMC_Init+0xbc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <MX_FMC_Init+0xbc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_FMC_Init+0xbc>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80008f2:	230f      	movs	r3, #15
 80008f4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80008f6:	230f      	movs	r3, #15
 80008f8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80008fa:	23ff      	movs	r3, #255	@ 0xff
 80008fc:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80008fe:	230f      	movs	r3, #15
 8000900:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000902:	2310      	movs	r3, #16
 8000904:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000906:	2311      	movs	r3, #17
 8000908:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_FMC_Init+0xbc>)
 8000916:	f001 fb69 	bl	8001fec <HAL_SRAM_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8000920:	f000 f8ee 	bl	8000b00 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000174 	.word	0x20000174
 8000930:	a0000104 	.word	0xa0000104

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	@ 0x30
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
 800094e:	4b42      	ldr	r3, [pc, #264]	@ (8000a58 <MX_GPIO_Init+0x124>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a41      	ldr	r2, [pc, #260]	@ (8000a58 <MX_GPIO_Init+0x124>)
 8000954:	f043 0310 	orr.w	r3, r3, #16
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a58 <MX_GPIO_Init+0x124>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0310 	and.w	r3, r3, #16
 8000962:	61bb      	str	r3, [r7, #24]
 8000964:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a58 <MX_GPIO_Init+0x124>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a3a      	ldr	r2, [pc, #232]	@ (8000a58 <MX_GPIO_Init+0x124>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b38      	ldr	r3, [pc, #224]	@ (8000a58 <MX_GPIO_Init+0x124>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	4b34      	ldr	r3, [pc, #208]	@ (8000a58 <MX_GPIO_Init+0x124>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a33      	ldr	r2, [pc, #204]	@ (8000a58 <MX_GPIO_Init+0x124>)
 800098c:	f043 0320 	orr.w	r3, r3, #32
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b31      	ldr	r3, [pc, #196]	@ (8000a58 <MX_GPIO_Init+0x124>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0320 	and.w	r3, r3, #32
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a58 <MX_GPIO_Init+0x124>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a2c      	ldr	r2, [pc, #176]	@ (8000a58 <MX_GPIO_Init+0x124>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000a58 <MX_GPIO_Init+0x124>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	4b26      	ldr	r3, [pc, #152]	@ (8000a58 <MX_GPIO_Init+0x124>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a25      	ldr	r2, [pc, #148]	@ (8000a58 <MX_GPIO_Init+0x124>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b23      	ldr	r3, [pc, #140]	@ (8000a58 <MX_GPIO_Init+0x124>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <MX_GPIO_Init+0x124>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a1e      	ldr	r2, [pc, #120]	@ (8000a58 <MX_GPIO_Init+0x124>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <MX_GPIO_Init+0x124>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5x00_RST_GPIO_Port, W5x00_RST_Pin, GPIO_PIN_SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009f8:	4818      	ldr	r0, [pc, #96]	@ (8000a5c <MX_GPIO_Init+0x128>)
 80009fa:	f000 fdf5 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : W5x00_BRDY0_Pin W5x00_BRDY1_Pin W5x00_BRDY2_Pin W5x00_BRDY3_Pin */
  GPIO_InitStruct.Pin = W5x00_BRDY0_Pin|W5x00_BRDY1_Pin|W5x00_BRDY2_Pin|W5x00_BRDY3_Pin;
 80009fe:	233c      	movs	r3, #60	@ 0x3c
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4813      	ldr	r0, [pc, #76]	@ (8000a60 <MX_GPIO_Init+0x12c>)
 8000a12:	f000 fc3d 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5x00_INT_Pin */
  GPIO_InitStruct.Pin = W5x00_INT_Pin;
 8000a16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(W5x00_INT_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <MX_GPIO_Init+0x128>)
 8000a2c:	f000 fc30 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5x00_RST_Pin */
  GPIO_InitStruct.Pin = W5x00_RST_Pin;
 8000a30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(W5x00_RST_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4804      	ldr	r0, [pc, #16]	@ (8000a5c <MX_GPIO_Init+0x128>)
 8000a4a:	f000 fc21 	bl	8001290 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4e:	bf00      	nop
 8000a50:	3730      	adds	r7, #48	@ 0x30
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020800 	.word	0x40020800
 8000a60:	40021000 	.word	0x40021000

08000a64 <wizchip_dhcp_init>:

/* USER CODE BEGIN 4 */
static void wizchip_dhcp_init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
    printf(" DHCP client running\n");
 8000a68:	4806      	ldr	r0, [pc, #24]	@ (8000a84 <wizchip_dhcp_init+0x20>)
 8000a6a:	f006 f927 	bl	8006cbc <puts>

    DHCP_init(SOCKET_DHCP, g_eth_buf);
 8000a6e:	4906      	ldr	r1, [pc, #24]	@ (8000a88 <wizchip_dhcp_init+0x24>)
 8000a70:	2000      	movs	r0, #0
 8000a72:	f005 fd13 	bl	800649c <DHCP_init>

    reg_dhcp_cbfunc(wizchip_dhcp_assign, wizchip_dhcp_assign, wizchip_dhcp_conflict);
 8000a76:	4a05      	ldr	r2, [pc, #20]	@ (8000a8c <wizchip_dhcp_init+0x28>)
 8000a78:	4905      	ldr	r1, [pc, #20]	@ (8000a90 <wizchip_dhcp_init+0x2c>)
 8000a7a:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <wizchip_dhcp_init+0x2c>)
 8000a7c:	f004 fa3e 	bl	8004efc <reg_dhcp_cbfunc>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	080079e4 	.word	0x080079e4
 8000a88:	200001c4 	.word	0x200001c4
 8000a8c:	08000aed 	.word	0x08000aed
 8000a90:	08000a95 	.word	0x08000a95

08000a94 <wizchip_dhcp_assign>:

static void wizchip_dhcp_assign(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
    getIPfromDHCP(net_info.ip);
 8000a98:	480e      	ldr	r0, [pc, #56]	@ (8000ad4 <wizchip_dhcp_assign+0x40>)
 8000a9a:	f005 fe09 	bl	80066b0 <getIPfromDHCP>
    getGWfromDHCP(net_info.gw);
 8000a9e:	480e      	ldr	r0, [pc, #56]	@ (8000ad8 <wizchip_dhcp_assign+0x44>)
 8000aa0:	f005 fe26 	bl	80066f0 <getGWfromDHCP>
    getSNfromDHCP(net_info.sn);
 8000aa4:	480d      	ldr	r0, [pc, #52]	@ (8000adc <wizchip_dhcp_assign+0x48>)
 8000aa6:	f005 fe43 	bl	8006730 <getSNfromDHCP>
    getDNSfromDHCP(net_info.dns);
 8000aaa:	480d      	ldr	r0, [pc, #52]	@ (8000ae0 <wizchip_dhcp_assign+0x4c>)
 8000aac:	f005 fe60 	bl	8006770 <getDNSfromDHCP>

    net_info.dhcp = NETINFO_DHCP;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <wizchip_dhcp_assign+0x50>)
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	759a      	strb	r2, [r3, #22]

    /* Network initialize */
    wizchip_network_initialize(&net_info);
 8000ab6:	480b      	ldr	r0, [pc, #44]	@ (8000ae4 <wizchip_dhcp_assign+0x50>)
 8000ab8:	f005 ff27 	bl	800690a <wizchip_network_initialize>
    wizchip_network_information(&net_info);
 8000abc:	4809      	ldr	r0, [pc, #36]	@ (8000ae4 <wizchip_dhcp_assign+0x50>)
 8000abe:	f005 ff37 	bl	8006930 <wizchip_network_information>
    printf(" DHCP leased time : %ld seconds\n", getDHCPLeasetime());
 8000ac2:	f005 fe75 	bl	80067b0 <getDHCPLeasetime>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4807      	ldr	r0, [pc, #28]	@ (8000ae8 <wizchip_dhcp_assign+0x54>)
 8000acc:	f006 f88e 	bl	8006bec <iprintf>
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000006 	.word	0x20000006
 8000ad8:	2000000e 	.word	0x2000000e
 8000adc:	2000000a 	.word	0x2000000a
 8000ae0:	20000012 	.word	0x20000012
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	080079fc 	.word	0x080079fc

08000aec <wizchip_dhcp_conflict>:

static void wizchip_dhcp_conflict(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
    printf(" Conflict IP from DHCP\n");
 8000af0:	4802      	ldr	r0, [pc, #8]	@ (8000afc <wizchip_dhcp_conflict+0x10>)
 8000af2:	f006 f8e3 	bl	8006cbc <puts>

    // halt or reset or any...
    while (1)
 8000af6:	bf00      	nop
 8000af8:	e7fd      	b.n	8000af6 <wizchip_dhcp_conflict+0xa>
 8000afa:	bf00      	nop
 8000afc:	08007a20 	.word	0x08007a20

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <Error_Handler+0x8>

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b22:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	4a08      	ldr	r2, [pc, #32]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x48>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d115      	bne.n	8000b9a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <HAL_TIM_Base_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b76:	4a0c      	ldr	r2, [pc, #48]	@ (8000ba8 <HAL_TIM_Base_MspInit+0x4c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <HAL_TIM_Base_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2019      	movs	r0, #25
 8000b90:	f000 fb47 	bl	8001222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b94:	2019      	movs	r0, #25
 8000b96:	f000 fb60 	bl	800125a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40010000 	.word	0x40010000
 8000ba8:	40023800 	.word	0x40023800

08000bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a19      	ldr	r2, [pc, #100]	@ (8000c30 <HAL_UART_MspInit+0x84>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d12c      	bne.n	8000c28 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <HAL_UART_MspInit+0x88>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	4a17      	ldr	r2, [pc, #92]	@ (8000c34 <HAL_UART_MspInit+0x88>)
 8000bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <HAL_UART_MspInit+0x88>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <HAL_UART_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a10      	ldr	r2, [pc, #64]	@ (8000c34 <HAL_UART_MspInit+0x88>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <HAL_UART_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c06:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c18:	2307      	movs	r3, #7
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <HAL_UART_MspInit+0x8c>)
 8000c24:	f000 fb34 	bl	8001290 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c28:	bf00      	nop
 8000c2a:	3728      	adds	r7, #40	@ 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40004800 	.word	0x40004800
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020800 	.word	0x40020800

08000c3c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000c50:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <HAL_FMC_MspInit+0xa8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d141      	bne.n	8000cdc <HAL_FMC_MspInit+0xa0>
    return;
  }
  FMC_Initialized = 1;
 8000c58:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <HAL_FMC_MspInit+0xa8>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <HAL_FMC_MspInit+0xac>)
 8000c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c66:	4a20      	ldr	r2, [pc, #128]	@ (8000ce8 <HAL_FMC_MspInit+0xac>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <HAL_FMC_MspInit+0xac>)
 8000c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c7a:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8000c7e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	4815      	ldr	r0, [pc, #84]	@ (8000cec <HAL_FMC_MspInit+0xb0>)
 8000c96:	f000 fafb 	bl	8001290 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000c9a:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8000c9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cac:	230c      	movs	r3, #12
 8000cae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480e      	ldr	r0, [pc, #56]	@ (8000cf0 <HAL_FMC_MspInit+0xb4>)
 8000cb6:	f000 faeb 	bl	8001290 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000cba:	f24c 03b3 	movw	r3, #49331	@ 0xc0b3
 8000cbe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ccc:	230c      	movs	r3, #12
 8000cce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4807      	ldr	r0, [pc, #28]	@ (8000cf4 <HAL_FMC_MspInit+0xb8>)
 8000cd6:	f000 fadb 	bl	8001290 <HAL_GPIO_Init>
 8000cda:	e000      	b.n	8000cde <HAL_FMC_MspInit+0xa2>
    return;
 8000cdc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200009c8 	.word	0x200009c8
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40021400 	.word	0x40021400
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40020c00 	.word	0x40020c00

08000cf8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000d00:	f7ff ff9c 	bl	8000c3c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <NMI_Handler+0x4>

08000d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <MemManage_Handler+0x4>

08000d24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d62:	f000 f93f 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d70:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d72:	f001 fa43 	bl	80021fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000e4 	.word	0x200000e4

08000d80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	e00a      	b.n	8000da8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d92:	f3af 8000 	nop.w
 8000d96:	4601      	mov	r1, r0
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	60ba      	str	r2, [r7, #8]
 8000d9e:	b2ca      	uxtb	r2, r1
 8000da0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3301      	adds	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dbf0      	blt.n	8000d92 <_read+0x12>
  }

  return len;
 8000db0:	687b      	ldr	r3, [r7, #4]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	e009      	b.n	8000de0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60ba      	str	r2, [r7, #8]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fbd3 	bl	8000580 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dbf1      	blt.n	8000dcc <_write+0x12>
  }
  return len;
 8000de8:	687b      	ldr	r3, [r7, #4]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_close>:

int _close(int file)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_isatty>:

int _isatty(int file)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	@ (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f006 f844 	bl	8006f18 <__errno>
 8000e90:	4603      	mov	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ec0 <_sbrk+0x64>)
 8000eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20030000 	.word	0x20030000
 8000ebc:	00008000 	.word	0x00008000
 8000ec0:	200009cc 	.word	0x200009cc
 8000ec4:	20000b80 	.word	0x20000b80

08000ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <SystemInit+0x20>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ed2:	4a05      	ldr	r2, [pc, #20]	@ (8000ee8 <SystemInit+0x20>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ef0:	f7ff ffea 	bl	8000ec8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef4:	480c      	ldr	r0, [pc, #48]	@ (8000f28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ef6:	490d      	ldr	r1, [pc, #52]	@ (8000f2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f006 f803 	bl	8006f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1e:	f7ff fb53 	bl	80005c8 <main>
  bx  lr    
 8000f22:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f24:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8000f30:	08007c94 	.word	0x08007c94
  ldr r2, =_sbss
 8000f34:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8000f38:	20000b80 	.word	0x20000b80

08000f3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	@ (8000f80 <HAL_Init+0x40>)
 8000f4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f50:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <HAL_Init+0x40>)
 8000f56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5c:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a07      	ldr	r2, [pc, #28]	@ (8000f80 <HAL_Init+0x40>)
 8000f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 f94f 	bl	800120c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 f808 	bl	8000f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f74:	f7ff fdca 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023c00 	.word	0x40023c00

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f8c:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <HAL_InitTick+0x54>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <HAL_InitTick+0x58>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f967 	bl	8001276 <HAL_SYSTICK_Config>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00e      	b.n	8000fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	d80a      	bhi.n	8000fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f000 f92f 	bl	8001222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc4:	4a06      	ldr	r2, [pc, #24]	@ (8000fe0 <HAL_InitTick+0x5c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000018 	.word	0x20000018
 8000fdc:	20000020 	.word	0x20000020
 8000fe0:	2000001c 	.word	0x2000001c

08000fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_IncTick+0x20>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <HAL_IncTick+0x24>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a04      	ldr	r2, [pc, #16]	@ (8001008 <HAL_IncTick+0x24>)
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000020 	.word	0x20000020
 8001008:	200009d0 	.word	0x200009d0

0800100c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b03      	ldr	r3, [pc, #12]	@ (8001020 <HAL_GetTick+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	200009d0 	.word	0x200009d0

08001024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff ffee 	bl	800100c <HAL_GetTick>
 8001030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103c:	d005      	beq.n	800104a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <HAL_Delay+0x44>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800104a:	bf00      	nop
 800104c:	f7ff ffde 	bl	800100c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f7      	bhi.n	800104c <HAL_Delay+0x28>
  {
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000020 	.word	0x20000020

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4907      	ldr	r1, [pc, #28]	@ (8001108 <__NVIC_EnableIRQ+0x38>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db0a      	blt.n	8001136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	490c      	ldr	r1, [pc, #48]	@ (8001158 <__NVIC_SetPriority+0x4c>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	440b      	add	r3, r1
 8001130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001134:	e00a      	b.n	800114c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4908      	ldr	r1, [pc, #32]	@ (800115c <__NVIC_SetPriority+0x50>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	3b04      	subs	r3, #4
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	440b      	add	r3, r1
 800114a:	761a      	strb	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	@ 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf28      	it	cs
 800117e:	2304      	movcs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3304      	adds	r3, #4
 8001186:	2b06      	cmp	r3, #6
 8001188:	d902      	bls.n	8001190 <NVIC_EncodePriority+0x30>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3b03      	subs	r3, #3
 800118e:	e000      	b.n	8001192 <NVIC_EncodePriority+0x32>
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 32ff 	mov.w	r2, #4294967295
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	4313      	orrs	r3, r2
         );
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	@ 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d8:	d301      	bcc.n	80011de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011da:	2301      	movs	r3, #1
 80011dc:	e00f      	b.n	80011fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011de:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <SysTick_Config+0x40>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e6:	210f      	movs	r1, #15
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f7ff ff8e 	bl	800110c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <SysTick_Config+0x40>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <SysTick_Config+0x40>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	e000e010 	.word	0xe000e010

0800120c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff29 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001234:	f7ff ff3e 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 8001238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f7ff ff8e 	bl	8001160 <NVIC_EncodePriority>
 8001244:	4602      	mov	r2, r0
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff5d 	bl	800110c <__NVIC_SetPriority>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff31 	bl	80010d0 <__NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffa2 	bl	80011c8 <SysTick_Config>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	@ 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	e177      	b.n	800159c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012ac:	2201      	movs	r2, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	f040 8166 	bne.w	8001596 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d005      	beq.n	80012e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d130      	bne.n	8001344 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001318:	2201      	movs	r2, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 0201 	and.w	r2, r3, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b03      	cmp	r3, #3
 800134e:	d017      	beq.n	8001380 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d123      	bne.n	80013d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	08da      	lsrs	r2, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3208      	adds	r2, #8
 8001394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	220f      	movs	r2, #15
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	69b9      	ldr	r1, [r7, #24]
 80013d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0203 	and.w	r2, r3, #3
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80c0 	beq.w	8001596 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b66      	ldr	r3, [pc, #408]	@ (80015b4 <HAL_GPIO_Init+0x324>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	4a65      	ldr	r2, [pc, #404]	@ (80015b4 <HAL_GPIO_Init+0x324>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001424:	6453      	str	r3, [r2, #68]	@ 0x44
 8001426:	4b63      	ldr	r3, [pc, #396]	@ (80015b4 <HAL_GPIO_Init+0x324>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001432:	4a61      	ldr	r2, [pc, #388]	@ (80015b8 <HAL_GPIO_Init+0x328>)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3302      	adds	r3, #2
 800143a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	220f      	movs	r2, #15
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a58      	ldr	r2, [pc, #352]	@ (80015bc <HAL_GPIO_Init+0x32c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d037      	beq.n	80014ce <HAL_GPIO_Init+0x23e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a57      	ldr	r2, [pc, #348]	@ (80015c0 <HAL_GPIO_Init+0x330>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d031      	beq.n	80014ca <HAL_GPIO_Init+0x23a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a56      	ldr	r2, [pc, #344]	@ (80015c4 <HAL_GPIO_Init+0x334>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d02b      	beq.n	80014c6 <HAL_GPIO_Init+0x236>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a55      	ldr	r2, [pc, #340]	@ (80015c8 <HAL_GPIO_Init+0x338>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d025      	beq.n	80014c2 <HAL_GPIO_Init+0x232>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a54      	ldr	r2, [pc, #336]	@ (80015cc <HAL_GPIO_Init+0x33c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d01f      	beq.n	80014be <HAL_GPIO_Init+0x22e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a53      	ldr	r2, [pc, #332]	@ (80015d0 <HAL_GPIO_Init+0x340>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d019      	beq.n	80014ba <HAL_GPIO_Init+0x22a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a52      	ldr	r2, [pc, #328]	@ (80015d4 <HAL_GPIO_Init+0x344>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0x226>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a51      	ldr	r2, [pc, #324]	@ (80015d8 <HAL_GPIO_Init+0x348>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x222>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a50      	ldr	r2, [pc, #320]	@ (80015dc <HAL_GPIO_Init+0x34c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x21e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4f      	ldr	r2, [pc, #316]	@ (80015e0 <HAL_GPIO_Init+0x350>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x21a>
 80014a6:	2309      	movs	r3, #9
 80014a8:	e012      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014aa:	230a      	movs	r3, #10
 80014ac:	e010      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014ae:	2308      	movs	r3, #8
 80014b0:	e00e      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014b2:	2307      	movs	r3, #7
 80014b4:	e00c      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014b6:	2306      	movs	r3, #6
 80014b8:	e00a      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014ba:	2305      	movs	r3, #5
 80014bc:	e008      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014be:	2304      	movs	r3, #4
 80014c0:	e006      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014c2:	2303      	movs	r3, #3
 80014c4:	e004      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e002      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <HAL_GPIO_Init+0x240>
 80014ce:	2300      	movs	r3, #0
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	f002 0203 	and.w	r2, r2, #3
 80014d6:	0092      	lsls	r2, r2, #2
 80014d8:	4093      	lsls	r3, r2
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e0:	4935      	ldr	r1, [pc, #212]	@ (80015b8 <HAL_GPIO_Init+0x328>)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3302      	adds	r3, #2
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ee:	4b3d      	ldr	r3, [pc, #244]	@ (80015e4 <HAL_GPIO_Init+0x354>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001512:	4a34      	ldr	r2, [pc, #208]	@ (80015e4 <HAL_GPIO_Init+0x354>)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001518:	4b32      	ldr	r3, [pc, #200]	@ (80015e4 <HAL_GPIO_Init+0x354>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800153c:	4a29      	ldr	r2, [pc, #164]	@ (80015e4 <HAL_GPIO_Init+0x354>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001542:	4b28      	ldr	r3, [pc, #160]	@ (80015e4 <HAL_GPIO_Init+0x354>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001566:	4a1f      	ldr	r2, [pc, #124]	@ (80015e4 <HAL_GPIO_Init+0x354>)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800156c:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <HAL_GPIO_Init+0x354>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001590:	4a14      	ldr	r2, [pc, #80]	@ (80015e4 <HAL_GPIO_Init+0x354>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3301      	adds	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2b0f      	cmp	r3, #15
 80015a0:	f67f ae84 	bls.w	80012ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3724      	adds	r7, #36	@ 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40013800 	.word	0x40013800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40020400 	.word	0x40020400
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40020c00 	.word	0x40020c00
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40021400 	.word	0x40021400
 80015d4:	40021800 	.word	0x40021800
 80015d8:	40021c00 	.word	0x40021c00
 80015dc:	40022000 	.word	0x40022000
 80015e0:	40022400 	.word	0x40022400
 80015e4:	40013c00 	.word	0x40013c00

080015e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
 80015f4:	4613      	mov	r3, r2
 80015f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f8:	787b      	ldrb	r3, [r7, #1]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001604:	e003      	b.n	800160e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	041a      	lsls	r2, r3, #16
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	619a      	str	r2, [r3, #24]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <HAL_PWREx_EnableOverDrive+0x90>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	4a1f      	ldr	r2, [pc, #124]	@ (80016ac <HAL_PWREx_EnableOverDrive+0x90>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001634:	6413      	str	r3, [r2, #64]	@ 0x40
 8001636:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <HAL_PWREx_EnableOverDrive+0x90>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001642:	4b1b      	ldr	r3, [pc, #108]	@ (80016b0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001644:	2201      	movs	r2, #1
 8001646:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001648:	f7ff fce0 	bl	800100c <HAL_GetTick>
 800164c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800164e:	e009      	b.n	8001664 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001650:	f7ff fcdc 	bl	800100c <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800165e:	d901      	bls.n	8001664 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e01f      	b.n	80016a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001664:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001670:	d1ee      	bne.n	8001650 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001674:	2201      	movs	r2, #1
 8001676:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001678:	f7ff fcc8 	bl	800100c <HAL_GetTick>
 800167c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800167e:	e009      	b.n	8001694 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001680:	f7ff fcc4 	bl	800100c <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800168e:	d901      	bls.n	8001694 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e007      	b.n	80016a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001694:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80016a0:	d1ee      	bne.n	8001680 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800
 80016b0:	420e0040 	.word	0x420e0040
 80016b4:	40007000 	.word	0x40007000
 80016b8:	420e0044 	.word	0x420e0044

080016bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e267      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d075      	beq.n	80017c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016da:	4b88      	ldr	r3, [pc, #544]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d00c      	beq.n	8001700 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016e6:	4b85      	ldr	r3, [pc, #532]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d112      	bne.n	8001718 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f2:	4b82      	ldr	r3, [pc, #520]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016fe:	d10b      	bne.n	8001718 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	4b7e      	ldr	r3, [pc, #504]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d05b      	beq.n	80017c4 <HAL_RCC_OscConfig+0x108>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d157      	bne.n	80017c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e242      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001720:	d106      	bne.n	8001730 <HAL_RCC_OscConfig+0x74>
 8001722:	4b76      	ldr	r3, [pc, #472]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a75      	ldr	r2, [pc, #468]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e01d      	b.n	800176c <HAL_RCC_OscConfig+0xb0>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0x98>
 800173a:	4b70      	ldr	r3, [pc, #448]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a6f      	ldr	r2, [pc, #444]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 8001740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b6d      	ldr	r3, [pc, #436]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a6c      	ldr	r2, [pc, #432]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 800174c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e00b      	b.n	800176c <HAL_RCC_OscConfig+0xb0>
 8001754:	4b69      	ldr	r3, [pc, #420]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a68      	ldr	r2, [pc, #416]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 800175a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b66      	ldr	r3, [pc, #408]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a65      	ldr	r2, [pc, #404]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 8001766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800176a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d013      	beq.n	800179c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fc4a 	bl	800100c <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff fc46 	bl	800100c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	@ 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e207      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b5b      	ldr	r3, [pc, #364]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0xc0>
 800179a:	e014      	b.n	80017c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fc36 	bl	800100c <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fc32 	bl	800100c <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	@ 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e1f3      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b6:	4b51      	ldr	r3, [pc, #324]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0xe8>
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d063      	beq.n	800189a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017d2:	4b4a      	ldr	r3, [pc, #296]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00b      	beq.n	80017f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017de:	4b47      	ldr	r3, [pc, #284]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d11c      	bne.n	8001824 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ea:	4b44      	ldr	r3, [pc, #272]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d116      	bne.n	8001824 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f6:	4b41      	ldr	r3, [pc, #260]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <HAL_RCC_OscConfig+0x152>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d001      	beq.n	800180e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e1c7      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180e:	4b3b      	ldr	r3, [pc, #236]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4937      	ldr	r1, [pc, #220]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001822:	e03a      	b.n	800189a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d020      	beq.n	800186e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800182c:	4b34      	ldr	r3, [pc, #208]	@ (8001900 <HAL_RCC_OscConfig+0x244>)
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff fbeb 	bl	800100c <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183a:	f7ff fbe7 	bl	800100c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e1a8      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184c:	4b2b      	ldr	r3, [pc, #172]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001858:	4b28      	ldr	r3, [pc, #160]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4925      	ldr	r1, [pc, #148]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 8001868:	4313      	orrs	r3, r2
 800186a:	600b      	str	r3, [r1, #0]
 800186c:	e015      	b.n	800189a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186e:	4b24      	ldr	r3, [pc, #144]	@ (8001900 <HAL_RCC_OscConfig+0x244>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff fbca 	bl	800100c <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187c:	f7ff fbc6 	bl	800100c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e187      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188e:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d036      	beq.n	8001914 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d016      	beq.n	80018dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ae:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <HAL_RCC_OscConfig+0x248>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b4:	f7ff fbaa 	bl	800100c <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018bc:	f7ff fba6 	bl	800100c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e167      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ce:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <HAL_RCC_OscConfig+0x240>)
 80018d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x200>
 80018da:	e01b      	b.n	8001914 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018dc:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <HAL_RCC_OscConfig+0x248>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e2:	f7ff fb93 	bl	800100c <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e8:	e00e      	b.n	8001908 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ea:	f7ff fb8f 	bl	800100c <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d907      	bls.n	8001908 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e150      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
 80018fc:	40023800 	.word	0x40023800
 8001900:	42470000 	.word	0x42470000
 8001904:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001908:	4b88      	ldr	r3, [pc, #544]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 800190a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1ea      	bne.n	80018ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 8097 	beq.w	8001a50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001926:	4b81      	ldr	r3, [pc, #516]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10f      	bne.n	8001952 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	4b7d      	ldr	r3, [pc, #500]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	4a7c      	ldr	r2, [pc, #496]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001940:	6413      	str	r3, [r2, #64]	@ 0x40
 8001942:	4b7a      	ldr	r3, [pc, #488]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800194e:	2301      	movs	r3, #1
 8001950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001952:	4b77      	ldr	r3, [pc, #476]	@ (8001b30 <HAL_RCC_OscConfig+0x474>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d118      	bne.n	8001990 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800195e:	4b74      	ldr	r3, [pc, #464]	@ (8001b30 <HAL_RCC_OscConfig+0x474>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a73      	ldr	r2, [pc, #460]	@ (8001b30 <HAL_RCC_OscConfig+0x474>)
 8001964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196a:	f7ff fb4f 	bl	800100c <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001972:	f7ff fb4b 	bl	800100c <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e10c      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	4b6a      	ldr	r3, [pc, #424]	@ (8001b30 <HAL_RCC_OscConfig+0x474>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d106      	bne.n	80019a6 <HAL_RCC_OscConfig+0x2ea>
 8001998:	4b64      	ldr	r3, [pc, #400]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199c:	4a63      	ldr	r2, [pc, #396]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019a4:	e01c      	b.n	80019e0 <HAL_RCC_OscConfig+0x324>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b05      	cmp	r3, #5
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x30c>
 80019ae:	4b5f      	ldr	r3, [pc, #380]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 80019b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b2:	4a5e      	ldr	r2, [pc, #376]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ba:	4b5c      	ldr	r3, [pc, #368]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 80019bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019be:	4a5b      	ldr	r2, [pc, #364]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80019c6:	e00b      	b.n	80019e0 <HAL_RCC_OscConfig+0x324>
 80019c8:	4b58      	ldr	r3, [pc, #352]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019cc:	4a57      	ldr	r2, [pc, #348]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019d4:	4b55      	ldr	r3, [pc, #340]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d8:	4a54      	ldr	r2, [pc, #336]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 80019da:	f023 0304 	bic.w	r3, r3, #4
 80019de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d015      	beq.n	8001a14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e8:	f7ff fb10 	bl	800100c <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ee:	e00a      	b.n	8001a06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f0:	f7ff fb0c 	bl	800100c <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e0cb      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a06:	4b49      	ldr	r3, [pc, #292]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0ee      	beq.n	80019f0 <HAL_RCC_OscConfig+0x334>
 8001a12:	e014      	b.n	8001a3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a14:	f7ff fafa 	bl	800100c <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1c:	f7ff faf6 	bl	800100c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e0b5      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a32:	4b3e      	ldr	r3, [pc, #248]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1ee      	bne.n	8001a1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a3e:	7dfb      	ldrb	r3, [r7, #23]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d105      	bne.n	8001a50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a44:	4b39      	ldr	r3, [pc, #228]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a48:	4a38      	ldr	r2, [pc, #224]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001a4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80a1 	beq.w	8001b9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a5a:	4b34      	ldr	r3, [pc, #208]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d05c      	beq.n	8001b20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d141      	bne.n	8001af2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6e:	4b31      	ldr	r3, [pc, #196]	@ (8001b34 <HAL_RCC_OscConfig+0x478>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff faca 	bl	800100c <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff fac6 	bl	800100c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e087      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8e:	4b27      	ldr	r3, [pc, #156]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69da      	ldr	r2, [r3, #28]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa8:	019b      	lsls	r3, r3, #6
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab0:	085b      	lsrs	r3, r3, #1
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	041b      	lsls	r3, r3, #16
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abc:	061b      	lsls	r3, r3, #24
 8001abe:	491b      	ldr	r1, [pc, #108]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b34 <HAL_RCC_OscConfig+0x478>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aca:	f7ff fa9f 	bl	800100c <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad2:	f7ff fa9b 	bl	800100c <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e05c      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae4:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x416>
 8001af0:	e054      	b.n	8001b9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af2:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <HAL_RCC_OscConfig+0x478>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff fa88 	bl	800100c <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff fa84 	bl	800100c <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e045      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b12:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <HAL_RCC_OscConfig+0x470>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x444>
 8001b1e:	e03d      	b.n	8001b9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e038      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40007000 	.word	0x40007000
 8001b34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ec>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d028      	beq.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d121      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d11a      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b68:	4013      	ands	r3, r2
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d111      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7e:	085b      	lsrs	r3, r3, #1
 8001b80:	3b01      	subs	r3, #1
 8001b82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d107      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800

08001bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0cc      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b68      	ldr	r3, [pc, #416]	@ (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d90c      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b65      	ldr	r3, [pc, #404]	@ (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b63      	ldr	r3, [pc, #396]	@ (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0b8      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d020      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c00:	4b59      	ldr	r3, [pc, #356]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a58      	ldr	r2, [pc, #352]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c18:	4b53      	ldr	r3, [pc, #332]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4a52      	ldr	r2, [pc, #328]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c24:	4b50      	ldr	r3, [pc, #320]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	494d      	ldr	r1, [pc, #308]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d044      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d107      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	4b47      	ldr	r3, [pc, #284]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d119      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e07f      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e06f      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e067      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8a:	4b37      	ldr	r3, [pc, #220]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f023 0203 	bic.w	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4934      	ldr	r1, [pc, #208]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c9c:	f7ff f9b6 	bl	800100c <HAL_GetTick>
 8001ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca4:	f7ff f9b2 	bl	800100c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e04f      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cba:	4b2b      	ldr	r3, [pc, #172]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 020c 	and.w	r2, r3, #12
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1eb      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b25      	ldr	r3, [pc, #148]	@ (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d20c      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b22      	ldr	r3, [pc, #136]	@ (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b20      	ldr	r3, [pc, #128]	@ (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e032      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d00:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4916      	ldr	r1, [pc, #88]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1e:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	490e      	ldr	r1, [pc, #56]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d32:	f000 f821 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8001d36:	4602      	mov	r2, r0
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	490a      	ldr	r1, [pc, #40]	@ (8001d6c <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	5ccb      	ldrb	r3, [r1, r3]
 8001d46:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4a:	4a09      	ldr	r2, [pc, #36]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d4e:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff f916 	bl	8000f84 <HAL_InitTick>

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023c00 	.word	0x40023c00
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	08007c38 	.word	0x08007c38
 8001d70:	20000018 	.word	0x20000018
 8001d74:	2000001c 	.word	0x2000001c

08001d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d7c:	b094      	sub	sp, #80	@ 0x50
 8001d7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d90:	4b79      	ldr	r3, [pc, #484]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d00d      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0x40>
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	f200 80e1 	bhi.w	8001f64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x34>
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d003      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001daa:	e0db      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dac:	4b73      	ldr	r3, [pc, #460]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001dae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001db0:	e0db      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001db2:	4b73      	ldr	r3, [pc, #460]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x208>)
 8001db4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001db6:	e0d8      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001db8:	4b6f      	ldr	r3, [pc, #444]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001dc0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d063      	beq.n	8001e96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dce:	4b6a      	ldr	r3, [pc, #424]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	099b      	lsrs	r3, r3, #6
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001dd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001de2:	2300      	movs	r3, #0
 8001de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001de6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001dea:	4622      	mov	r2, r4
 8001dec:	462b      	mov	r3, r5
 8001dee:	f04f 0000 	mov.w	r0, #0
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	0159      	lsls	r1, r3, #5
 8001df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dfc:	0150      	lsls	r0, r2, #5
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4621      	mov	r1, r4
 8001e04:	1a51      	subs	r1, r2, r1
 8001e06:	6139      	str	r1, [r7, #16]
 8001e08:	4629      	mov	r1, r5
 8001e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e1c:	4659      	mov	r1, fp
 8001e1e:	018b      	lsls	r3, r1, #6
 8001e20:	4651      	mov	r1, sl
 8001e22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e26:	4651      	mov	r1, sl
 8001e28:	018a      	lsls	r2, r1, #6
 8001e2a:	4651      	mov	r1, sl
 8001e2c:	ebb2 0801 	subs.w	r8, r2, r1
 8001e30:	4659      	mov	r1, fp
 8001e32:	eb63 0901 	sbc.w	r9, r3, r1
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e4a:	4690      	mov	r8, r2
 8001e4c:	4699      	mov	r9, r3
 8001e4e:	4623      	mov	r3, r4
 8001e50:	eb18 0303 	adds.w	r3, r8, r3
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	462b      	mov	r3, r5
 8001e58:	eb49 0303 	adc.w	r3, r9, r3
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	024b      	lsls	r3, r1, #9
 8001e6e:	4621      	mov	r1, r4
 8001e70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e74:	4621      	mov	r1, r4
 8001e76:	024a      	lsls	r2, r1, #9
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e7e:	2200      	movs	r2, #0
 8001e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e88:	f7fe fa02 	bl	8000290 <__aeabi_uldivmod>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4613      	mov	r3, r2
 8001e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e94:	e058      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e96:	4b38      	ldr	r3, [pc, #224]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	099b      	lsrs	r3, r3, #6
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ea6:	623b      	str	r3, [r7, #32]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001eb0:	4642      	mov	r2, r8
 8001eb2:	464b      	mov	r3, r9
 8001eb4:	f04f 0000 	mov.w	r0, #0
 8001eb8:	f04f 0100 	mov.w	r1, #0
 8001ebc:	0159      	lsls	r1, r3, #5
 8001ebe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ec2:	0150      	lsls	r0, r2, #5
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4641      	mov	r1, r8
 8001eca:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ece:	4649      	mov	r1, r9
 8001ed0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ee0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ee4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ee8:	ebb2 040a 	subs.w	r4, r2, sl
 8001eec:	eb63 050b 	sbc.w	r5, r3, fp
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	00eb      	lsls	r3, r5, #3
 8001efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001efe:	00e2      	lsls	r2, r4, #3
 8001f00:	4614      	mov	r4, r2
 8001f02:	461d      	mov	r5, r3
 8001f04:	4643      	mov	r3, r8
 8001f06:	18e3      	adds	r3, r4, r3
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	464b      	mov	r3, r9
 8001f0c:	eb45 0303 	adc.w	r3, r5, r3
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f1e:	4629      	mov	r1, r5
 8001f20:	028b      	lsls	r3, r1, #10
 8001f22:	4621      	mov	r1, r4
 8001f24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f28:	4621      	mov	r1, r4
 8001f2a:	028a      	lsls	r2, r1, #10
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f32:	2200      	movs	r2, #0
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	61fa      	str	r2, [r7, #28]
 8001f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f3c:	f7fe f9a8 	bl	8000290 <__aeabi_uldivmod>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4613      	mov	r3, r2
 8001f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f48:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	0c1b      	lsrs	r3, r3, #16
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	3301      	adds	r3, #1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001f58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f62:	e002      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f64:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001f66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3750      	adds	r7, #80	@ 0x50
 8001f70:	46bd      	mov	sp, r7
 8001f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	00f42400 	.word	0x00f42400
 8001f80:	007a1200 	.word	0x007a1200

08001f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f88:	4b03      	ldr	r3, [pc, #12]	@ (8001f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000018 	.word	0x20000018

08001f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fa0:	f7ff fff0 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	0a9b      	lsrs	r3, r3, #10
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	4903      	ldr	r1, [pc, #12]	@ (8001fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb2:	5ccb      	ldrb	r3, [r1, r3]
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	08007c48 	.word	0x08007c48

08001fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fc8:	f7ff ffdc 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	0b5b      	lsrs	r3, r3, #13
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	4903      	ldr	r1, [pc, #12]	@ (8001fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	08007c48 	.word	0x08007c48

08001fec <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e038      	b.n	8002074 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f7fe fe6e 	bl	8000cf8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3308      	adds	r3, #8
 8002024:	4619      	mov	r1, r3
 8002026:	4610      	mov	r0, r2
 8002028:	f001 f8aa 	bl	8003180 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	461a      	mov	r2, r3
 8002036:	68b9      	ldr	r1, [r7, #8]
 8002038:	f001 f928 	bl	800328c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6858      	ldr	r0, [r3, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	f001 f96f 	bl	800332c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	6892      	ldr	r2, [r2, #8]
 8002056:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	6892      	ldr	r2, [r2, #8]
 8002062:	f041 0101 	orr.w	r1, r1, #1
 8002066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e041      	b.n	8002112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fd5a 	bl	8000b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3304      	adds	r3, #4
 80020b8:	4619      	mov	r1, r3
 80020ba:	4610      	mov	r0, r2
 80020bc:	f000 fa7e 	bl	80025bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d001      	beq.n	8002134 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e04e      	b.n	80021d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a23      	ldr	r2, [pc, #140]	@ (80021e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d022      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800215e:	d01d      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1f      	ldr	r2, [pc, #124]	@ (80021e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d018      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a1e      	ldr	r2, [pc, #120]	@ (80021e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d013      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1c      	ldr	r2, [pc, #112]	@ (80021ec <HAL_TIM_Base_Start_IT+0xd0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00e      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a1b      	ldr	r2, [pc, #108]	@ (80021f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d009      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a19      	ldr	r2, [pc, #100]	@ (80021f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d004      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x80>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a18      	ldr	r2, [pc, #96]	@ (80021f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d111      	bne.n	80021c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d010      	beq.n	80021d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0201 	orr.w	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021be:	e007      	b.n	80021d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40010000 	.word	0x40010000
 80021e4:	40000400 	.word	0x40000400
 80021e8:	40000800 	.word	0x40000800
 80021ec:	40000c00 	.word	0x40000c00
 80021f0:	40010400 	.word	0x40010400
 80021f4:	40014000 	.word	0x40014000
 80021f8:	40001800 	.word	0x40001800

080021fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d020      	beq.n	8002260 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d01b      	beq.n	8002260 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0202 	mvn.w	r2, #2
 8002230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f999 	bl	800257e <HAL_TIM_IC_CaptureCallback>
 800224c:	e005      	b.n	800225a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f98b 	bl	800256a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f99c 	bl	8002592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	d020      	beq.n	80022ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01b      	beq.n	80022ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0204 	mvn.w	r2, #4
 800227c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f973 	bl	800257e <HAL_TIM_IC_CaptureCallback>
 8002298:	e005      	b.n	80022a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f965 	bl	800256a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f976 	bl	8002592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d020      	beq.n	80022f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01b      	beq.n	80022f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0208 	mvn.w	r2, #8
 80022c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2204      	movs	r2, #4
 80022ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f94d 	bl	800257e <HAL_TIM_IC_CaptureCallback>
 80022e4:	e005      	b.n	80022f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f93f 	bl	800256a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f950 	bl	8002592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d020      	beq.n	8002344 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01b      	beq.n	8002344 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0210 	mvn.w	r2, #16
 8002314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2208      	movs	r2, #8
 800231a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f927 	bl	800257e <HAL_TIM_IC_CaptureCallback>
 8002330:	e005      	b.n	800233e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f919 	bl	800256a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f92a 	bl	8002592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00c      	beq.n	8002368 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0201 	mvn.w	r2, #1
 8002360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7fe f91e 	bl	80005a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00c      	beq.n	800238c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002378:	2b00      	cmp	r3, #0
 800237a:	d007      	beq.n	800238c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 fae4 	bl	8002954 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00c      	beq.n	80023b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f8fb 	bl	80025a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00c      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0220 	mvn.w	r2, #32
 80023cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fab6 	bl	8002940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_TIM_ConfigClockSource+0x1c>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e0b4      	b.n	8002562 <HAL_TIM_ConfigClockSource+0x186>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800241e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002430:	d03e      	beq.n	80024b0 <HAL_TIM_ConfigClockSource+0xd4>
 8002432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002436:	f200 8087 	bhi.w	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 800243a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800243e:	f000 8086 	beq.w	800254e <HAL_TIM_ConfigClockSource+0x172>
 8002442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002446:	d87f      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002448:	2b70      	cmp	r3, #112	@ 0x70
 800244a:	d01a      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0xa6>
 800244c:	2b70      	cmp	r3, #112	@ 0x70
 800244e:	d87b      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002450:	2b60      	cmp	r3, #96	@ 0x60
 8002452:	d050      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0x11a>
 8002454:	2b60      	cmp	r3, #96	@ 0x60
 8002456:	d877      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002458:	2b50      	cmp	r3, #80	@ 0x50
 800245a:	d03c      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0xfa>
 800245c:	2b50      	cmp	r3, #80	@ 0x50
 800245e:	d873      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002460:	2b40      	cmp	r3, #64	@ 0x40
 8002462:	d058      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0x13a>
 8002464:	2b40      	cmp	r3, #64	@ 0x40
 8002466:	d86f      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002468:	2b30      	cmp	r3, #48	@ 0x30
 800246a:	d064      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15a>
 800246c:	2b30      	cmp	r3, #48	@ 0x30
 800246e:	d86b      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002470:	2b20      	cmp	r3, #32
 8002472:	d060      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15a>
 8002474:	2b20      	cmp	r3, #32
 8002476:	d867      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002478:	2b00      	cmp	r3, #0
 800247a:	d05c      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15a>
 800247c:	2b10      	cmp	r3, #16
 800247e:	d05a      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15a>
 8002480:	e062      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002492:	f000 f9b9 	bl	8002808 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80024a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	609a      	str	r2, [r3, #8]
      break;
 80024ae:	e04f      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024c0:	f000 f9a2 	bl	8002808 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024d2:	609a      	str	r2, [r3, #8]
      break;
 80024d4:	e03c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e2:	461a      	mov	r2, r3
 80024e4:	f000 f916 	bl	8002714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2150      	movs	r1, #80	@ 0x50
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f96f 	bl	80027d2 <TIM_ITRx_SetConfig>
      break;
 80024f4:	e02c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002502:	461a      	mov	r2, r3
 8002504:	f000 f935 	bl	8002772 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2160      	movs	r1, #96	@ 0x60
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f95f 	bl	80027d2 <TIM_ITRx_SetConfig>
      break;
 8002514:	e01c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002522:	461a      	mov	r2, r3
 8002524:	f000 f8f6 	bl	8002714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2140      	movs	r1, #64	@ 0x40
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f94f 	bl	80027d2 <TIM_ITRx_SetConfig>
      break;
 8002534:	e00c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4619      	mov	r1, r3
 8002540:	4610      	mov	r0, r2
 8002542:	f000 f946 	bl	80027d2 <TIM_ITRx_SetConfig>
      break;
 8002546:	e003      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
      break;
 800254c:	e000      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800254e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a46      	ldr	r2, [pc, #280]	@ (80026e8 <TIM_Base_SetConfig+0x12c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d013      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025da:	d00f      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a43      	ldr	r2, [pc, #268]	@ (80026ec <TIM_Base_SetConfig+0x130>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00b      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a42      	ldr	r2, [pc, #264]	@ (80026f0 <TIM_Base_SetConfig+0x134>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d007      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a41      	ldr	r2, [pc, #260]	@ (80026f4 <TIM_Base_SetConfig+0x138>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d003      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a40      	ldr	r2, [pc, #256]	@ (80026f8 <TIM_Base_SetConfig+0x13c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d108      	bne.n	800260e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a35      	ldr	r2, [pc, #212]	@ (80026e8 <TIM_Base_SetConfig+0x12c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d02b      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800261c:	d027      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a32      	ldr	r2, [pc, #200]	@ (80026ec <TIM_Base_SetConfig+0x130>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d023      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a31      	ldr	r2, [pc, #196]	@ (80026f0 <TIM_Base_SetConfig+0x134>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d01f      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a30      	ldr	r2, [pc, #192]	@ (80026f4 <TIM_Base_SetConfig+0x138>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01b      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a2f      	ldr	r2, [pc, #188]	@ (80026f8 <TIM_Base_SetConfig+0x13c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d017      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a2e      	ldr	r2, [pc, #184]	@ (80026fc <TIM_Base_SetConfig+0x140>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a2d      	ldr	r2, [pc, #180]	@ (8002700 <TIM_Base_SetConfig+0x144>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00f      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a2c      	ldr	r2, [pc, #176]	@ (8002704 <TIM_Base_SetConfig+0x148>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00b      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a2b      	ldr	r2, [pc, #172]	@ (8002708 <TIM_Base_SetConfig+0x14c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d007      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a2a      	ldr	r2, [pc, #168]	@ (800270c <TIM_Base_SetConfig+0x150>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a29      	ldr	r2, [pc, #164]	@ (8002710 <TIM_Base_SetConfig+0x154>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d108      	bne.n	8002680 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a10      	ldr	r2, [pc, #64]	@ (80026e8 <TIM_Base_SetConfig+0x12c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d003      	beq.n	80026b4 <TIM_Base_SetConfig+0xf8>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a12      	ldr	r2, [pc, #72]	@ (80026f8 <TIM_Base_SetConfig+0x13c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d103      	bne.n	80026bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d105      	bne.n	80026da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f023 0201 	bic.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	611a      	str	r2, [r3, #16]
  }
}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40010000 	.word	0x40010000
 80026ec:	40000400 	.word	0x40000400
 80026f0:	40000800 	.word	0x40000800
 80026f4:	40000c00 	.word	0x40000c00
 80026f8:	40010400 	.word	0x40010400
 80026fc:	40014000 	.word	0x40014000
 8002700:	40014400 	.word	0x40014400
 8002704:	40014800 	.word	0x40014800
 8002708:	40001800 	.word	0x40001800
 800270c:	40001c00 	.word	0x40001c00
 8002710:	40002000 	.word	0x40002000

08002714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	f023 0201 	bic.w	r2, r3, #1
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800273e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f023 030a 	bic.w	r3, r3, #10
 8002750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	621a      	str	r2, [r3, #32]
}
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002772:	b480      	push	{r7}
 8002774:	b087      	sub	sp, #28
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f023 0210 	bic.w	r2, r3, #16
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800279c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	031b      	lsls	r3, r3, #12
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80027ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	621a      	str	r2, [r3, #32]
}
 80027c6:	bf00      	nop
 80027c8:	371c      	adds	r7, #28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f043 0307 	orr.w	r3, r3, #7
 80027f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	609a      	str	r2, [r3, #8]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	021a      	lsls	r2, r3, #8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	431a      	orrs	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4313      	orrs	r3, r2
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	609a      	str	r2, [r3, #8]
}
 800283c:	bf00      	nop
 800283e:	371c      	adds	r7, #28
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800285c:	2302      	movs	r3, #2
 800285e:	e05a      	b.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a21      	ldr	r2, [pc, #132]	@ (8002924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d022      	beq.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ac:	d01d      	beq.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002928 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d018      	beq.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1b      	ldr	r2, [pc, #108]	@ (800292c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d013      	beq.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002930 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d00e      	beq.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a18      	ldr	r2, [pc, #96]	@ (8002934 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d009      	beq.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a17      	ldr	r2, [pc, #92]	@ (8002938 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d004      	beq.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a15      	ldr	r2, [pc, #84]	@ (800293c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d10c      	bne.n	8002904 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40010000 	.word	0x40010000
 8002928:	40000400 	.word	0x40000400
 800292c:	40000800 	.word	0x40000800
 8002930:	40000c00 	.word	0x40000c00
 8002934:	40010400 	.word	0x40010400
 8002938:	40014000 	.word	0x40014000
 800293c:	40001800 	.word	0x40001800

08002940 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e042      	b.n	8002a00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe f90c 	bl	8000bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2224      	movs	r2, #36	@ 0x24
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f973 	bl	8002c98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	@ 0x28
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d175      	bne.n	8002b14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <HAL_UART_Transmit+0x2c>
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e06e      	b.n	8002b16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2221      	movs	r2, #33	@ 0x21
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a46:	f7fe fae1 	bl	800100c <HAL_GetTick>
 8002a4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	88fa      	ldrh	r2, [r7, #6]
 8002a50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	88fa      	ldrh	r2, [r7, #6]
 8002a56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a60:	d108      	bne.n	8002a74 <HAL_UART_Transmit+0x6c>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d104      	bne.n	8002a74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	e003      	b.n	8002a7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a7c:	e02e      	b.n	8002adc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2200      	movs	r2, #0
 8002a86:	2180      	movs	r1, #128	@ 0x80
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f848 	bl	8002b1e <UART_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e03a      	b.n	8002b16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10b      	bne.n	8002abe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ab4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	3302      	adds	r3, #2
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	e007      	b.n	8002ace <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	3301      	adds	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1cb      	bne.n	8002a7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2200      	movs	r2, #0
 8002aee:	2140      	movs	r1, #64	@ 0x40
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f814 	bl	8002b1e <UART_WaitOnFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e006      	b.n	8002b16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e000      	b.n	8002b16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b14:	2302      	movs	r3, #2
  }
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b2e:	e03b      	b.n	8002ba8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d037      	beq.n	8002ba8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b38:	f7fe fa68 	bl	800100c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	6a3a      	ldr	r2, [r7, #32]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d302      	bcc.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x30>
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e03a      	b.n	8002bc8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d023      	beq.n	8002ba8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b80      	cmp	r3, #128	@ 0x80
 8002b64:	d020      	beq.n	8002ba8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b40      	cmp	r3, #64	@ 0x40
 8002b6a:	d01d      	beq.n	8002ba8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d116      	bne.n	8002ba8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f81d 	bl	8002bd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2208      	movs	r2, #8
 8002b9a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e00f      	b.n	8002bc8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d0b4      	beq.n	8002b30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b095      	sub	sp, #84	@ 0x54
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	330c      	adds	r3, #12
 8002bde:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be2:	e853 3f00 	ldrex	r3, [r3]
 8002be6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	330c      	adds	r3, #12
 8002bf6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bf8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c00:	e841 2300 	strex	r3, r2, [r1]
 8002c04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1e5      	bne.n	8002bd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3314      	adds	r3, #20
 8002c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	e853 3f00 	ldrex	r3, [r3]
 8002c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f023 0301 	bic.w	r3, r3, #1
 8002c22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	3314      	adds	r3, #20
 8002c2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c34:	e841 2300 	strex	r3, r2, [r1]
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e5      	bne.n	8002c0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d119      	bne.n	8002c7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	e853 3f00 	ldrex	r3, [r3]
 8002c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f023 0310 	bic.w	r3, r3, #16
 8002c5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	330c      	adds	r3, #12
 8002c66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c68:	61ba      	str	r2, [r7, #24]
 8002c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6c:	6979      	ldr	r1, [r7, #20]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	e841 2300 	strex	r3, r2, [r1]
 8002c74:	613b      	str	r3, [r7, #16]
   return(result);
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1e5      	bne.n	8002c48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c8a:	bf00      	nop
 8002c8c:	3754      	adds	r7, #84	@ 0x54
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c9c:	b0c0      	sub	sp, #256	@ 0x100
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb4:	68d9      	ldr	r1, [r3, #12]
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	ea40 0301 	orr.w	r3, r0, r1
 8002cc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002cf0:	f021 010c 	bic.w	r1, r1, #12
 8002cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002cfe:	430b      	orrs	r3, r1
 8002d00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d12:	6999      	ldr	r1, [r3, #24]
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	ea40 0301 	orr.w	r3, r0, r1
 8002d1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4b8f      	ldr	r3, [pc, #572]	@ (8002f64 <UART_SetConfig+0x2cc>)
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d005      	beq.n	8002d38 <UART_SetConfig+0xa0>
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	4b8d      	ldr	r3, [pc, #564]	@ (8002f68 <UART_SetConfig+0x2d0>)
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d104      	bne.n	8002d42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d38:	f7ff f944 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002d3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d40:	e003      	b.n	8002d4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d42:	f7ff f92b 	bl	8001f9c <HAL_RCC_GetPCLK1Freq>
 8002d46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d54:	f040 810c 	bne.w	8002f70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d6a:	4622      	mov	r2, r4
 8002d6c:	462b      	mov	r3, r5
 8002d6e:	1891      	adds	r1, r2, r2
 8002d70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d72:	415b      	adcs	r3, r3
 8002d74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	eb12 0801 	adds.w	r8, r2, r1
 8002d80:	4629      	mov	r1, r5
 8002d82:	eb43 0901 	adc.w	r9, r3, r1
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d9a:	4690      	mov	r8, r2
 8002d9c:	4699      	mov	r9, r3
 8002d9e:	4623      	mov	r3, r4
 8002da0:	eb18 0303 	adds.w	r3, r8, r3
 8002da4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002da8:	462b      	mov	r3, r5
 8002daa:	eb49 0303 	adc.w	r3, r9, r3
 8002dae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002dbe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002dc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	18db      	adds	r3, r3, r3
 8002dca:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dcc:	4613      	mov	r3, r2
 8002dce:	eb42 0303 	adc.w	r3, r2, r3
 8002dd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002dd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ddc:	f7fd fa58 	bl	8000290 <__aeabi_uldivmod>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4b61      	ldr	r3, [pc, #388]	@ (8002f6c <UART_SetConfig+0x2d4>)
 8002de6:	fba3 2302 	umull	r2, r3, r3, r2
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	011c      	lsls	r4, r3, #4
 8002dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002df2:	2200      	movs	r2, #0
 8002df4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002df8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002dfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002e00:	4642      	mov	r2, r8
 8002e02:	464b      	mov	r3, r9
 8002e04:	1891      	adds	r1, r2, r2
 8002e06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002e08:	415b      	adcs	r3, r3
 8002e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e10:	4641      	mov	r1, r8
 8002e12:	eb12 0a01 	adds.w	sl, r2, r1
 8002e16:	4649      	mov	r1, r9
 8002e18:	eb43 0b01 	adc.w	fp, r3, r1
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e30:	4692      	mov	sl, r2
 8002e32:	469b      	mov	fp, r3
 8002e34:	4643      	mov	r3, r8
 8002e36:	eb1a 0303 	adds.w	r3, sl, r3
 8002e3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e3e:	464b      	mov	r3, r9
 8002e40:	eb4b 0303 	adc.w	r3, fp, r3
 8002e44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	18db      	adds	r3, r3, r3
 8002e60:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e62:	4613      	mov	r3, r2
 8002e64:	eb42 0303 	adc.w	r3, r2, r3
 8002e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e72:	f7fd fa0d 	bl	8000290 <__aeabi_uldivmod>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f6c <UART_SetConfig+0x2d4>)
 8002e7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	2264      	movs	r2, #100	@ 0x64
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	1acb      	subs	r3, r1, r3
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e92:	4b36      	ldr	r3, [pc, #216]	@ (8002f6c <UART_SetConfig+0x2d4>)
 8002e94:	fba3 2302 	umull	r2, r3, r3, r2
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ea0:	441c      	add	r4, r3
 8002ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002eac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002eb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002eb4:	4642      	mov	r2, r8
 8002eb6:	464b      	mov	r3, r9
 8002eb8:	1891      	adds	r1, r2, r2
 8002eba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ebc:	415b      	adcs	r3, r3
 8002ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ec0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ec4:	4641      	mov	r1, r8
 8002ec6:	1851      	adds	r1, r2, r1
 8002ec8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002eca:	4649      	mov	r1, r9
 8002ecc:	414b      	adcs	r3, r1
 8002ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002edc:	4659      	mov	r1, fp
 8002ede:	00cb      	lsls	r3, r1, #3
 8002ee0:	4651      	mov	r1, sl
 8002ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ee6:	4651      	mov	r1, sl
 8002ee8:	00ca      	lsls	r2, r1, #3
 8002eea:	4610      	mov	r0, r2
 8002eec:	4619      	mov	r1, r3
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4642      	mov	r2, r8
 8002ef2:	189b      	adds	r3, r3, r2
 8002ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ef8:	464b      	mov	r3, r9
 8002efa:	460a      	mov	r2, r1
 8002efc:	eb42 0303 	adc.w	r3, r2, r3
 8002f00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f18:	460b      	mov	r3, r1
 8002f1a:	18db      	adds	r3, r3, r3
 8002f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f1e:	4613      	mov	r3, r2
 8002f20:	eb42 0303 	adc.w	r3, r2, r3
 8002f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f2e:	f7fd f9af 	bl	8000290 <__aeabi_uldivmod>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <UART_SetConfig+0x2d4>)
 8002f38:	fba3 1302 	umull	r1, r3, r3, r2
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	2164      	movs	r1, #100	@ 0x64
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	3332      	adds	r3, #50	@ 0x32
 8002f4a:	4a08      	ldr	r2, [pc, #32]	@ (8002f6c <UART_SetConfig+0x2d4>)
 8002f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f50:	095b      	lsrs	r3, r3, #5
 8002f52:	f003 0207 	and.w	r2, r3, #7
 8002f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4422      	add	r2, r4
 8002f5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f60:	e106      	b.n	8003170 <UART_SetConfig+0x4d8>
 8002f62:	bf00      	nop
 8002f64:	40011000 	.word	0x40011000
 8002f68:	40011400 	.word	0x40011400
 8002f6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f74:	2200      	movs	r2, #0
 8002f76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f82:	4642      	mov	r2, r8
 8002f84:	464b      	mov	r3, r9
 8002f86:	1891      	adds	r1, r2, r2
 8002f88:	6239      	str	r1, [r7, #32]
 8002f8a:	415b      	adcs	r3, r3
 8002f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f92:	4641      	mov	r1, r8
 8002f94:	1854      	adds	r4, r2, r1
 8002f96:	4649      	mov	r1, r9
 8002f98:	eb43 0501 	adc.w	r5, r3, r1
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	00eb      	lsls	r3, r5, #3
 8002fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002faa:	00e2      	lsls	r2, r4, #3
 8002fac:	4614      	mov	r4, r2
 8002fae:	461d      	mov	r5, r3
 8002fb0:	4643      	mov	r3, r8
 8002fb2:	18e3      	adds	r3, r4, r3
 8002fb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fb8:	464b      	mov	r3, r9
 8002fba:	eb45 0303 	adc.w	r3, r5, r3
 8002fbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fde:	4629      	mov	r1, r5
 8002fe0:	008b      	lsls	r3, r1, #2
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fe8:	4621      	mov	r1, r4
 8002fea:	008a      	lsls	r2, r1, #2
 8002fec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002ff0:	f7fd f94e 	bl	8000290 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4b60      	ldr	r3, [pc, #384]	@ (800317c <UART_SetConfig+0x4e4>)
 8002ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	011c      	lsls	r4, r3, #4
 8003002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003006:	2200      	movs	r2, #0
 8003008:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800300c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003010:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003014:	4642      	mov	r2, r8
 8003016:	464b      	mov	r3, r9
 8003018:	1891      	adds	r1, r2, r2
 800301a:	61b9      	str	r1, [r7, #24]
 800301c:	415b      	adcs	r3, r3
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003024:	4641      	mov	r1, r8
 8003026:	1851      	adds	r1, r2, r1
 8003028:	6139      	str	r1, [r7, #16]
 800302a:	4649      	mov	r1, r9
 800302c:	414b      	adcs	r3, r1
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800303c:	4659      	mov	r1, fp
 800303e:	00cb      	lsls	r3, r1, #3
 8003040:	4651      	mov	r1, sl
 8003042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003046:	4651      	mov	r1, sl
 8003048:	00ca      	lsls	r2, r1, #3
 800304a:	4610      	mov	r0, r2
 800304c:	4619      	mov	r1, r3
 800304e:	4603      	mov	r3, r0
 8003050:	4642      	mov	r2, r8
 8003052:	189b      	adds	r3, r3, r2
 8003054:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003058:	464b      	mov	r3, r9
 800305a:	460a      	mov	r2, r1
 800305c:	eb42 0303 	adc.w	r3, r2, r3
 8003060:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800306e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800307c:	4649      	mov	r1, r9
 800307e:	008b      	lsls	r3, r1, #2
 8003080:	4641      	mov	r1, r8
 8003082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003086:	4641      	mov	r1, r8
 8003088:	008a      	lsls	r2, r1, #2
 800308a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800308e:	f7fd f8ff 	bl	8000290 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4611      	mov	r1, r2
 8003098:	4b38      	ldr	r3, [pc, #224]	@ (800317c <UART_SetConfig+0x4e4>)
 800309a:	fba3 2301 	umull	r2, r3, r3, r1
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	2264      	movs	r2, #100	@ 0x64
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	1acb      	subs	r3, r1, r3
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	3332      	adds	r3, #50	@ 0x32
 80030ac:	4a33      	ldr	r2, [pc, #204]	@ (800317c <UART_SetConfig+0x4e4>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030b8:	441c      	add	r4, r3
 80030ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030be:	2200      	movs	r2, #0
 80030c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80030c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80030c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80030c8:	4642      	mov	r2, r8
 80030ca:	464b      	mov	r3, r9
 80030cc:	1891      	adds	r1, r2, r2
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	415b      	adcs	r3, r3
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030d8:	4641      	mov	r1, r8
 80030da:	1851      	adds	r1, r2, r1
 80030dc:	6039      	str	r1, [r7, #0]
 80030de:	4649      	mov	r1, r9
 80030e0:	414b      	adcs	r3, r1
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030f0:	4659      	mov	r1, fp
 80030f2:	00cb      	lsls	r3, r1, #3
 80030f4:	4651      	mov	r1, sl
 80030f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030fa:	4651      	mov	r1, sl
 80030fc:	00ca      	lsls	r2, r1, #3
 80030fe:	4610      	mov	r0, r2
 8003100:	4619      	mov	r1, r3
 8003102:	4603      	mov	r3, r0
 8003104:	4642      	mov	r2, r8
 8003106:	189b      	adds	r3, r3, r2
 8003108:	66bb      	str	r3, [r7, #104]	@ 0x68
 800310a:	464b      	mov	r3, r9
 800310c:	460a      	mov	r2, r1
 800310e:	eb42 0303 	adc.w	r3, r2, r3
 8003112:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	663b      	str	r3, [r7, #96]	@ 0x60
 800311e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800312c:	4649      	mov	r1, r9
 800312e:	008b      	lsls	r3, r1, #2
 8003130:	4641      	mov	r1, r8
 8003132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003136:	4641      	mov	r1, r8
 8003138:	008a      	lsls	r2, r1, #2
 800313a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800313e:	f7fd f8a7 	bl	8000290 <__aeabi_uldivmod>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4b0d      	ldr	r3, [pc, #52]	@ (800317c <UART_SetConfig+0x4e4>)
 8003148:	fba3 1302 	umull	r1, r3, r3, r2
 800314c:	095b      	lsrs	r3, r3, #5
 800314e:	2164      	movs	r1, #100	@ 0x64
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	3332      	adds	r3, #50	@ 0x32
 800315a:	4a08      	ldr	r2, [pc, #32]	@ (800317c <UART_SetConfig+0x4e4>)
 800315c:	fba2 2303 	umull	r2, r3, r2, r3
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	f003 020f 	and.w	r2, r3, #15
 8003166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4422      	add	r2, r4
 800316e:	609a      	str	r2, [r3, #8]
}
 8003170:	bf00      	nop
 8003172:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003176:	46bd      	mov	sp, r7
 8003178:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800317c:	51eb851f 	.word	0x51eb851f

08003180 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FMC_BCR1_WFDIS */
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	f023 0101 	bic.w	r1, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d102      	bne.n	80031b0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80031aa:	2340      	movs	r3, #64	@ 0x40
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	e001      	b.n	80031b4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80031c0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80031c6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80031cc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80031d2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80031d8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80031de:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 80031e4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 80031ea:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80031f0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]

#if defined(FMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_CCLKEN */
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8003218:	4b1b      	ldr	r3, [pc, #108]	@ (8003288 <FMC_NORSRAM_Init+0x108>)
 800321a:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

#if defined(FMC_BCR1_WRAPMOD)
  mask |= FMC_BCR1_WRAPMOD;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003222:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  mask |= FMC_BCR1_CCLKEN;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800322a:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
#endif /* FMC_BCR1_WFDIS */
  mask |= FMC_BCR1_CPSIZE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8003232:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	43db      	mvns	r3, r3
 8003242:	ea02 0103 	and.w	r1, r2, r3
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4319      	orrs	r1, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003258:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800325c:	d10c      	bne.n	8003278 <FMC_NORSRAM_Init+0xf8>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d008      	beq.n	8003278 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	601a      	str	r2, [r3, #0]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FMC_BCR1_WFDIS */

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	0008fb7f 	.word	0x0008fb7f

0800328c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a2:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	431a      	orrs	r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	431a      	orrs	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	041b      	lsls	r3, r3, #16
 80032c0:	431a      	orrs	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	051b      	lsls	r3, r3, #20
 80032ca:	431a      	orrs	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	3b02      	subs	r3, #2
 80032d2:	061b      	lsls	r3, r3, #24
 80032d4:	431a      	orrs	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	3201      	adds	r2, #1
 80032e0:	4319      	orrs	r1, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032f4:	d113      	bne.n	800331e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80032fe:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	3b01      	subs	r3, #1
 8003306:	051b      	lsls	r3, r3, #20
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	431a      	orrs	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003340:	d11d      	bne.n	800337e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800334a:	4b13      	ldr	r3, [pc, #76]	@ (8003398 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800334c:	4013      	ands	r3, r2
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	6811      	ldr	r1, [r2, #0]
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	6852      	ldr	r2, [r2, #4]
 8003356:	0112      	lsls	r2, r2, #4
 8003358:	4311      	orrs	r1, r2
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	6892      	ldr	r2, [r2, #8]
 800335e:	0212      	lsls	r2, r2, #8
 8003360:	4311      	orrs	r1, r2
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	6992      	ldr	r2, [r2, #24]
 8003366:	4311      	orrs	r1, r2
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	68d2      	ldr	r2, [r2, #12]
 800336c:	0412      	lsls	r2, r2, #16
 800336e:	430a      	orrs	r2, r1
 8003370:	ea43 0102 	orr.w	r1, r3, r2
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800337c:	e005      	b.n	800338a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8003386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	cff00000 	.word	0xcff00000

0800339c <WIZCHIP_WRITE>:
/***********************
 * Basic I/O  Function *
 ***********************/
 
void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	807b      	strh	r3, [r7, #2]
   WIZCHIP_CRITICAL_ENTER();
 80033a8:	4b10      	ldr	r3, [pc, #64]	@ (80033ec <WIZCHIP_WRITE+0x50>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4798      	blx	r3
   WIZCHIP.CS._select();
 80033ae:	4b0f      	ldr	r3, [pc, #60]	@ (80033ec <WIZCHIP_WRITE+0x50>)
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	4798      	blx	r3

#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if(_WIZCHIP_IO_BUS_WIDTH_ == 8)
      WIZCHIP.IF.BUS._write_data(AddrSel,  (uint8_t)(wb>>8));
 80033b4:	4b0d      	ldr	r3, [pc, #52]	@ (80033ec <WIZCHIP_WRITE+0x50>)
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	887a      	ldrh	r2, [r7, #2]
 80033ba:	0a12      	lsrs	r2, r2, #8
 80033bc:	b292      	uxth	r2, r2
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	4611      	mov	r1, r2
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	4798      	blx	r3
      WIZCHIP.IF.BUS._write_data(WIZCHIP_OFFSET_INC(AddrSel,1),(uint8_t)wb);
 80033c6:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <WIZCHIP_WRITE+0x50>)
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	3201      	adds	r2, #1
 80033ce:	8879      	ldrh	r1, [r7, #2]
 80033d0:	b2c9      	uxtb	r1, r1
 80033d2:	4610      	mov	r0, r2
 80033d4:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <WIZCHIP_WRITE+0x50>)
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80033dc:	4b03      	ldr	r3, [pc, #12]	@ (80033ec <WIZCHIP_WRITE+0x50>)
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	4798      	blx	r3
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000024 	.word	0x20000024

080033f0 <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
   uint16_t ret;

   WIZCHIP_CRITICAL_ENTER();
 80033f8:	4b11      	ldr	r3, [pc, #68]	@ (8003440 <WIZCHIP_READ+0x50>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80033fe:	4b10      	ldr	r3, [pc, #64]	@ (8003440 <WIZCHIP_READ+0x50>)
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	4798      	blx	r3

#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if (_WIZCHIP_IO_BUS_WIDTH_ == 8)
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
 8003404:	4b0e      	ldr	r3, [pc, #56]	@ (8003440 <WIZCHIP_READ+0x50>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	4798      	blx	r3
 800340c:	4603      	mov	r3, r0
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	b21c      	sxth	r4, r3
            (((uint16_t)WIZCHIP.IF.BUS._read_data(WIZCHIP_OFFSET_INC(AddrSel,1))) & 0x00FF) ;   
 8003412:	4b0b      	ldr	r3, [pc, #44]	@ (8003440 <WIZCHIP_READ+0x50>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	3201      	adds	r2, #1
 800341a:	4610      	mov	r0, r2
 800341c:	4798      	blx	r3
 800341e:	4603      	mov	r3, r0
 8003420:	b21b      	sxth	r3, r3
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
 8003422:	4323      	orrs	r3, r4
 8003424:	b21b      	sxth	r3, r3
 8003426:	81fb      	strh	r3, [r7, #14]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 8003428:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <WIZCHIP_READ+0x50>)
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800342e:	4b04      	ldr	r3, [pc, #16]	@ (8003440 <WIZCHIP_READ+0x50>)
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	4798      	blx	r3
   return ret;
 8003434:	89fb      	ldrh	r3, [r7, #14]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	bd90      	pop	{r4, r7, pc}
 800343e:	bf00      	nop
 8003440:	20000024 	.word	0x20000024

08003444 <setTMSR>:


void setTMSR(uint8_t sn,uint8_t tmsr)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	460a      	mov	r2, r1
 800344e:	71fb      	strb	r3, [r7, #7]
 8003450:	4613      	mov	r3, r2
 8003452:	71bb      	strb	r3, [r7, #6]
   uint16_t tmem;
   tmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)));
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800345a:	3320      	adds	r3, #32
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff ffc7 	bl	80033f0 <WIZCHIP_READ>
 8003462:	4603      	mov	r3, r0
 8003464:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  tmem = (tmem & 0xFF00) | (((uint16_t)tmsr ) & 0x00FF) ;
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <setTMSR+0x42>
 8003470:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003474:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003478:	b21a      	sxth	r2, r3
 800347a:	79bb      	ldrb	r3, [r7, #6]
 800347c:	b21b      	sxth	r3, r3
 800347e:	4313      	orrs	r3, r2
 8003480:	b21b      	sxth	r3, r3
 8003482:	81fb      	strh	r3, [r7, #14]
 8003484:	e009      	b.n	800349a <setTMSR+0x56>
   else tmem =  (tmem & 0x00FF) | (((uint16_t)tmsr) << 8) ;
 8003486:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	b21a      	sxth	r2, r3
 800348e:	79bb      	ldrb	r3, [r7, #6]
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	b21b      	sxth	r3, r3
 8003494:	4313      	orrs	r3, r2
 8003496:	b21b      	sxth	r3, r3
 8003498:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80034a0:	3320      	adds	r3, #32
 80034a2:	461a      	mov	r2, r3
 80034a4:	89fb      	ldrh	r3, [r7, #14]
 80034a6:	4619      	mov	r1, r3
 80034a8:	4610      	mov	r0, r2
 80034aa:	f7ff ff77 	bl	800339c <WIZCHIP_WRITE>
}
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <getTMSR>:
   
uint8_t getTMSR(uint8_t sn)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	4603      	mov	r3, r0
 80034be:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <getTMSR+0x28>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80034d0:	3320      	adds	r3, #32
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ff8c 	bl	80033f0 <WIZCHIP_READ>
 80034d8:	4603      	mov	r3, r0
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	e00a      	b.n	80034f4 <getTMSR+0x3e>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80034e4:	3320      	adds	r3, #32
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff ff82 	bl	80033f0 <WIZCHIP_READ>
 80034ec:	4603      	mov	r3, r0
 80034ee:	0a1b      	lsrs	r3, r3, #8
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	b2db      	uxtb	r3, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <setRMSR>:

void setRMSR(uint8_t sn,uint8_t rmsr)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	460a      	mov	r2, r1
 8003506:	71fb      	strb	r3, [r7, #7]
 8003508:	4613      	mov	r3, r2
 800350a:	71bb      	strb	r3, [r7, #6]
   uint16_t rmem;
   rmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)));
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003512:	3328      	adds	r3, #40	@ 0x28
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ff6b 	bl	80033f0 <WIZCHIP_READ>
 800351a:	4603      	mov	r3, r0
 800351c:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  rmem = (rmem & 0xFF00) | (((uint16_t)rmsr ) & 0x00FF) ;
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00a      	beq.n	800353e <setRMSR+0x42>
 8003528:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800352c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003530:	b21a      	sxth	r2, r3
 8003532:	79bb      	ldrb	r3, [r7, #6]
 8003534:	b21b      	sxth	r3, r3
 8003536:	4313      	orrs	r3, r2
 8003538:	b21b      	sxth	r3, r3
 800353a:	81fb      	strh	r3, [r7, #14]
 800353c:	e009      	b.n	8003552 <setRMSR+0x56>
   else rmem =  (rmem & 0x00FF) | (((uint16_t)rmsr) << 8) ;
 800353e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	b21a      	sxth	r2, r3
 8003546:	79bb      	ldrb	r3, [r7, #6]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	b21b      	sxth	r3, r3
 800354c:	4313      	orrs	r3, r2
 800354e:	b21b      	sxth	r3, r3
 8003550:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003558:	3328      	adds	r3, #40	@ 0x28
 800355a:	461a      	mov	r2, r3
 800355c:	89fb      	ldrh	r3, [r7, #14]
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f7ff ff1b 	bl	800339c <WIZCHIP_WRITE>
}
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <getSn_TX_FSR>:
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
}

uint32_t getSn_TX_FSR(uint8_t sn)
{
 800356e:	b590      	push	{r4, r7, lr}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	4603      	mov	r3, r0
 8003576:	71fb      	strb	r3, [r7, #7]
   uint32_t free_tx_size=0;
 8003578:	2300      	movs	r3, #0
 800357a:	60bb      	str	r3, [r7, #8]
   uint32_t free_tx_size1=1;
 800357c:	2301      	movs	r3, #1
 800357e:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	3308      	adds	r3, #8
 8003584:	019b      	lsls	r3, r3, #6
 8003586:	3324      	adds	r3, #36	@ 0x24
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ff31 	bl	80033f0 <WIZCHIP_READ>
 800358e:	4603      	mov	r3, r0
 8003590:	041c      	lsls	r4, r3, #16
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	3308      	adds	r3, #8
 8003596:	019b      	lsls	r3, r3, #6
 8003598:	3326      	adds	r3, #38	@ 0x26
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff ff28 	bl	80033f0 <WIZCHIP_READ>
 80035a0:	4603      	mov	r3, r0
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 80035a2:	4323      	orrs	r3, r4
 80035a4:	60bb      	str	r3, [r7, #8]
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d002      	beq.n	80035b4 <getSn_TX_FSR+0x46>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	60fb      	str	r3, [r7, #12]
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 80035b2:	e7e5      	b.n	8003580 <getSn_TX_FSR+0x12>
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 80035b4:	bf00      	nop
   }                                                                       
   return free_tx_size;                                                    
 80035b6:	68bb      	ldr	r3, [r7, #8]
}                                                                          
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd90      	pop	{r4, r7, pc}

080035c0 <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	71fb      	strb	r3, [r7, #7]
   uint32_t received_rx_size=0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60bb      	str	r3, [r7, #8]
   uint32_t received_rx_size1=1;
 80035ce:	2301      	movs	r3, #1
 80035d0:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	3308      	adds	r3, #8
 80035d6:	019b      	lsls	r3, r3, #6
 80035d8:	3328      	adds	r3, #40	@ 0x28
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff ff08 	bl	80033f0 <WIZCHIP_READ>
 80035e0:	4603      	mov	r3, r0
 80035e2:	041c      	lsls	r4, r3, #16
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	3308      	adds	r3, #8
 80035e8:	019b      	lsls	r3, r3, #6
 80035ea:	332a      	adds	r3, #42	@ 0x2a
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff feff 	bl	80033f0 <WIZCHIP_READ>
 80035f2:	4603      	mov	r3, r0
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 80035f4:	4323      	orrs	r3, r4
 80035f6:	60bb      	str	r3, [r7, #8]
      if(received_rx_size == received_rx_size1) break;                                                                         
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d002      	beq.n	8003606 <getSn_RX_RSR+0x46>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	60fb      	str	r3, [r7, #12]
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8003604:	e7e5      	b.n	80035d2 <getSn_RX_RSR+0x12>
      if(received_rx_size == received_rx_size1) break;                                                                         
 8003606:	bf00      	nop
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	4a05      	ldr	r2, [pc, #20]	@ (8003620 <getSn_RX_RSR+0x60>)
 800360c:	5cd3      	ldrb	r3, [r2, r3]
 800360e:	105b      	asrs	r3, r3, #1
 8003610:	f003 0201 	and.w	r2, r3, #1
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4413      	add	r3, r2
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	bd90      	pop	{r4, r7, pc}
 8003620:	200009e8 	.word	0x200009e8

08003624 <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	73fb      	strb	r3, [r7, #15]
   uint32_t i = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
   if(len == 0)  return;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d021      	beq.n	8003680 <wiz_send_data+0x5c>
   
   for(i = 0; i < len ; i += 2)
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	e019      	b.n	8003676 <wiz_send_data+0x52>
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	3308      	adds	r3, #8
 8003646:	019b      	lsls	r3, r3, #6
 8003648:	332e      	adds	r3, #46	@ 0x2e
 800364a:	4618      	mov	r0, r3
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	4413      	add	r3, r2
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	b21a      	sxth	r2, r3
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	3301      	adds	r3, #1
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	440b      	add	r3, r1
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	b21b      	sxth	r3, r3
 8003664:	4313      	orrs	r3, r2
 8003666:	b21b      	sxth	r3, r3
 8003668:	b29b      	uxth	r3, r3
 800366a:	4619      	mov	r1, r3
 800366c:	f7ff fe96 	bl	800339c <WIZCHIP_WRITE>
   for(i = 0; i < len ; i += 2)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	3302      	adds	r3, #2
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	429a      	cmp	r2, r3
 800367c:	d3e1      	bcc.n	8003642 <wiz_send_data+0x1e>
 800367e:	e000      	b.n	8003682 <wiz_send_data+0x5e>
   if(len == 0)  return;
 8003680:	bf00      	nop
}
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	73fb      	strb	r3, [r7, #15]
   uint16_t rd = 0;
 8003696:	2300      	movs	r3, #0
 8003698:	82fb      	strh	r3, [r7, #22]
   uint32_t i = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	613b      	str	r3, [r7, #16]
   
   if(len == 0) return;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d02c      	beq.n	80036fe <wiz_recv_data+0x76>
      
   for(i = 0; i < len; i++)
 80036a4:	2300      	movs	r3, #0
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	e01f      	b.n	80036ea <wiz_recv_data+0x62>
   {
      if((i & 0x01)==0)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d111      	bne.n	80036d8 <wiz_recv_data+0x50>
      {
         rd = getSn_RX_FIFOR(sn);
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	3308      	adds	r3, #8
 80036b8:	019b      	lsls	r3, r3, #6
 80036ba:	3330      	adds	r3, #48	@ 0x30
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fe97 	bl	80033f0 <WIZCHIP_READ>
 80036c2:	4603      	mov	r3, r0
 80036c4:	82fb      	strh	r3, [r7, #22]
         wizdata[i]   = (uint8_t)(rd >> 8);
 80036c6:	8afb      	ldrh	r3, [r7, #22]
 80036c8:	0a1b      	lsrs	r3, r3, #8
 80036ca:	b299      	uxth	r1, r3
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4413      	add	r3, r2
 80036d2:	b2ca      	uxtb	r2, r1
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	e005      	b.n	80036e4 <wiz_recv_data+0x5c>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4413      	add	r3, r2
 80036de:	8afa      	ldrh	r2, [r7, #22]
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < len; i++)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	3301      	adds	r3, #1
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d3db      	bcc.n	80036aa <wiz_recv_data+0x22>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	8afa      	ldrh	r2, [r7, #22]
 80036f6:	b2d1      	uxtb	r1, r2
 80036f8:	4a03      	ldr	r2, [pc, #12]	@ (8003708 <wiz_recv_data+0x80>)
 80036fa:	54d1      	strb	r1, [r2, r3]
 80036fc:	e000      	b.n	8003700 <wiz_recv_data+0x78>
   if(len == 0) return;
 80036fe:	bf00      	nop
}
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	200009f0 	.word	0x200009f0

0800370c <wiz_recv_ignore>:

void wiz_recv_ignore(uint8_t sn, uint32_t len)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	6039      	str	r1, [r7, #0]
 8003716:	71fb      	strb	r3, [r7, #7]
   uint32_t i = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
   for(i = 0; i < len ; i += 2) getSn_RX_FIFOR(sn);
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	e009      	b.n	8003736 <wiz_recv_ignore+0x2a>
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	3308      	adds	r3, #8
 8003726:	019b      	lsls	r3, r3, #6
 8003728:	3330      	adds	r3, #48	@ 0x30
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fe60 	bl	80033f0 <WIZCHIP_READ>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3302      	adds	r3, #2
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d3f1      	bcc.n	8003722 <wiz_recv_ignore+0x16>
}
 800373e:	bf00      	nop
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	4604      	mov	r4, r0
 8003750:	4608      	mov	r0, r1
 8003752:	4611      	mov	r1, r2
 8003754:	461a      	mov	r2, r3
 8003756:	4623      	mov	r3, r4
 8003758:	71fb      	strb	r3, [r7, #7]
 800375a:	4603      	mov	r3, r0
 800375c:	71bb      	strb	r3, [r7, #6]
 800375e:	460b      	mov	r3, r1
 8003760:	80bb      	strh	r3, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	2b08      	cmp	r3, #8
 800376a:	d902      	bls.n	8003772 <socket+0x2a>
 800376c:	f04f 33ff 	mov.w	r3, #4294967295
 8003770:	e0f6      	b.n	8003960 <socket+0x218>
	switch(protocol)
 8003772:	79bb      	ldrb	r3, [r7, #6]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d005      	beq.n	8003784 <socket+0x3c>
 8003778:	2b00      	cmp	r3, #0
 800377a:	dd32      	ble.n	80037e2 <socket+0x9a>
 800377c:	3b02      	subs	r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	d82f      	bhi.n	80037e2 <socket+0x9a>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003782:	e032      	b.n	80037ea <socket+0xa2>
            getSIPR((uint8_t*)&taddr);
 8003784:	2018      	movs	r0, #24
 8003786:	f7ff fe33 	bl	80033f0 <WIZCHIP_READ>
 800378a:	4603      	mov	r3, r0
 800378c:	0a1b      	lsrs	r3, r3, #8
 800378e:	b29a      	uxth	r2, r3
 8003790:	f107 030c 	add.w	r3, r7, #12
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	701a      	strb	r2, [r3, #0]
 8003798:	2018      	movs	r0, #24
 800379a:	f7ff fe29 	bl	80033f0 <WIZCHIP_READ>
 800379e:	4603      	mov	r3, r0
 80037a0:	461a      	mov	r2, r3
 80037a2:	f107 030c 	add.w	r3, r7, #12
 80037a6:	3301      	adds	r3, #1
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	701a      	strb	r2, [r3, #0]
 80037ac:	201a      	movs	r0, #26
 80037ae:	f7ff fe1f 	bl	80033f0 <WIZCHIP_READ>
 80037b2:	4603      	mov	r3, r0
 80037b4:	0a1b      	lsrs	r3, r3, #8
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	f107 030c 	add.w	r3, r7, #12
 80037bc:	3302      	adds	r3, #2
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	201a      	movs	r0, #26
 80037c4:	f7ff fe14 	bl	80033f0 <WIZCHIP_READ>
 80037c8:	4603      	mov	r3, r0
 80037ca:	461a      	mov	r2, r3
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	3303      	adds	r3, #3
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d105      	bne.n	80037e8 <socket+0xa0>
 80037dc:	f06f 0302 	mvn.w	r3, #2
 80037e0:	e0be      	b.n	8003960 <socket+0x218>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80037e2:	f06f 0304 	mvn.w	r3, #4
 80037e6:	e0bb      	b.n	8003960 <socket+0x218>
	    break;
 80037e8:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <socket+0xb2>
 80037f4:	f06f 0305 	mvn.w	r3, #5
 80037f8:	e0b2      	b.n	8003960 <socket+0x218>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01c      	beq.n	800383a <socket+0xf2>
	{
   	switch(protocol)
 8003800:	79bb      	ldrb	r3, [r7, #6]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d002      	beq.n	800380c <socket+0xc4>
 8003806:	2b02      	cmp	r3, #2
 8003808:	d008      	beq.n	800381c <socket+0xd4>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800380a:	e016      	b.n	800383a <socket+0xf2>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	f003 0323 	and.w	r3, r3, #35	@ 0x23
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10e      	bne.n	8003834 <socket+0xec>
 8003816:	f06f 0305 	mvn.w	r3, #5
 800381a:	e0a1      	b.n	8003960 <socket+0x218>
   	      if(flag & SF_IGMP_VER2)
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <socket+0xf0>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003826:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800382a:	2b00      	cmp	r3, #0
 800382c:	db04      	blt.n	8003838 <socket+0xf0>
 800382e:	f06f 0305 	mvn.w	r3, #5
 8003832:	e095      	b.n	8003960 <socket+0x218>
   	      break;
 8003834:	bf00      	nop
 8003836:	e000      	b.n	800383a <socket+0xf2>
   	      break;
 8003838:	bf00      	nop
   	}
   }
	close(sn);
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	4618      	mov	r0, r3
 800383e:	f000 f89d 	bl	800397c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	3308      	adds	r3, #8
 8003846:	019b      	lsls	r3, r3, #6
 8003848:	4618      	mov	r0, r3
 800384a:	79bb      	ldrb	r3, [r7, #6]
 800384c:	b21a      	sxth	r2, r3
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	b21b      	sxth	r3, r3
 8003852:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003856:	b21b      	sxth	r3, r3
 8003858:	4313      	orrs	r3, r2
 800385a:	b21a      	sxth	r2, r3
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	01db      	lsls	r3, r3, #7
 8003860:	b21b      	sxth	r3, r3
 8003862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003866:	b21b      	sxth	r3, r3
 8003868:	4313      	orrs	r3, r2
 800386a:	b21b      	sxth	r3, r3
 800386c:	b29b      	uxth	r3, r3
 800386e:	4619      	mov	r1, r3
 8003870:	f7ff fd94 	bl	800339c <WIZCHIP_WRITE>
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    #endif
	if(!port)
 8003874:	88bb      	ldrh	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d110      	bne.n	800389c <socket+0x154>
	{
	   port = sock_any_port++;
 800387a:	4b3b      	ldr	r3, [pc, #236]	@ (8003968 <socket+0x220>)
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	b291      	uxth	r1, r2
 8003882:	4a39      	ldr	r2, [pc, #228]	@ (8003968 <socket+0x220>)
 8003884:	8011      	strh	r1, [r2, #0]
 8003886:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8003888:	4b37      	ldr	r3, [pc, #220]	@ (8003968 <socket+0x220>)
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8003890:	4293      	cmp	r3, r2
 8003892:	d103      	bne.n	800389c <socket+0x154>
 8003894:	4b34      	ldr	r3, [pc, #208]	@ (8003968 <socket+0x220>)
 8003896:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800389a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	3308      	adds	r3, #8
 80038a0:	019b      	lsls	r3, r3, #6
 80038a2:	330a      	adds	r3, #10
 80038a4:	461a      	mov	r2, r3
 80038a6:	88bb      	ldrh	r3, [r7, #4]
 80038a8:	4619      	mov	r1, r3
 80038aa:	4610      	mov	r0, r2
 80038ac:	f7ff fd76 	bl	800339c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	3308      	adds	r3, #8
 80038b4:	019b      	lsls	r3, r3, #6
 80038b6:	3302      	adds	r3, #2
 80038b8:	2101      	movs	r1, #1
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff fd6e 	bl	800339c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80038c0:	bf00      	nop
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	3308      	adds	r3, #8
 80038c6:	019b      	lsls	r3, r3, #6
 80038c8:	3302      	adds	r3, #2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fd90 	bl	80033f0 <WIZCHIP_READ>
 80038d0:	4603      	mov	r3, r0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f4      	bne.n	80038c2 <socket+0x17a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	2201      	movs	r2, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	b21b      	sxth	r3, r3
 80038e2:	43db      	mvns	r3, r3
 80038e4:	b21a      	sxth	r2, r3
 80038e6:	4b21      	ldr	r3, [pc, #132]	@ (800396c <socket+0x224>)
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	b21b      	sxth	r3, r3
 80038ec:	4013      	ands	r3, r2
 80038ee:	b21b      	sxth	r3, r3
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	4b1e      	ldr	r3, [pc, #120]	@ (800396c <socket+0x224>)
 80038f4:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	f003 0201 	and.w	r2, r3, #1
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	b21a      	sxth	r2, r3
 8003904:	4b19      	ldr	r3, [pc, #100]	@ (800396c <socket+0x224>)
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	b21b      	sxth	r3, r3
 800390a:	4313      	orrs	r3, r2
 800390c:	b21b      	sxth	r3, r3
 800390e:	b29a      	uxth	r2, r3
 8003910:	4b16      	ldr	r3, [pc, #88]	@ (800396c <socket+0x224>)
 8003912:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	2201      	movs	r2, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	b21b      	sxth	r3, r3
 800391e:	43db      	mvns	r3, r3
 8003920:	b21a      	sxth	r2, r3
 8003922:	4b13      	ldr	r3, [pc, #76]	@ (8003970 <socket+0x228>)
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	b21b      	sxth	r3, r3
 8003928:	4013      	ands	r3, r2
 800392a:	b21b      	sxth	r3, r3
 800392c:	b29a      	uxth	r2, r3
 800392e:	4b10      	ldr	r3, [pc, #64]	@ (8003970 <socket+0x228>)
 8003930:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	4a0f      	ldr	r2, [pc, #60]	@ (8003974 <socket+0x22c>)
 8003936:	2100      	movs	r1, #0
 8003938:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	4a0e      	ldr	r2, [pc, #56]	@ (8003978 <socket+0x230>)
 8003940:	2100      	movs	r1, #0
 8003942:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003944:	bf00      	nop
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	3308      	adds	r3, #8
 800394a:	019b      	lsls	r3, r3, #6
 800394c:	3308      	adds	r3, #8
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff fd4e 	bl	80033f0 <WIZCHIP_READ>
 8003954:	4603      	mov	r3, r0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f4      	beq.n	8003946 <socket+0x1fe>
   return (int8_t)sn;
 800395c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	bd90      	pop	{r4, r7, pc}
 8003968:	20000022 	.word	0x20000022
 800396c:	200009d4 	.word	0x200009d4
 8003970:	200009d6 	.word	0x200009d6
 8003974:	200009d8 	.word	0x200009d8
 8003978:	200009e8 	.word	0x200009e8

0800397c <close>:

int8_t close(uint8_t sn)
{
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	b087      	sub	sp, #28
 8003980:	af02      	add	r7, sp, #8
 8003982:	4603      	mov	r3, r0
 8003984:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d902      	bls.n	8003992 <close+0x16>
 800398c:	f04f 33ff 	mov.w	r3, #4294967295
 8003990:	e0a5      	b.n	8003ade <close+0x162>
//A20160426 : Applied the erratum 1 of W5300
#if   (_WIZCHIP_ == 5300) 
   //M20160503 : Wrong socket parameter. s -> sn 
   //if( ((getSn_MR(s)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(s) != getSn_TxMAX(s)) ) 
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	3308      	adds	r3, #8
 8003996:	019b      	lsls	r3, r3, #6
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fd29 	bl	80033f0 <WIZCHIP_READ>
 800399e:	4603      	mov	r3, r0
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d14a      	bne.n	8003a3e <close+0xc2>
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff fddf 	bl	800356e <getSn_TX_FSR>
 80039b0:	4604      	mov	r4, r0
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fd7e 	bl	80034b6 <getTMSR>
 80039ba:	4603      	mov	r3, r0
 80039bc:	029b      	lsls	r3, r3, #10
 80039be:	429c      	cmp	r4, r3
 80039c0:	d03d      	beq.n	8003a3e <close+0xc2>
   { 
      uint8_t destip[4] = {0, 0, 0, 1};
 80039c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039c6:	60fb      	str	r3, [r7, #12]
      //     if (getSn_TX_FSR(s) == getSn_TxMAX(s)) continue;
      // 
      //M20160503 : The socket() of close() calls close() itself again. It occures a infinite loop - close()->socket()->close()->socket()-> ~
      //socket(s,Sn_MR_UDP,0x3000,0);
      //sendto(s,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
      setSn_MR(sn,Sn_MR_UDP);
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	3308      	adds	r3, #8
 80039cc:	019b      	lsls	r3, r3, #6
 80039ce:	2102      	movs	r1, #2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fce3 	bl	800339c <WIZCHIP_WRITE>
      setSn_PORTR(sn, 0x3000);
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	3308      	adds	r3, #8
 80039da:	019b      	lsls	r3, r3, #6
 80039dc:	330a      	adds	r3, #10
 80039de:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff fcda 	bl	800339c <WIZCHIP_WRITE>
      setSn_CR(sn,Sn_CR_OPEN);
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	3308      	adds	r3, #8
 80039ec:	019b      	lsls	r3, r3, #6
 80039ee:	3302      	adds	r3, #2
 80039f0:	2101      	movs	r1, #1
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fcd2 	bl	800339c <WIZCHIP_WRITE>
      while(getSn_CR(sn) != 0);
 80039f8:	bf00      	nop
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	3308      	adds	r3, #8
 80039fe:	019b      	lsls	r3, r3, #6
 8003a00:	3302      	adds	r3, #2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff fcf4 	bl	80033f0 <WIZCHIP_READ>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f4      	bne.n	80039fa <close+0x7e>
      while(getSn_SR(sn) != SOCK_UDP);
 8003a10:	bf00      	nop
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	3308      	adds	r3, #8
 8003a16:	019b      	lsls	r3, r3, #6
 8003a18:	3308      	adds	r3, #8
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff fce8 	bl	80033f0 <WIZCHIP_READ>
 8003a20:	4603      	mov	r3, r0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b22      	cmp	r3, #34	@ 0x22
 8003a26:	d1f4      	bne.n	8003a12 <close+0x96>
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 8003a28:	f107 030c 	add.w	r3, r7, #12
 8003a2c:	f107 010c 	add.w	r1, r7, #12
 8003a30:	79f8      	ldrb	r0, [r7, #7]
 8003a32:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003a36:	9200      	str	r2, [sp, #0]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f000 f85d 	bl	8003af8 <sendto>
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	3308      	adds	r3, #8
 8003a42:	019b      	lsls	r3, r3, #6
 8003a44:	3302      	adds	r3, #2
 8003a46:	2110      	movs	r1, #16
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff fca7 	bl	800339c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003a4e:	bf00      	nop
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	3308      	adds	r3, #8
 8003a54:	019b      	lsls	r3, r3, #6
 8003a56:	3302      	adds	r3, #2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff fcc9 	bl	80033f0 <WIZCHIP_READ>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f4      	bne.n	8003a50 <close+0xd4>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	3308      	adds	r3, #8
 8003a6a:	019b      	lsls	r3, r3, #6
 8003a6c:	3306      	adds	r3, #6
 8003a6e:	21ff      	movs	r1, #255	@ 0xff
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fc93 	bl	800339c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	b21b      	sxth	r3, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	b21a      	sxth	r2, r3
 8003a84:	4b18      	ldr	r3, [pc, #96]	@ (8003ae8 <close+0x16c>)
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b21b      	sxth	r3, r3
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	b21b      	sxth	r3, r3
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	4b15      	ldr	r3, [pc, #84]	@ (8003ae8 <close+0x16c>)
 8003a92:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	2201      	movs	r2, #1
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	b21b      	sxth	r3, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	b21a      	sxth	r2, r3
 8003aa2:	4b12      	ldr	r3, [pc, #72]	@ (8003aec <close+0x170>)
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b21b      	sxth	r3, r3
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	b21b      	sxth	r3, r3
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	4b0f      	ldr	r3, [pc, #60]	@ (8003aec <close+0x170>)
 8003ab0:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	4a0e      	ldr	r2, [pc, #56]	@ (8003af0 <close+0x174>)
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	4a0d      	ldr	r2, [pc, #52]	@ (8003af4 <close+0x178>)
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003ac4:	bf00      	nop
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	3308      	adds	r3, #8
 8003aca:	019b      	lsls	r3, r3, #6
 8003acc:	3308      	adds	r3, #8
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff fc8e 	bl	80033f0 <WIZCHIP_READ>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f4      	bne.n	8003ac6 <close+0x14a>
	return SOCK_OK;
 8003adc:	2301      	movs	r3, #1
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd90      	pop	{r4, r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	200009d4 	.word	0x200009d4
 8003aec:	200009d6 	.word	0x200009d6
 8003af0:	200009d8 	.word	0x200009d8
 8003af4:	200009e8 	.word	0x200009e8

08003af8 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	4603      	mov	r3, r0
 8003b04:	73fb      	strb	r3, [r7, #15]
 8003b06:	4613      	mov	r3, r2
 8003b08:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d902      	bls.n	8003b1e <sendto+0x26>
 8003b18:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1c:	e1d5      	b.n	8003eca <sendto+0x3d2>
   switch(getSn_MR(sn) & 0x0F)
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	3308      	adds	r3, #8
 8003b22:	019b      	lsls	r3, r3, #6
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff fc63 	bl	80033f0 <WIZCHIP_READ>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	3b02      	subs	r3, #2
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d902      	bls.n	8003b3c <sendto+0x44>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003b36:	f06f 0304 	mvn.w	r3, #4
 8003b3a:	e1c6      	b.n	8003eca <sendto+0x3d2>
         break;
 8003b3c:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8003b3e:	89bb      	ldrh	r3, [r7, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d102      	bne.n	8003b4a <sendto+0x52>
 8003b44:	f06f 030d 	mvn.w	r3, #13
 8003b48:	e1bf      	b.n	8003eca <sendto+0x3d2>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	3201      	adds	r2, #1
 8003b58:	7812      	ldrb	r2, [r2, #0]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	3202      	adds	r2, #2
 8003b66:	7812      	ldrb	r2, [r2, #0]
 8003b68:	4413      	add	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	3203      	adds	r2, #3
 8003b74:	7812      	ldrb	r2, [r2, #0]
 8003b76:	4413      	add	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10d      	bne.n	8003b9c <sendto+0xa4>
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	3308      	adds	r3, #8
 8003b84:	019b      	lsls	r3, r3, #6
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff fc32 	bl	80033f0 <WIZCHIP_READ>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d002      	beq.n	8003b9c <sendto+0xa4>
 8003b96:	f06f 030b 	mvn.w	r3, #11
 8003b9a:	e196      	b.n	8003eca <sendto+0x3d2>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8003b9c:	8c3b      	ldrh	r3, [r7, #32]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10d      	bne.n	8003bbe <sendto+0xc6>
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	019b      	lsls	r3, r3, #6
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff fc21 	bl	80033f0 <WIZCHIP_READ>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d002      	beq.n	8003bbe <sendto+0xc6>
 8003bb8:	f06f 030a 	mvn.w	r3, #10
 8003bbc:	e185      	b.n	8003eca <sendto+0x3d2>
   tmp = getSn_SR(sn);
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	019b      	lsls	r3, r3, #6
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff fc12 	bl	80033f0 <WIZCHIP_READ>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
 8003bd2:	2b42      	cmp	r3, #66	@ 0x42
 8003bd4:	d008      	beq.n	8003be8 <sendto+0xf0>
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
 8003bd8:	2b22      	cmp	r3, #34	@ 0x22
 8003bda:	d005      	beq.n	8003be8 <sendto+0xf0>
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	2b32      	cmp	r3, #50	@ 0x32
 8003be0:	d002      	beq.n	8003be8 <sendto+0xf0>
 8003be2:	f06f 0306 	mvn.w	r3, #6
 8003be6:	e170      	b.n	8003eca <sendto+0x3d2>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	3308      	adds	r3, #8
 8003bec:	019b      	lsls	r3, r3, #6
 8003bee:	3314      	adds	r3, #20
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	3201      	adds	r2, #1
 8003bfe:	7812      	ldrb	r2, [r2, #0]
 8003c00:	4413      	add	r3, r2
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	4619      	mov	r1, r3
 8003c06:	f7ff fbc9 	bl	800339c <WIZCHIP_WRITE>
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	019b      	lsls	r3, r3, #6
 8003c10:	3316      	adds	r3, #22
 8003c12:	4618      	mov	r0, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3302      	adds	r3, #2
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	3203      	adds	r2, #3
 8003c22:	7812      	ldrb	r2, [r2, #0]
 8003c24:	4413      	add	r3, r2
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	4619      	mov	r1, r3
 8003c2a:	f7ff fbb7 	bl	800339c <WIZCHIP_WRITE>
   setSn_DPORT(sn,port);      
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	3308      	adds	r3, #8
 8003c32:	019b      	lsls	r3, r3, #6
 8003c34:	3312      	adds	r3, #18
 8003c36:	461a      	mov	r2, r3
 8003c38:	8c3b      	ldrh	r3, [r7, #32]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	f7ff fbad 	bl	800339c <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fc36 	bl	80034b6 <getTMSR>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	029b      	lsls	r3, r3, #10
 8003c4e:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003c50:	89ba      	ldrh	r2, [r7, #12]
 8003c52:	8abb      	ldrh	r3, [r7, #20]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d901      	bls.n	8003c5c <sendto+0x164>
 8003c58:	8abb      	ldrh	r3, [r7, #20]
 8003c5a:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff fc85 	bl	800356e <getSn_TX_FSR>
 8003c64:	4603      	mov	r3, r0
 8003c66:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	019b      	lsls	r3, r3, #6
 8003c6e:	3308      	adds	r3, #8
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff fbbd 	bl	80033f0 <WIZCHIP_READ>
 8003c76:	4603      	mov	r3, r0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <sendto+0x18c>
 8003c7e:	f06f 0303 	mvn.w	r3, #3
 8003c82:	e122      	b.n	8003eca <sendto+0x3d2>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003c84:	4b93      	ldr	r3, [pc, #588]	@ (8003ed4 <sendto+0x3dc>)
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	fa42 f303 	asr.w	r3, r2, r3
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <sendto+0x1ac>
 8003c98:	89ba      	ldrh	r2, [r7, #12]
 8003c9a:	8abb      	ldrh	r3, [r7, #20]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d901      	bls.n	8003ca4 <sendto+0x1ac>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e112      	b.n	8003eca <sendto+0x3d2>
      if(len <= freesize) break;
 8003ca4:	89ba      	ldrh	r2, [r7, #12]
 8003ca6:	8abb      	ldrh	r3, [r7, #20]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d900      	bls.n	8003cae <sendto+0x1b6>
      freesize = getSn_TX_FSR(sn);
 8003cac:	e7d6      	b.n	8003c5c <sendto+0x164>
      if(len <= freesize) break;
 8003cae:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8003cb0:	89ba      	ldrh	r2, [r7, #12]
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	68b9      	ldr	r1, [r7, #8]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fcb4 	bl	8003624 <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 8003cbc:	2018      	movs	r0, #24
 8003cbe:	f7ff fb97 	bl	80033f0 <WIZCHIP_READ>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	0a1b      	lsrs	r3, r3, #8
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	f107 0310 	add.w	r3, r7, #16
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	2018      	movs	r0, #24
 8003cd2:	f7ff fb8d 	bl	80033f0 <WIZCHIP_READ>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f107 0310 	add.w	r3, r7, #16
 8003cde:	3301      	adds	r3, #1
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	701a      	strb	r2, [r3, #0]
 8003ce4:	201a      	movs	r0, #26
 8003ce6:	f7ff fb83 	bl	80033f0 <WIZCHIP_READ>
 8003cea:	4603      	mov	r3, r0
 8003cec:	0a1b      	lsrs	r3, r3, #8
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	f107 0310 	add.w	r3, r7, #16
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	201a      	movs	r0, #26
 8003cfc:	f7ff fb78 	bl	80033f0 <WIZCHIP_READ>
 8003d00:	4603      	mov	r3, r0
 8003d02:	461a      	mov	r2, r3
 8003d04:	f107 0310 	add.w	r3, r7, #16
 8003d08:	3303      	adds	r3, #3
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]
      if(taddr == 0)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d141      	bne.n	8003d98 <sendto+0x2a0>
      {
         getSUBR((uint8_t*)&taddr);
 8003d14:	2014      	movs	r0, #20
 8003d16:	f7ff fb6b 	bl	80033f0 <WIZCHIP_READ>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	0a1b      	lsrs	r3, r3, #8
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	f107 0310 	add.w	r3, r7, #16
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	701a      	strb	r2, [r3, #0]
 8003d28:	2014      	movs	r0, #20
 8003d2a:	f7ff fb61 	bl	80033f0 <WIZCHIP_READ>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	461a      	mov	r2, r3
 8003d32:	f107 0310 	add.w	r3, r7, #16
 8003d36:	3301      	adds	r3, #1
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	2016      	movs	r0, #22
 8003d3e:	f7ff fb57 	bl	80033f0 <WIZCHIP_READ>
 8003d42:	4603      	mov	r3, r0
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	f107 0310 	add.w	r3, r7, #16
 8003d4c:	3302      	adds	r3, #2
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	2016      	movs	r0, #22
 8003d54:	f7ff fb4c 	bl	80033f0 <WIZCHIP_READ>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f107 0310 	add.w	r3, r7, #16
 8003d60:	3303      	adds	r3, #3
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8003d66:	4b5c      	ldr	r3, [pc, #368]	@ (8003ed8 <sendto+0x3e0>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	4a5b      	ldr	r2, [pc, #364]	@ (8003edc <sendto+0x3e4>)
 8003d70:	7812      	ldrb	r2, [r2, #0]
 8003d72:	4413      	add	r3, r2
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	4619      	mov	r1, r3
 8003d78:	2014      	movs	r0, #20
 8003d7a:	f7ff fb0f 	bl	800339c <WIZCHIP_WRITE>
 8003d7e:	4b58      	ldr	r3, [pc, #352]	@ (8003ee0 <sendto+0x3e8>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	4a57      	ldr	r2, [pc, #348]	@ (8003ee4 <sendto+0x3ec>)
 8003d88:	7812      	ldrb	r2, [r2, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	4619      	mov	r1, r3
 8003d90:	2016      	movs	r0, #22
 8003d92:	f7ff fb03 	bl	800339c <WIZCHIP_WRITE>
 8003d96:	e001      	b.n	8003d9c <sendto+0x2a4>
      }
      else taddr = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	613b      	str	r3, [r7, #16]
   #endif

//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	3308      	adds	r3, #8
 8003da0:	019b      	lsls	r3, r3, #6
 8003da2:	3320      	adds	r3, #32
 8003da4:	461a      	mov	r2, r3
 8003da6:	89bb      	ldrh	r3, [r7, #12]
 8003da8:	0c1b      	lsrs	r3, r3, #16
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	4619      	mov	r1, r3
 8003dae:	4610      	mov	r0, r2
 8003db0:	f7ff faf4 	bl	800339c <WIZCHIP_WRITE>
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	3308      	adds	r3, #8
 8003db8:	019b      	lsls	r3, r3, #6
 8003dba:	3322      	adds	r3, #34	@ 0x22
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	89bb      	ldrh	r3, [r7, #12]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f7ff faea 	bl	800339c <WIZCHIP_WRITE>
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	3308      	adds	r3, #8
 8003dcc:	019b      	lsls	r3, r3, #6
 8003dce:	3302      	adds	r3, #2
 8003dd0:	2120      	movs	r1, #32
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff fae2 	bl	800339c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003dd8:	bf00      	nop
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	3308      	adds	r3, #8
 8003dde:	019b      	lsls	r3, r3, #6
 8003de0:	3302      	adds	r3, #2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff fb04 	bl	80033f0 <WIZCHIP_READ>
 8003de8:	4603      	mov	r3, r0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f4      	bne.n	8003dda <sendto+0x2e2>
   while(1)
   {
      tmp = getSn_IR(sn);
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	3308      	adds	r3, #8
 8003df4:	019b      	lsls	r3, r3, #6
 8003df6:	3306      	adds	r3, #6
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff faf9 	bl	80033f0 <WIZCHIP_READ>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8003e02:	7dfb      	ldrb	r3, [r7, #23]
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00c      	beq.n	8003e26 <sendto+0x32e>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	3308      	adds	r3, #8
 8003e10:	019b      	lsls	r3, r3, #6
 8003e12:	3306      	adds	r3, #6
 8003e14:	2110      	movs	r1, #16
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff fac0 	bl	800339c <WIZCHIP_WRITE>
         break;
 8003e1c:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d051      	beq.n	8003ec8 <sendto+0x3d0>
 8003e24:	e031      	b.n	8003e8a <sendto+0x392>
      else if(tmp & Sn_IR_TIMEOUT)
 8003e26:	7dfb      	ldrb	r3, [r7, #23]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0df      	beq.n	8003df0 <sendto+0x2f8>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	3308      	adds	r3, #8
 8003e34:	019b      	lsls	r3, r3, #6
 8003e36:	3306      	adds	r3, #6
 8003e38:	2108      	movs	r1, #8
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff faae 	bl	800339c <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01e      	beq.n	8003e84 <sendto+0x38c>
 8003e46:	f107 0310 	add.w	r3, r7, #16
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	021b      	lsls	r3, r3, #8
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	f107 0310 	add.w	r3, r7, #16
 8003e54:	3301      	adds	r3, #1
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	4413      	add	r3, r2
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	2014      	movs	r0, #20
 8003e60:	f7ff fa9c 	bl	800339c <WIZCHIP_WRITE>
 8003e64:	f107 0310 	add.w	r3, r7, #16
 8003e68:	3302      	adds	r3, #2
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	f107 0310 	add.w	r3, r7, #16
 8003e74:	3303      	adds	r3, #3
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	4413      	add	r3, r2
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	2016      	movs	r0, #22
 8003e80:	f7ff fa8c 	bl	800339c <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8003e84:	f06f 030c 	mvn.w	r3, #12
 8003e88:	e01f      	b.n	8003eca <sendto+0x3d2>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8003e8a:	f107 0310 	add.w	r3, r7, #16
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	f107 0310 	add.w	r3, r7, #16
 8003e98:	3301      	adds	r3, #1
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	2014      	movs	r0, #20
 8003ea4:	f7ff fa7a 	bl	800339c <WIZCHIP_WRITE>
 8003ea8:	f107 0310 	add.w	r3, r7, #16
 8003eac:	3302      	adds	r3, #2
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	f107 0310 	add.w	r3, r7, #16
 8003eb8:	3303      	adds	r3, #3
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	2016      	movs	r0, #22
 8003ec4:	f7ff fa6a 	bl	800339c <WIZCHIP_WRITE>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003ec8:	89bb      	ldrh	r3, [r7, #12]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	200009d4 	.word	0x200009d4
 8003ed8:	08007a38 	.word	0x08007a38
 8003edc:	08007a39 	.word	0x08007a39
 8003ee0:	08007a3a 	.word	0x08007a3a
 8003ee4:	08007a3b 	.word	0x08007a3b

08003ee8 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607b      	str	r3, [r7, #4]
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	73fb      	strb	r3, [r7, #15]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d902      	bls.n	8003f0a <recvfrom+0x22>
 8003f04:	f04f 33ff 	mov.w	r3, #4294967295
 8003f08:	e257      	b.n	80043ba <recvfrom+0x4d2>
   //CHECK_SOCKMODE(Sn_MR_UDP);
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2201      	movs	r2, #1
 8003f14:	7812      	ldrb	r2, [r2, #0]
 8003f16:	4413      	add	r3, r2
 8003f18:	83bb      	strh	r3, [r7, #28]
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	019b      	lsls	r3, r3, #6
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fa65 	bl	80033f0 <WIZCHIP_READ>
 8003f26:	4603      	mov	r3, r0
 8003f28:	837b      	strh	r3, [r7, #26]
 8003f2a:	8b7b      	ldrh	r3, [r7, #26]
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	3b02      	subs	r3, #2
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d902      	bls.n	8003f3c <recvfrom+0x54>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003f36:	f06f 0304 	mvn.w	r3, #4
 8003f3a:	e23e      	b.n	80043ba <recvfrom+0x4d2>
         break;
 8003f3c:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8003f3e:	89bb      	ldrh	r3, [r7, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <recvfrom+0x62>
 8003f44:	f06f 030d 	mvn.w	r3, #13
 8003f48:	e237      	b.n	80043ba <recvfrom+0x4d2>
   if(sock_remained_size[sn] == 0)
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	4aa6      	ldr	r2, [pc, #664]	@ (80041e8 <recvfrom+0x300>)
 8003f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d127      	bne.n	8003fa6 <recvfrom+0xbe>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fb31 	bl	80035c0 <getSn_RX_RSR>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	3308      	adds	r3, #8
 8003f66:	019b      	lsls	r3, r3, #6
 8003f68:	3308      	adds	r3, #8
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fa40 	bl	80033f0 <WIZCHIP_READ>
 8003f70:	4603      	mov	r3, r0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <recvfrom+0x96>
 8003f78:	f06f 0303 	mvn.w	r3, #3
 8003f7c:	e21d      	b.n	80043ba <recvfrom+0x4d2>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8003f7e:	4b9b      	ldr	r3, [pc, #620]	@ (80041ec <recvfrom+0x304>)
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	fa42 f303 	asr.w	r3, r2, r3
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d004      	beq.n	8003f9c <recvfrom+0xb4>
 8003f92:	8bfb      	ldrh	r3, [r7, #30]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <recvfrom+0xb4>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e20e      	b.n	80043ba <recvfrom+0x4d2>
         if(pack_len != 0) break;
 8003f9c:	8bfb      	ldrh	r3, [r7, #30]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d100      	bne.n	8003fa4 <recvfrom+0xbc>
         pack_len = getSn_RX_RSR(sn);
 8003fa2:	e7d8      	b.n	8003f56 <recvfrom+0x6e>
         if(pack_len != 0) break;
 8003fa4:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8003fa6:	8b7b      	ldrh	r3, [r7, #26]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	f000 80d1 	beq.w	8004154 <recvfrom+0x26c>
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	f300 81b1 	bgt.w	800431a <recvfrom+0x432>
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d003      	beq.n	8003fc4 <recvfrom+0xdc>
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	f000 814e 	beq.w	800425e <recvfrom+0x376>
 8003fc2:	e1aa      	b.n	800431a <recvfrom+0x432>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	4a88      	ldr	r2, [pc, #544]	@ (80041e8 <recvfrom+0x300>)
 8003fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f040 8085 	bne.w	80040dc <recvfrom+0x1f4>
	      {
   			wiz_recv_data(sn, head, 8);
 8003fd2:	f107 0110 	add.w	r1, r7, #16
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	2208      	movs	r2, #8
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fb54 	bl	8003688 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	019b      	lsls	r3, r3, #6
 8003fe6:	3302      	adds	r3, #2
 8003fe8:	2140      	movs	r1, #64	@ 0x40
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff f9d6 	bl	800339c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003ff0:	bf00      	nop
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	019b      	lsls	r3, r3, #6
 8003ff8:	3302      	adds	r3, #2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff f9f8 	bl	80033f0 <WIZCHIP_READ>
 8004000:	4603      	mov	r3, r0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f4      	bne.n	8003ff2 <recvfrom+0x10a>
   			// read peer's IP address, port number & packet length
   	   //A20150601 : For W5300
   		#if _WIZCHIP_ == 5300
   		   if(mr1 & MR_FS)
 8004008:	8bbb      	ldrh	r3, [r7, #28]
 800400a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400e:	2b00      	cmp	r3, #0
 8004010:	d030      	beq.n	8004074 <recvfrom+0x18c>
   		   {
   		      addr[0] = head[1];
 8004012:	7c7a      	ldrb	r2, [r7, #17]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	701a      	strb	r2, [r3, #0]
   		      addr[1] = head[0];
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3301      	adds	r3, #1
 800401c:	7c3a      	ldrb	r2, [r7, #16]
 800401e:	701a      	strb	r2, [r3, #0]
   		      addr[2] = head[3];
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3302      	adds	r3, #2
 8004024:	7cfa      	ldrb	r2, [r7, #19]
 8004026:	701a      	strb	r2, [r3, #0]
   		      addr[3] = head[2];
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3303      	adds	r3, #3
 800402c:	7cba      	ldrb	r2, [r7, #18]
 800402e:	701a      	strb	r2, [r3, #0]
   		      *port = head[5];
 8004030:	7d7b      	ldrb	r3, [r7, #21]
 8004032:	461a      	mov	r2, r3
 8004034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004036:	801a      	strh	r2, [r3, #0]
   		      *port = (*port << 8) + head[4];
 8004038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	b29b      	uxth	r3, r3
 8004040:	7d3a      	ldrb	r2, [r7, #20]
 8004042:	4413      	add	r3, r2
 8004044:	b29a      	uxth	r2, r3
 8004046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004048:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[7];
 800404a:	7dfa      	ldrb	r2, [r7, #23]
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	4611      	mov	r1, r2
 8004050:	4a65      	ldr	r2, [pc, #404]	@ (80041e8 <recvfrom+0x300>)
 8004052:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	4a63      	ldr	r2, [pc, #396]	@ (80041e8 <recvfrom+0x300>)
 800405a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	b29a      	uxth	r2, r3
 8004062:	7dbb      	ldrb	r3, [r7, #22]
 8004064:	4619      	mov	r1, r3
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	440a      	add	r2, r1
 800406a:	b291      	uxth	r1, r2
 800406c:	4a5e      	ldr	r2, [pc, #376]	@ (80041e8 <recvfrom+0x300>)
 800406e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004072:	e02f      	b.n	80040d4 <recvfrom+0x1ec>
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8004074:	7c3a      	ldrb	r2, [r7, #16]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3301      	adds	r3, #1
 800407e:	7c7a      	ldrb	r2, [r7, #17]
 8004080:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3302      	adds	r3, #2
 8004086:	7cba      	ldrb	r2, [r7, #18]
 8004088:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3303      	adds	r3, #3
 800408e:	7cfa      	ldrb	r2, [r7, #19]
 8004090:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8004092:	7d3b      	ldrb	r3, [r7, #20]
 8004094:	461a      	mov	r2, r3
 8004096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004098:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 800409a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	7d7a      	ldrb	r2, [r7, #21]
 80040a4:	4413      	add	r3, r2
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040aa:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80040ac:	7dba      	ldrb	r2, [r7, #22]
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	4611      	mov	r1, r2
 80040b2:	4a4d      	ldr	r2, [pc, #308]	@ (80041e8 <recvfrom+0x300>)
 80040b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	4a4b      	ldr	r2, [pc, #300]	@ (80041e8 <recvfrom+0x300>)
 80040bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040c0:	021b      	lsls	r3, r3, #8
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	7dfb      	ldrb	r3, [r7, #23]
 80040c6:	4619      	mov	r1, r3
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	440a      	add	r2, r1
 80040cc:	b291      	uxth	r1, r2
 80040ce:	4a46      	ldr	r2, [pc, #280]	@ (80041e8 <recvfrom+0x300>)
 80040d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	4a46      	ldr	r2, [pc, #280]	@ (80041f0 <recvfrom+0x308>)
 80040d8:	2180      	movs	r1, #128	@ 0x80
 80040da:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	4a42      	ldr	r2, [pc, #264]	@ (80041e8 <recvfrom+0x300>)
 80040e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040e4:	89ba      	ldrh	r2, [r7, #12]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d202      	bcs.n	80040f0 <recvfrom+0x208>
 80040ea:	89bb      	ldrh	r3, [r7, #12]
 80040ec:	83fb      	strh	r3, [r7, #30]
 80040ee:	e004      	b.n	80040fa <recvfrom+0x212>
			else pack_len = sock_remained_size[sn];
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	4a3d      	ldr	r2, [pc, #244]	@ (80041e8 <recvfrom+0x300>)
 80040f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040f8:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80040fa:	8bfb      	ldrh	r3, [r7, #30]
 80040fc:	81bb      	strh	r3, [r7, #12]
			#if _WIZCHIP_ == 5300
			   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	4a3b      	ldr	r2, [pc, #236]	@ (80041f0 <recvfrom+0x308>)
 8004102:	5cd3      	ldrb	r3, [r2, r3]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01c      	beq.n	8004146 <recvfrom+0x25e>
			   {
			      *buf++ = sock_remained_byte[sn];
 800410c:	7bfa      	ldrb	r2, [r7, #15]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	1c59      	adds	r1, r3, #1
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	4937      	ldr	r1, [pc, #220]	@ (80041f4 <recvfrom+0x30c>)
 8004116:	5c8a      	ldrb	r2, [r1, r2]
 8004118:	701a      	strb	r2, [r3, #0]
			      pack_len -= 1;
 800411a:	8bfb      	ldrh	r3, [r7, #30]
 800411c:	3b01      	subs	r3, #1
 800411e:	83fb      	strh	r3, [r7, #30]
			      sock_remained_size[sn] -= 1;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	4a31      	ldr	r2, [pc, #196]	@ (80041e8 <recvfrom+0x300>)
 8004124:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	3a01      	subs	r2, #1
 800412c:	b291      	uxth	r1, r2
 800412e:	4a2e      	ldr	r2, [pc, #184]	@ (80041e8 <recvfrom+0x300>)
 8004130:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			      sock_pack_info[sn] &= ~PACK_FIFOBYTE;
 8004134:	7bfb      	ldrb	r3, [r7, #15]
 8004136:	4a2e      	ldr	r2, [pc, #184]	@ (80041f0 <recvfrom+0x308>)
 8004138:	5cd2      	ldrb	r2, [r2, r3]
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	f022 0202 	bic.w	r2, r2, #2
 8004140:	b2d1      	uxtb	r1, r2
 8004142:	4a2b      	ldr	r2, [pc, #172]	@ (80041f0 <recvfrom+0x308>)
 8004144:	54d1      	strb	r1, [r2, r3]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8004146:	8bfa      	ldrh	r2, [r7, #30]
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fa9b 	bl	8003688 <wiz_recv_data>
			break;
 8004152:	e0ee      	b.n	8004332 <recvfrom+0x44a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	4a24      	ldr	r2, [pc, #144]	@ (80041e8 <recvfrom+0x300>)
 8004158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d168      	bne.n	8004232 <recvfrom+0x34a>
	      {
   			wiz_recv_data(sn, head, 2);
 8004160:	f107 0110 	add.w	r1, r7, #16
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	2202      	movs	r2, #2
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fa8d 	bl	8003688 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	3308      	adds	r3, #8
 8004172:	019b      	lsls	r3, r3, #6
 8004174:	3302      	adds	r3, #2
 8004176:	2140      	movs	r1, #64	@ 0x40
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff f90f 	bl	800339c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800417e:	bf00      	nop
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	3308      	adds	r3, #8
 8004184:	019b      	lsls	r3, r3, #6
 8004186:	3302      	adds	r3, #2
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff f931 	bl	80033f0 <WIZCHIP_READ>
 800418e:	4603      	mov	r3, r0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f4      	bne.n	8004180 <recvfrom+0x298>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8004196:	7c3a      	ldrb	r2, [r7, #16]
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	4611      	mov	r1, r2
 800419c:	4a12      	ldr	r2, [pc, #72]	@ (80041e8 <recvfrom+0x300>)
 800419e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	4a10      	ldr	r2, [pc, #64]	@ (80041e8 <recvfrom+0x300>)
 80041a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	7c7a      	ldrb	r2, [r7, #17]
 80041b0:	4413      	add	r3, r2
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	3a02      	subs	r2, #2
 80041b8:	b291      	uxth	r1, r2
 80041ba:	4a0b      	ldr	r2, [pc, #44]	@ (80041e8 <recvfrom+0x300>)
 80041bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			#if _WIZCHIP_ == W5300
   			if(sock_remained_size[sn] & 0x01)
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	4a09      	ldr	r2, [pc, #36]	@ (80041e8 <recvfrom+0x300>)
 80041c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d013      	beq.n	80041f8 <recvfrom+0x310>
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
 80041d2:	4a05      	ldr	r2, [pc, #20]	@ (80041e8 <recvfrom+0x300>)
 80041d4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	3a03      	subs	r2, #3
 80041dc:	b291      	uxth	r1, r2
 80041de:	4a02      	ldr	r2, [pc, #8]	@ (80041e8 <recvfrom+0x300>)
 80041e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80041e4:	e012      	b.n	800420c <recvfrom+0x324>
 80041e6:	bf00      	nop
 80041e8:	200009d8 	.word	0x200009d8
 80041ec:	200009d4 	.word	0x200009d4
 80041f0:	200009e8 	.word	0x200009e8
 80041f4:	200009f0 	.word	0x200009f0
   			else
   				sock_remained_size[sn] -= 4;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	4a72      	ldr	r2, [pc, #456]	@ (80043c4 <recvfrom+0x4dc>)
 80041fc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	3a04      	subs	r2, #4
 8004204:	b291      	uxth	r1, r2
 8004206:	4a6f      	ldr	r2, [pc, #444]	@ (80043c4 <recvfrom+0x4dc>)
 8004208:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			#endif
   			if(sock_remained_size[sn] > 1514) 
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	4a6d      	ldr	r2, [pc, #436]	@ (80043c4 <recvfrom+0x4dc>)
 8004210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004214:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8004218:	4293      	cmp	r3, r2
 800421a:	d906      	bls.n	800422a <recvfrom+0x342>
   			{
   			   close(sn);
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fbac 	bl	800397c <close>
   			   return SOCKFATAL_PACKLEN;
 8004224:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 8004228:	e0c7      	b.n	80043ba <recvfrom+0x4d2>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	4a66      	ldr	r2, [pc, #408]	@ (80043c8 <recvfrom+0x4e0>)
 800422e:	2180      	movs	r1, #128	@ 0x80
 8004230:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	4a63      	ldr	r2, [pc, #396]	@ (80043c4 <recvfrom+0x4dc>)
 8004236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800423a:	89ba      	ldrh	r2, [r7, #12]
 800423c:	429a      	cmp	r2, r3
 800423e:	d202      	bcs.n	8004246 <recvfrom+0x35e>
 8004240:	89bb      	ldrh	r3, [r7, #12]
 8004242:	83fb      	strh	r3, [r7, #30]
 8004244:	e004      	b.n	8004250 <recvfrom+0x368>
			else pack_len = sock_remained_size[sn];
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	4a5e      	ldr	r2, [pc, #376]	@ (80043c4 <recvfrom+0x4dc>)
 800424a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800424e:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8004250:	8bfa      	ldrh	r2, [r7, #30]
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fa16 	bl	8003688 <wiz_recv_data>
		   break;
 800425c:	e069      	b.n	8004332 <recvfrom+0x44a>
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	4a58      	ldr	r2, [pc, #352]	@ (80043c4 <recvfrom+0x4dc>)
 8004262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d141      	bne.n	80042ee <recvfrom+0x406>
		   {
   			wiz_recv_data(sn, head, 6);
 800426a:	f107 0110 	add.w	r1, r7, #16
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2206      	movs	r2, #6
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fa08 	bl	8003688 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	3308      	adds	r3, #8
 800427c:	019b      	lsls	r3, r3, #6
 800427e:	3302      	adds	r3, #2
 8004280:	2140      	movs	r1, #64	@ 0x40
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff f88a 	bl	800339c <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004288:	bf00      	nop
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	3308      	adds	r3, #8
 800428e:	019b      	lsls	r3, r3, #6
 8004290:	3302      	adds	r3, #2
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff f8ac 	bl	80033f0 <WIZCHIP_READ>
 8004298:	4603      	mov	r3, r0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f4      	bne.n	800428a <recvfrom+0x3a2>
   			addr[0] = head[0];
 80042a0:	7c3a      	ldrb	r2, [r7, #16]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3301      	adds	r3, #1
 80042aa:	7c7a      	ldrb	r2, [r7, #17]
 80042ac:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3302      	adds	r3, #2
 80042b2:	7cba      	ldrb	r2, [r7, #18]
 80042b4:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3303      	adds	r3, #3
 80042ba:	7cfa      	ldrb	r2, [r7, #19]
 80042bc:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80042be:	7d3a      	ldrb	r2, [r7, #20]
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	4611      	mov	r1, r2
 80042c4:	4a3f      	ldr	r2, [pc, #252]	@ (80043c4 <recvfrom+0x4dc>)
 80042c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	4a3d      	ldr	r2, [pc, #244]	@ (80043c4 <recvfrom+0x4dc>)
 80042ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042d2:	021b      	lsls	r3, r3, #8
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	7d7b      	ldrb	r3, [r7, #21]
 80042d8:	4619      	mov	r1, r3
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	440a      	add	r2, r1
 80042de:	b291      	uxth	r1, r2
 80042e0:	4a38      	ldr	r2, [pc, #224]	@ (80043c4 <recvfrom+0x4dc>)
 80042e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	4a37      	ldr	r2, [pc, #220]	@ (80043c8 <recvfrom+0x4e0>)
 80042ea:	2180      	movs	r1, #128	@ 0x80
 80042ec:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	4a34      	ldr	r2, [pc, #208]	@ (80043c4 <recvfrom+0x4dc>)
 80042f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042f6:	89ba      	ldrh	r2, [r7, #12]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d202      	bcs.n	8004302 <recvfrom+0x41a>
 80042fc:	89bb      	ldrh	r3, [r7, #12]
 80042fe:	83fb      	strh	r3, [r7, #30]
 8004300:	e004      	b.n	800430c <recvfrom+0x424>
			else pack_len = sock_remained_size[sn];
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	4a2f      	ldr	r2, [pc, #188]	@ (80043c4 <recvfrom+0x4dc>)
 8004306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800430a:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800430c:	8bfa      	ldrh	r2, [r7, #30]
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff f9b8 	bl	8003688 <wiz_recv_data>
			break;
 8004318:	e00b      	b.n	8004332 <recvfrom+0x44a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800431a:	8bfa      	ldrh	r2, [r7, #30]
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff f9f3 	bl	800370c <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	4926      	ldr	r1, [pc, #152]	@ (80043c4 <recvfrom+0x4dc>)
 800432a:	8bfa      	ldrh	r2, [r7, #30]
 800432c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8004330:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	3308      	adds	r3, #8
 8004336:	019b      	lsls	r3, r3, #6
 8004338:	3302      	adds	r3, #2
 800433a:	2140      	movs	r1, #64	@ 0x40
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff f82d 	bl	800339c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8004342:	bf00      	nop
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	3308      	adds	r3, #8
 8004348:	019b      	lsls	r3, r3, #6
 800434a:	3302      	adds	r3, #2
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff f84f 	bl	80033f0 <WIZCHIP_READ>
 8004352:	4603      	mov	r3, r0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f4      	bne.n	8004344 <recvfrom+0x45c>
	sock_remained_size[sn] -= pack_len;
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	4a19      	ldr	r2, [pc, #100]	@ (80043c4 <recvfrom+0x4dc>)
 800435e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	8bfa      	ldrh	r2, [r7, #30]
 8004366:	1a8a      	subs	r2, r1, r2
 8004368:	b291      	uxth	r1, r2
 800436a:	4a16      	ldr	r2, [pc, #88]	@ (80043c4 <recvfrom+0x4dc>)
 800436c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	4a14      	ldr	r2, [pc, #80]	@ (80043c4 <recvfrom+0x4dc>)
 8004374:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d017      	beq.n	80043ac <recvfrom+0x4c4>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	4a12      	ldr	r2, [pc, #72]	@ (80043c8 <recvfrom+0x4e0>)
 8004380:	5cd2      	ldrb	r2, [r2, r3]
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	f042 0201 	orr.w	r2, r2, #1
 8004388:	b2d1      	uxtb	r1, r2
 800438a:	4a0f      	ldr	r2, [pc, #60]	@ (80043c8 <recvfrom+0x4e0>)
 800438c:	54d1      	strb	r1, [r2, r3]
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
 800438e:	8bfb      	ldrh	r3, [r7, #30]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00d      	beq.n	80043b4 <recvfrom+0x4cc>
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	4a0b      	ldr	r2, [pc, #44]	@ (80043c8 <recvfrom+0x4e0>)
 800439c:	5cd2      	ldrb	r2, [r2, r3]
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	f042 0202 	orr.w	r2, r2, #2
 80043a4:	b2d1      	uxtb	r1, r2
 80043a6:	4a08      	ldr	r2, [pc, #32]	@ (80043c8 <recvfrom+0x4e0>)
 80043a8:	54d1      	strb	r1, [r2, r3]
 80043aa:	e003      	b.n	80043b4 <recvfrom+0x4cc>
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	4a06      	ldr	r2, [pc, #24]	@ (80043c8 <recvfrom+0x4e0>)
 80043b0:	2100      	movs	r1, #0
 80043b2:	54d1      	strb	r1, [r2, r3]
#if _WIZCHIP_ == 5300	   
   pack_len = len;
 80043b4:	89bb      	ldrh	r3, [r7, #12]
 80043b6:	83fb      	strh	r3, [r7, #30]
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 80043b8:	8bfb      	ldrh	r3, [r7, #30]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3720      	adds	r7, #32
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	200009d8 	.word	0x200009d8
 80043c8:	200009e8 	.word	0x200009e8

080043cc <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	bf00      	nop
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80043da:	b480      	push	{r7}
 80043dc:	af00      	add	r7, sp, #0
 80043de:	bf00      	nop
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	bf00      	nop
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80043f6:	b480      	push	{r7}
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	bf00      	nop
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	460b      	mov	r3, r1
 8004428:	70fb      	strb	r3, [r7, #3]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	78fa      	ldrb	r2, [r7, #3]
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <reg_wizchip_cs_cbfunc+0x16>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8004452:	4b0a      	ldr	r3, [pc, #40]	@ (800447c <reg_wizchip_cs_cbfunc+0x40>)
 8004454:	4a0a      	ldr	r2, [pc, #40]	@ (8004480 <reg_wizchip_cs_cbfunc+0x44>)
 8004456:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004458:	4b08      	ldr	r3, [pc, #32]	@ (800447c <reg_wizchip_cs_cbfunc+0x40>)
 800445a:	4a0a      	ldr	r2, [pc, #40]	@ (8004484 <reg_wizchip_cs_cbfunc+0x48>)
 800445c:	619a      	str	r2, [r3, #24]
 800445e:	e006      	b.n	800446e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004460:	4a06      	ldr	r2, [pc, #24]	@ (800447c <reg_wizchip_cs_cbfunc+0x40>)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8004466:	4a05      	ldr	r2, [pc, #20]	@ (800447c <reg_wizchip_cs_cbfunc+0x40>)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6193      	str	r3, [r2, #24]
   }
}
 800446c:	bf00      	nop
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000024 	.word	0x20000024
 8004480:	080043e9 	.word	0x080043e9
 8004484:	080043f7 	.word	0x080043f7

08004488 <reg_wizchip_bus_cbfunc>:

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 8004492:	bf00      	nop
 8004494:	4b0f      	ldr	r3, [pc, #60]	@ (80044d4 <reg_wizchip_bus_cbfunc+0x4c>)
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f9      	beq.n	8004494 <reg_wizchip_bus_cbfunc+0xc>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <reg_wizchip_bus_cbfunc+0x24>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <reg_wizchip_bus_cbfunc+0x32>
   {
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 80044ac:	4b09      	ldr	r3, [pc, #36]	@ (80044d4 <reg_wizchip_bus_cbfunc+0x4c>)
 80044ae:	4a0a      	ldr	r2, [pc, #40]	@ (80044d8 <reg_wizchip_bus_cbfunc+0x50>)
 80044b0:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 80044b2:	4b08      	ldr	r3, [pc, #32]	@ (80044d4 <reg_wizchip_bus_cbfunc+0x4c>)
 80044b4:	4a09      	ldr	r2, [pc, #36]	@ (80044dc <reg_wizchip_bus_cbfunc+0x54>)
 80044b6:	621a      	str	r2, [r3, #32]
 80044b8:	e006      	b.n	80044c8 <reg_wizchip_bus_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
 80044ba:	4a06      	ldr	r2, [pc, #24]	@ (80044d4 <reg_wizchip_bus_cbfunc+0x4c>)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.BUS._write_data  = bus_wb;
 80044c0:	4a04      	ldr	r2, [pc, #16]	@ (80044d4 <reg_wizchip_bus_cbfunc+0x4c>)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6213      	str	r3, [r2, #32]
   }
}
 80044c6:	bf00      	nop
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	20000024 	.word	0x20000024
 80044d8:	08004405 	.word	0x08004405
 80044dc:	0800441f 	.word	0x0800441f

080044e0 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	6039      	str	r1, [r7, #0]
 80044ea:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 80044ec:	2300      	movs	r3, #0
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]
   switch(cwtype)
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d863      	bhi.n	80045c2 <ctlwizchip+0xe2>
 80044fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004500 <ctlwizchip+0x20>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004525 	.word	0x08004525
 8004504:	0800452b 	.word	0x0800452b
 8004508:	08004557 	.word	0x08004557
 800450c:	0800454b 	.word	0x0800454b
 8004510:	08004565 	.word	0x08004565
 8004514:	08004571 	.word	0x08004571
 8004518:	080045c3 	.word	0x080045c3
 800451c:	080045c3 	.word	0x080045c3
 8004520:	0800457f 	.word	0x0800457f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8004524:	f000 f896 	bl	8004654 <wizchip_sw_reset>
         break;
 8004528:	e04e      	b.n	80045c8 <ctlwizchip+0xe8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d004      	beq.n	800453a <ctlwizchip+0x5a>
         {
            ptmp[0] = (uint8_t*)arg;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	60bb      	str	r3, [r7, #8]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	3308      	adds	r3, #8
 8004538:	60fb      	str	r3, [r7, #12]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4611      	mov	r1, r2
 8004540:	4618      	mov	r0, r3
 8004542:	f000 f96c 	bl	800481e <wizchip_init>
 8004546:	4603      	mov	r3, r0
 8004548:	e03f      	b.n	80045ca <ctlwizchip+0xea>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f000 f9fb 	bl	800494a <wizchip_clrinterrupt>
         break;
 8004554:	e038      	b.n	80045c8 <ctlwizchip+0xe8>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8004556:	f000 fa1a 	bl	800498e <wizchip_getinterrupt>
 800455a:	4603      	mov	r3, r0
 800455c:	461a      	mov	r2, r3
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	801a      	strh	r2, [r3, #0]
         break;
 8004562:	e031      	b.n	80045c8 <ctlwizchip+0xe8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fa34 	bl	80049d6 <wizchip_setinterruptmask>
         break;         
 800456e:	e02b      	b.n	80045c8 <ctlwizchip+0xe8>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8004570:	f000 fa53 	bl	8004a1a <wizchip_getinterruptmask>
 8004574:	4603      	mov	r3, r0
 8004576:	461a      	mov	r2, r3
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	801a      	strh	r2, [r3, #0]
         break;
 800457c:	e024      	b.n	80045c8 <ctlwizchip+0xe8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800457e:	4b15      	ldr	r3, [pc, #84]	@ (80045d4 <ctlwizchip+0xf4>)
 8004580:	789a      	ldrb	r2, [r3, #2]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	3301      	adds	r3, #1
 800458a:	4a12      	ldr	r2, [pc, #72]	@ (80045d4 <ctlwizchip+0xf4>)
 800458c:	78d2      	ldrb	r2, [r2, #3]
 800458e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	3302      	adds	r3, #2
 8004594:	4a0f      	ldr	r2, [pc, #60]	@ (80045d4 <ctlwizchip+0xf4>)
 8004596:	7912      	ldrb	r2, [r2, #4]
 8004598:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	3303      	adds	r3, #3
 800459e:	4a0d      	ldr	r2, [pc, #52]	@ (80045d4 <ctlwizchip+0xf4>)
 80045a0:	7952      	ldrb	r2, [r2, #5]
 80045a2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4a0a      	ldr	r2, [pc, #40]	@ (80045d4 <ctlwizchip+0xf4>)
 80045aa:	7992      	ldrb	r2, [r2, #6]
 80045ac:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	3305      	adds	r3, #5
 80045b2:	4a08      	ldr	r2, [pc, #32]	@ (80045d4 <ctlwizchip+0xf4>)
 80045b4:	79d2      	ldrb	r2, [r2, #7]
 80045b6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	3306      	adds	r3, #6
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]
         break;
 80045c0:	e002      	b.n	80045c8 <ctlwizchip+0xe8>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 80045c2:	f04f 33ff 	mov.w	r3, #4294967295
 80045c6:	e000      	b.n	80045ca <ctlwizchip+0xea>
   }
   return 0;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000024 	.word	0x20000024

080045d8 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	6039      	str	r1, [r7, #0]
 80045e2:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	2b05      	cmp	r3, #5
 80045e8:	d82c      	bhi.n	8004644 <ctlnetwork+0x6c>
 80045ea:	a201      	add	r2, pc, #4	@ (adr r2, 80045f0 <ctlnetwork+0x18>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004609 	.word	0x08004609
 80045f4:	08004611 	.word	0x08004611
 80045f8:	08004619 	.word	0x08004619
 80045fc:	08004627 	.word	0x08004627
 8004600:	08004635 	.word	0x08004635
 8004604:	0800463d 	.word	0x0800463d
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8004608:	6838      	ldr	r0, [r7, #0]
 800460a:	f000 fa2f 	bl	8004a6c <wizchip_setnetinfo>
         break;
 800460e:	e01c      	b.n	800464a <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8004610:	6838      	ldr	r0, [r7, #0]
 8004612:	f000 fab7 	bl	8004b84 <wizchip_getnetinfo>
         break;
 8004616:	e018      	b.n	800464a <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fb61 	bl	8004ce4 <wizchip_setnetmode>
 8004622:	4603      	mov	r3, r0
 8004624:	e012      	b.n	800464c <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8004626:	f000 fb82 	bl	8004d2e <wizchip_getnetmode>
 800462a:	4603      	mov	r3, r0
 800462c:	461a      	mov	r2, r3
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	701a      	strb	r2, [r3, #0]
         break;
 8004632:	e00a      	b.n	800464a <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8004634:	6838      	ldr	r0, [r7, #0]
 8004636:	f000 fb83 	bl	8004d40 <wizchip_settimeout>
         break;
 800463a:	e006      	b.n	800464a <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 800463c:	6838      	ldr	r0, [r7, #0]
 800463e:	f000 fb93 	bl	8004d68 <wizchip_gettimeout>
         break;
 8004642:	e002      	b.n	800464a <ctlnetwork+0x72>
      default:
         return -1;
 8004644:	f04f 33ff 	mov.w	r3, #4294967295
 8004648:	e000      	b.n	800464c <ctlnetwork+0x74>
   }
   return 0;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800465a:	2008      	movs	r0, #8
 800465c:	f7fe fec8 	bl	80033f0 <WIZCHIP_READ>
 8004660:	4603      	mov	r3, r0
 8004662:	0a1b      	lsrs	r3, r3, #8
 8004664:	b29b      	uxth	r3, r3
 8004666:	b2db      	uxtb	r3, r3
 8004668:	713b      	strb	r3, [r7, #4]
 800466a:	2008      	movs	r0, #8
 800466c:	f7fe fec0 	bl	80033f0 <WIZCHIP_READ>
 8004670:	4603      	mov	r3, r0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	717b      	strb	r3, [r7, #5]
 8004676:	200a      	movs	r0, #10
 8004678:	f7fe feba 	bl	80033f0 <WIZCHIP_READ>
 800467c:	4603      	mov	r3, r0
 800467e:	0a1b      	lsrs	r3, r3, #8
 8004680:	b29b      	uxth	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	71bb      	strb	r3, [r7, #6]
 8004686:	200a      	movs	r0, #10
 8004688:	f7fe feb2 	bl	80033f0 <WIZCHIP_READ>
 800468c:	4603      	mov	r3, r0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	71fb      	strb	r3, [r7, #7]
 8004692:	200c      	movs	r0, #12
 8004694:	f7fe feac 	bl	80033f0 <WIZCHIP_READ>
 8004698:	4603      	mov	r3, r0
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	b29b      	uxth	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	723b      	strb	r3, [r7, #8]
 80046a2:	200c      	movs	r0, #12
 80046a4:	f7fe fea4 	bl	80033f0 <WIZCHIP_READ>
 80046a8:	4603      	mov	r3, r0
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	727b      	strb	r3, [r7, #9]
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80046ae:	2010      	movs	r0, #16
 80046b0:	f7fe fe9e 	bl	80033f0 <WIZCHIP_READ>
 80046b4:	4603      	mov	r3, r0
 80046b6:	0a1b      	lsrs	r3, r3, #8
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	753b      	strb	r3, [r7, #20]
 80046be:	2010      	movs	r0, #16
 80046c0:	f7fe fe96 	bl	80033f0 <WIZCHIP_READ>
 80046c4:	4603      	mov	r3, r0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	757b      	strb	r3, [r7, #21]
 80046ca:	2012      	movs	r0, #18
 80046cc:	f7fe fe90 	bl	80033f0 <WIZCHIP_READ>
 80046d0:	4603      	mov	r3, r0
 80046d2:	0a1b      	lsrs	r3, r3, #8
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	75bb      	strb	r3, [r7, #22]
 80046da:	2012      	movs	r0, #18
 80046dc:	f7fe fe88 	bl	80033f0 <WIZCHIP_READ>
 80046e0:	4603      	mov	r3, r0
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	75fb      	strb	r3, [r7, #23]
 80046e6:	2014      	movs	r0, #20
 80046e8:	f7fe fe82 	bl	80033f0 <WIZCHIP_READ>
 80046ec:	4603      	mov	r3, r0
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	743b      	strb	r3, [r7, #16]
 80046f6:	2014      	movs	r0, #20
 80046f8:	f7fe fe7a 	bl	80033f0 <WIZCHIP_READ>
 80046fc:	4603      	mov	r3, r0
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	747b      	strb	r3, [r7, #17]
 8004702:	2016      	movs	r0, #22
 8004704:	f7fe fe74 	bl	80033f0 <WIZCHIP_READ>
 8004708:	4603      	mov	r3, r0
 800470a:	0a1b      	lsrs	r3, r3, #8
 800470c:	b29b      	uxth	r3, r3
 800470e:	b2db      	uxtb	r3, r3
 8004710:	74bb      	strb	r3, [r7, #18]
 8004712:	2016      	movs	r0, #22
 8004714:	f7fe fe6c 	bl	80033f0 <WIZCHIP_READ>
 8004718:	4603      	mov	r3, r0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	74fb      	strb	r3, [r7, #19]
 800471e:	2018      	movs	r0, #24
 8004720:	f7fe fe66 	bl	80033f0 <WIZCHIP_READ>
 8004724:	4603      	mov	r3, r0
 8004726:	0a1b      	lsrs	r3, r3, #8
 8004728:	b29b      	uxth	r3, r3
 800472a:	b2db      	uxtb	r3, r3
 800472c:	733b      	strb	r3, [r7, #12]
 800472e:	2018      	movs	r0, #24
 8004730:	f7fe fe5e 	bl	80033f0 <WIZCHIP_READ>
 8004734:	4603      	mov	r3, r0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	737b      	strb	r3, [r7, #13]
 800473a:	201a      	movs	r0, #26
 800473c:	f7fe fe58 	bl	80033f0 <WIZCHIP_READ>
 8004740:	4603      	mov	r3, r0
 8004742:	0a1b      	lsrs	r3, r3, #8
 8004744:	b29b      	uxth	r3, r3
 8004746:	b2db      	uxtb	r3, r3
 8004748:	73bb      	strb	r3, [r7, #14]
 800474a:	201a      	movs	r0, #26
 800474c:	f7fe fe50 	bl	80033f0 <WIZCHIP_READ>
 8004750:	4603      	mov	r3, r0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	73fb      	strb	r3, [r7, #15]
   setMR(MR_RST);
 8004756:	2300      	movs	r3, #0
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
 800475c:	2301      	movs	r3, #1
 800475e:	2280      	movs	r2, #128	@ 0x80
 8004760:	701a      	strb	r2, [r3, #0]
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8004762:	793b      	ldrb	r3, [r7, #4]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	b29b      	uxth	r3, r3
 8004768:	797a      	ldrb	r2, [r7, #5]
 800476a:	4413      	add	r3, r2
 800476c:	b29b      	uxth	r3, r3
 800476e:	4619      	mov	r1, r3
 8004770:	2008      	movs	r0, #8
 8004772:	f7fe fe13 	bl	800339c <WIZCHIP_WRITE>
 8004776:	79bb      	ldrb	r3, [r7, #6]
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	b29b      	uxth	r3, r3
 800477c:	79fa      	ldrb	r2, [r7, #7]
 800477e:	4413      	add	r3, r2
 8004780:	b29b      	uxth	r3, r3
 8004782:	4619      	mov	r1, r3
 8004784:	200a      	movs	r0, #10
 8004786:	f7fe fe09 	bl	800339c <WIZCHIP_WRITE>
 800478a:	7a3b      	ldrb	r3, [r7, #8]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	b29b      	uxth	r3, r3
 8004790:	7a7a      	ldrb	r2, [r7, #9]
 8004792:	4413      	add	r3, r2
 8004794:	b29b      	uxth	r3, r3
 8004796:	4619      	mov	r1, r3
 8004798:	200c      	movs	r0, #12
 800479a:	f7fe fdff 	bl	800339c <WIZCHIP_WRITE>
   setGAR(gw);
 800479e:	7d3b      	ldrb	r3, [r7, #20]
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	7d7a      	ldrb	r2, [r7, #21]
 80047a6:	4413      	add	r3, r2
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	4619      	mov	r1, r3
 80047ac:	2010      	movs	r0, #16
 80047ae:	f7fe fdf5 	bl	800339c <WIZCHIP_WRITE>
 80047b2:	7dbb      	ldrb	r3, [r7, #22]
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	7dfa      	ldrb	r2, [r7, #23]
 80047ba:	4413      	add	r3, r2
 80047bc:	b29b      	uxth	r3, r3
 80047be:	4619      	mov	r1, r3
 80047c0:	2012      	movs	r0, #18
 80047c2:	f7fe fdeb 	bl	800339c <WIZCHIP_WRITE>
   setSUBR(sn);
 80047c6:	7c3b      	ldrb	r3, [r7, #16]
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	7c7a      	ldrb	r2, [r7, #17]
 80047ce:	4413      	add	r3, r2
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	4619      	mov	r1, r3
 80047d4:	2014      	movs	r0, #20
 80047d6:	f7fe fde1 	bl	800339c <WIZCHIP_WRITE>
 80047da:	7cbb      	ldrb	r3, [r7, #18]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	b29b      	uxth	r3, r3
 80047e0:	7cfa      	ldrb	r2, [r7, #19]
 80047e2:	4413      	add	r3, r2
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	4619      	mov	r1, r3
 80047e8:	2016      	movs	r0, #22
 80047ea:	f7fe fdd7 	bl	800339c <WIZCHIP_WRITE>
   setSIPR(sip);
 80047ee:	7b3b      	ldrb	r3, [r7, #12]
 80047f0:	021b      	lsls	r3, r3, #8
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	7b7a      	ldrb	r2, [r7, #13]
 80047f6:	4413      	add	r3, r2
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	4619      	mov	r1, r3
 80047fc:	2018      	movs	r0, #24
 80047fe:	f7fe fdcd 	bl	800339c <WIZCHIP_WRITE>
 8004802:	7bbb      	ldrb	r3, [r7, #14]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	b29b      	uxth	r3, r3
 8004808:	7bfa      	ldrb	r2, [r7, #15]
 800480a:	4413      	add	r3, r2
 800480c:	b29b      	uxth	r3, r3
 800480e:	4619      	mov	r1, r3
 8004810:	201a      	movs	r0, #26
 8004812:	f7fe fdc3 	bl	800339c <WIZCHIP_WRITE>
}
 8004816:	bf00      	nop
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b084      	sub	sp, #16
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800482c:	f7ff ff12 	bl	8004654 <wizchip_sw_reset>
   if(txsize)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d040      	beq.n	80048b8 <wizchip_init+0x9a>
   {
      tmp = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	73bb      	strb	r3, [r7, #14]
//M20150601 : For integrating with W5300
#if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
 800483e:	e018      	b.n	8004872 <wizchip_init+0x54>
		{
			if(txsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8004840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	4413      	add	r3, r2
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b40      	cmp	r3, #64	@ 0x40
 800484c:	d902      	bls.n	8004854 <wizchip_init+0x36>
 800484e:	f04f 33ff 	mov.w	r3, #4294967295
 8004852:	e076      	b.n	8004942 <wizchip_init+0x124>
			tmp += txsize[i];
 8004854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	4413      	add	r3, r2
 800485c:	781a      	ldrb	r2, [r3, #0]
 800485e:	7bbb      	ldrb	r3, [r7, #14]
 8004860:	4413      	add	r3, r2
 8004862:	b2db      	uxtb	r3, r3
 8004864:	73bb      	strb	r3, [r7, #14]
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	3301      	adds	r3, #1
 800486e:	b2db      	uxtb	r3, r3
 8004870:	73fb      	strb	r3, [r7, #15]
 8004872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004876:	2b07      	cmp	r3, #7
 8004878:	dde2      	ble.n	8004840 <wizchip_init+0x22>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 800487a:	7bbb      	ldrb	r3, [r7, #14]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <wizchip_init+0x6e>
 8004886:	f04f 33ff 	mov.w	r3, #4294967295
 800488a:	e05a      	b.n	8004942 <wizchip_init+0x124>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800488c:	2300      	movs	r3, #0
 800488e:	73fb      	strb	r3, [r7, #15]
 8004890:	e00e      	b.n	80048b0 <wizchip_init+0x92>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8004892:	7bf8      	ldrb	r0, [r7, #15]
 8004894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	4413      	add	r3, r2
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	4619      	mov	r1, r3
 80048a0:	f7fe fdd0 	bl	8003444 <setTMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80048a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	3301      	adds	r3, #1
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	73fb      	strb	r3, [r7, #15]
 80048b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048b4:	2b07      	cmp	r3, #7
 80048b6:	ddec      	ble.n	8004892 <wizchip_init+0x74>
#endif
		}	
   }

   if(rxsize)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d040      	beq.n	8004940 <wizchip_init+0x122>
   {
      tmp = 0;
 80048be:	2300      	movs	r3, #0
 80048c0:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80048c2:	2300      	movs	r3, #0
 80048c4:	73fb      	strb	r3, [r7, #15]
 80048c6:	e018      	b.n	80048fa <wizchip_init+0xdc>
		{
			if(rxsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80048c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	4413      	add	r3, r2
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b40      	cmp	r3, #64	@ 0x40
 80048d4:	d902      	bls.n	80048dc <wizchip_init+0xbe>
 80048d6:	f04f 33ff 	mov.w	r3, #4294967295
 80048da:	e032      	b.n	8004942 <wizchip_init+0x124>
			tmp += rxsize[i];
 80048dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	4413      	add	r3, r2
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	7bbb      	ldrb	r3, [r7, #14]
 80048e8:	4413      	add	r3, r2
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80048ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	3301      	adds	r3, #1
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	73fb      	strb	r3, [r7, #15]
 80048fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048fe:	2b07      	cmp	r3, #7
 8004900:	dde2      	ble.n	80048c8 <wizchip_init+0xaa>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8004902:	7bbb      	ldrb	r3, [r7, #14]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <wizchip_init+0xf6>
 800490e:	f04f 33ff 	mov.w	r3, #4294967295
 8004912:	e016      	b.n	8004942 <wizchip_init+0x124>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004914:	2300      	movs	r3, #0
 8004916:	73fb      	strb	r3, [r7, #15]
 8004918:	e00e      	b.n	8004938 <wizchip_init+0x11a>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800491a:	7bf8      	ldrb	r0, [r7, #15]
 800491c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	4413      	add	r3, r2
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	4619      	mov	r1, r3
 8004928:	f7fe fde8 	bl	80034fc <setRMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800492c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	3301      	adds	r3, #1
 8004934:	b2db      	uxtb	r3, r3
 8004936:	73fb      	strb	r3, [r7, #15]
 8004938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800493c:	2b07      	cmp	r3, #7
 800493e:	ddec      	ble.n	800491a <wizchip_init+0xfc>
#endif
		}
   }
   return 0;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	4603      	mov	r3, r0
 8004952:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8004954:	88fb      	ldrh	r3, [r7, #6]
 8004956:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8004958:	88fb      	ldrh	r3, [r7, #6]
 800495a:	0a1b      	lsrs	r3, r3, #8
 800495c:	b29b      	uxth	r3, r3
 800495e:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	f043 0310 	orr.w	r3, r3, #16
 8004966:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	b21a      	sxth	r2, r3
 800496e:	7bbb      	ldrb	r3, [r7, #14]
 8004970:	b21b      	sxth	r3, r3
 8004972:	4313      	orrs	r3, r2
 8004974:	b21b      	sxth	r3, r3
 8004976:	b29b      	uxth	r3, r3
 8004978:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800497c:	b29b      	uxth	r3, r3
 800497e:	4619      	mov	r1, r3
 8004980:	2002      	movs	r0, #2
 8004982:	f7fe fd0b 	bl	800339c <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 8004986:	bf00      	nop
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b082      	sub	sp, #8
 8004992:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR();
 80049a0:	2002      	movs	r0, #2
 80049a2:	f7fe fd25 	bl	80033f0 <WIZCHIP_READ>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049ac:	80bb      	strh	r3, [r7, #4]
   ir = (uint8_t)(ret >> 8);
 80049ae:	88bb      	ldrh	r3, [r7, #4]
 80049b0:	0a1b      	lsrs	r3, r3, #8
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	71fb      	strb	r3, [r7, #7]
   sir = (uint8_t)ret;
 80049b6:	88bb      	ldrh	r3, [r7, #4]
 80049b8:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80049ba:	79bb      	ldrb	r3, [r7, #6]
 80049bc:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80049be:	88bb      	ldrh	r3, [r7, #4]
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	79fb      	ldrb	r3, [r7, #7]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	4413      	add	r3, r2
 80049ca:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80049cc:	88bb      	ldrh	r3, [r7, #4]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	4603      	mov	r3, r0
 80049de:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80049e4:	88fb      	ldrh	r3, [r7, #6]
 80049e6:	0a1b      	lsrs	r3, r3, #8
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	f023 0310 	bic.w	r3, r3, #16
 80049f2:	73fb      	strb	r3, [r7, #15]
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	021b      	lsls	r3, r3, #8
 80049f8:	b21a      	sxth	r2, r3
 80049fa:	7bbb      	ldrb	r3, [r7, #14]
 80049fc:	b21b      	sxth	r3, r3
 80049fe:	4313      	orrs	r3, r2
 8004a00:	b21b      	sxth	r3, r3
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	2004      	movs	r0, #4
 8004a0e:	f7fe fcc5 	bl	800339c <WIZCHIP_WRITE>
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 8004a12:	bf00      	nop
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 8004a2c:	2004      	movs	r0, #4
 8004a2e:	f7fe fcdf 	bl	80033f0 <WIZCHIP_READ>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004a38:	80bb      	strh	r3, [r7, #4]
   imr = (uint8_t)(ret >> 8);
 8004a3a:	88bb      	ldrh	r3, [r7, #4]
 8004a3c:	0a1b      	lsrs	r3, r3, #8
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	71fb      	strb	r3, [r7, #7]
   simr = (uint8_t)ret;
 8004a42:	88bb      	ldrh	r3, [r7, #4]
 8004a44:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	f023 0310 	bic.w	r3, r3, #16
 8004a4c:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8004a4e:	79bb      	ldrb	r3, [r7, #6]
 8004a50:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8004a52:	88bb      	ldrh	r3, [r7, #4]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004a60:	88bb      	ldrh	r3, [r7, #4]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	021b      	lsls	r3, r3, #8
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	7852      	ldrb	r2, [r2, #1]
 8004a80:	4413      	add	r3, r2
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	4619      	mov	r1, r3
 8004a86:	2008      	movs	r0, #8
 8004a88:	f7fe fc88 	bl	800339c <WIZCHIP_WRITE>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	789b      	ldrb	r3, [r3, #2]
 8004a90:	021b      	lsls	r3, r3, #8
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	78d2      	ldrb	r2, [r2, #3]
 8004a98:	4413      	add	r3, r2
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	200a      	movs	r0, #10
 8004aa0:	f7fe fc7c 	bl	800339c <WIZCHIP_WRITE>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	791b      	ldrb	r3, [r3, #4]
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	7952      	ldrb	r2, [r2, #5]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	200c      	movs	r0, #12
 8004ab8:	f7fe fc70 	bl	800339c <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	7b9b      	ldrb	r3, [r3, #14]
 8004ac0:	021b      	lsls	r3, r3, #8
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	7bd2      	ldrb	r2, [r2, #15]
 8004ac8:	4413      	add	r3, r2
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	4619      	mov	r1, r3
 8004ace:	2010      	movs	r0, #16
 8004ad0:	f7fe fc64 	bl	800339c <WIZCHIP_WRITE>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	7c1b      	ldrb	r3, [r3, #16]
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	7c52      	ldrb	r2, [r2, #17]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	2012      	movs	r0, #18
 8004ae8:	f7fe fc58 	bl	800339c <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	7a9b      	ldrb	r3, [r3, #10]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	7ad2      	ldrb	r2, [r2, #11]
 8004af8:	4413      	add	r3, r2
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	4619      	mov	r1, r3
 8004afe:	2014      	movs	r0, #20
 8004b00:	f7fe fc4c 	bl	800339c <WIZCHIP_WRITE>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	7b1b      	ldrb	r3, [r3, #12]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	7b52      	ldrb	r2, [r2, #13]
 8004b10:	4413      	add	r3, r2
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	4619      	mov	r1, r3
 8004b16:	2016      	movs	r0, #22
 8004b18:	f7fe fc40 	bl	800339c <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	799b      	ldrb	r3, [r3, #6]
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	79d2      	ldrb	r2, [r2, #7]
 8004b28:	4413      	add	r3, r2
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	2018      	movs	r0, #24
 8004b30:	f7fe fc34 	bl	800339c <WIZCHIP_WRITE>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	7a1b      	ldrb	r3, [r3, #8]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	7a52      	ldrb	r2, [r2, #9]
 8004b40:	4413      	add	r3, r2
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	4619      	mov	r1, r3
 8004b46:	201a      	movs	r0, #26
 8004b48:	f7fe fc28 	bl	800339c <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	7c9a      	ldrb	r2, [r3, #18]
 8004b50:	4b0a      	ldr	r3, [pc, #40]	@ (8004b7c <wizchip_setnetinfo+0x110>)
 8004b52:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	7cda      	ldrb	r2, [r3, #19]
 8004b58:	4b08      	ldr	r3, [pc, #32]	@ (8004b7c <wizchip_setnetinfo+0x110>)
 8004b5a:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	7d1a      	ldrb	r2, [r3, #20]
 8004b60:	4b06      	ldr	r3, [pc, #24]	@ (8004b7c <wizchip_setnetinfo+0x110>)
 8004b62:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	7d5a      	ldrb	r2, [r3, #21]
 8004b68:	4b04      	ldr	r3, [pc, #16]	@ (8004b7c <wizchip_setnetinfo+0x110>)
 8004b6a:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	7d9a      	ldrb	r2, [r3, #22]
 8004b70:	4b03      	ldr	r3, [pc, #12]	@ (8004b80 <wizchip_setnetinfo+0x114>)
 8004b72:	701a      	strb	r2, [r3, #0]
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	200009f8 	.word	0x200009f8
 8004b80:	200009fc 	.word	0x200009fc

08004b84 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004b8c:	2008      	movs	r0, #8
 8004b8e:	f7fe fc2f 	bl	80033f0 <WIZCHIP_READ>
 8004b92:	4603      	mov	r3, r0
 8004b94:	0a1b      	lsrs	r3, r3, #8
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	2008      	movs	r0, #8
 8004ba0:	f7fe fc26 	bl	80033f0 <WIZCHIP_READ>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	705a      	strb	r2, [r3, #1]
 8004bac:	200a      	movs	r0, #10
 8004bae:	f7fe fc1f 	bl	80033f0 <WIZCHIP_READ>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	0a1b      	lsrs	r3, r3, #8
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	709a      	strb	r2, [r3, #2]
 8004bbe:	200a      	movs	r0, #10
 8004bc0:	f7fe fc16 	bl	80033f0 <WIZCHIP_READ>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	70da      	strb	r2, [r3, #3]
 8004bcc:	200c      	movs	r0, #12
 8004bce:	f7fe fc0f 	bl	80033f0 <WIZCHIP_READ>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	0a1b      	lsrs	r3, r3, #8
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	711a      	strb	r2, [r3, #4]
 8004bde:	200c      	movs	r0, #12
 8004be0:	f7fe fc06 	bl	80033f0 <WIZCHIP_READ>
 8004be4:	4603      	mov	r3, r0
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	715a      	strb	r2, [r3, #5]
   getGAR(pnetinfo->gw);
 8004bec:	2010      	movs	r0, #16
 8004bee:	f7fe fbff 	bl	80033f0 <WIZCHIP_READ>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	0a1b      	lsrs	r3, r3, #8
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	739a      	strb	r2, [r3, #14]
 8004bfe:	2010      	movs	r0, #16
 8004c00:	f7fe fbf6 	bl	80033f0 <WIZCHIP_READ>
 8004c04:	4603      	mov	r3, r0
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	73da      	strb	r2, [r3, #15]
 8004c0c:	2012      	movs	r0, #18
 8004c0e:	f7fe fbef 	bl	80033f0 <WIZCHIP_READ>
 8004c12:	4603      	mov	r3, r0
 8004c14:	0a1b      	lsrs	r3, r3, #8
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	741a      	strb	r2, [r3, #16]
 8004c1e:	2012      	movs	r0, #18
 8004c20:	f7fe fbe6 	bl	80033f0 <WIZCHIP_READ>
 8004c24:	4603      	mov	r3, r0
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	745a      	strb	r2, [r3, #17]
   getSUBR(pnetinfo->sn);
 8004c2c:	2014      	movs	r0, #20
 8004c2e:	f7fe fbdf 	bl	80033f0 <WIZCHIP_READ>
 8004c32:	4603      	mov	r3, r0
 8004c34:	0a1b      	lsrs	r3, r3, #8
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	729a      	strb	r2, [r3, #10]
 8004c3e:	2014      	movs	r0, #20
 8004c40:	f7fe fbd6 	bl	80033f0 <WIZCHIP_READ>
 8004c44:	4603      	mov	r3, r0
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	72da      	strb	r2, [r3, #11]
 8004c4c:	2016      	movs	r0, #22
 8004c4e:	f7fe fbcf 	bl	80033f0 <WIZCHIP_READ>
 8004c52:	4603      	mov	r3, r0
 8004c54:	0a1b      	lsrs	r3, r3, #8
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	731a      	strb	r2, [r3, #12]
 8004c5e:	2016      	movs	r0, #22
 8004c60:	f7fe fbc6 	bl	80033f0 <WIZCHIP_READ>
 8004c64:	4603      	mov	r3, r0
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	735a      	strb	r2, [r3, #13]
   getSIPR(pnetinfo->ip);
 8004c6c:	2018      	movs	r0, #24
 8004c6e:	f7fe fbbf 	bl	80033f0 <WIZCHIP_READ>
 8004c72:	4603      	mov	r3, r0
 8004c74:	0a1b      	lsrs	r3, r3, #8
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	719a      	strb	r2, [r3, #6]
 8004c7e:	2018      	movs	r0, #24
 8004c80:	f7fe fbb6 	bl	80033f0 <WIZCHIP_READ>
 8004c84:	4603      	mov	r3, r0
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	71da      	strb	r2, [r3, #7]
 8004c8c:	201a      	movs	r0, #26
 8004c8e:	f7fe fbaf 	bl	80033f0 <WIZCHIP_READ>
 8004c92:	4603      	mov	r3, r0
 8004c94:	0a1b      	lsrs	r3, r3, #8
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	721a      	strb	r2, [r3, #8]
 8004c9e:	201a      	movs	r0, #26
 8004ca0:	f7fe fba6 	bl	80033f0 <WIZCHIP_READ>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	725a      	strb	r2, [r3, #9]
   pnetinfo->dns[0]= _DNS_[0];
 8004cac:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <wizchip_getnetinfo+0x158>)
 8004cae:	781a      	ldrb	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004cb4:	4b09      	ldr	r3, [pc, #36]	@ (8004cdc <wizchip_getnetinfo+0x158>)
 8004cb6:	785a      	ldrb	r2, [r3, #1]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004cbc:	4b07      	ldr	r3, [pc, #28]	@ (8004cdc <wizchip_getnetinfo+0x158>)
 8004cbe:	789a      	ldrb	r2, [r3, #2]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004cc4:	4b05      	ldr	r3, [pc, #20]	@ (8004cdc <wizchip_getnetinfo+0x158>)
 8004cc6:	78da      	ldrb	r2, [r3, #3]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004ccc:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <wizchip_getnetinfo+0x15c>)
 8004cce:	781a      	ldrb	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	759a      	strb	r2, [r3, #22]
}
 8004cd4:	bf00      	nop
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	200009f8 	.word	0x200009f8
 8004ce0:	200009fc 	.word	0x200009fc

08004ce4 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	4603      	mov	r3, r0
 8004cec:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <wizchip_setnetmode+0x1e>
 8004cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004d00:	e00f      	b.n	8004d22 <wizchip_setnetmode+0x3e>
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
#endif      
   tmp = getMR();
 8004d02:	2301      	movs	r3, #1
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8004d08:	7bfa      	ldrb	r2, [r7, #15]
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	121a      	asrs	r2, r3, #8
 8004d14:	2300      	movs	r3, #0
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	7013      	strb	r3, [r2, #0]
   return 0;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8004d32:	2301      	movs	r3, #1
 8004d34:	781b      	ldrb	r3, [r3, #0]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	201e      	movs	r0, #30
 8004d50:	f7fe fb24 	bl	800339c <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	885b      	ldrh	r3, [r3, #2]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	201c      	movs	r0, #28
 8004d5c:	f7fe fb1e 	bl	800339c <WIZCHIP_WRITE>
}
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8004d70:	201e      	movs	r0, #30
 8004d72:	f7fe fb3d 	bl	80033f0 <WIZCHIP_READ>
 8004d76:	4603      	mov	r3, r0
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8004d7e:	201c      	movs	r0, #28
 8004d80:	f7fe fb36 	bl	80033f0 <WIZCHIP_READ>
 8004d84:	4603      	mov	r3, r0
 8004d86:	461a      	mov	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	805a      	strh	r2, [r3, #2]
}
 8004d8c:	bf00      	nop
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8004d98:	4b24      	ldr	r3, [pc, #144]	@ (8004e2c <default_ip_assign+0x98>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	4a22      	ldr	r2, [pc, #136]	@ (8004e2c <default_ip_assign+0x98>)
 8004da2:	7852      	ldrb	r2, [r2, #1]
 8004da4:	4413      	add	r3, r2
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	4619      	mov	r1, r3
 8004daa:	2018      	movs	r0, #24
 8004dac:	f7fe faf6 	bl	800339c <WIZCHIP_WRITE>
 8004db0:	4b1e      	ldr	r3, [pc, #120]	@ (8004e2c <default_ip_assign+0x98>)
 8004db2:	789b      	ldrb	r3, [r3, #2]
 8004db4:	021b      	lsls	r3, r3, #8
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	4a1c      	ldr	r2, [pc, #112]	@ (8004e2c <default_ip_assign+0x98>)
 8004dba:	78d2      	ldrb	r2, [r2, #3]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	201a      	movs	r0, #26
 8004dc4:	f7fe faea 	bl	800339c <WIZCHIP_WRITE>
   setSUBR(DHCP_allocated_sn);
 8004dc8:	4b19      	ldr	r3, [pc, #100]	@ (8004e30 <default_ip_assign+0x9c>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	4a17      	ldr	r2, [pc, #92]	@ (8004e30 <default_ip_assign+0x9c>)
 8004dd2:	7852      	ldrb	r2, [r2, #1]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	4619      	mov	r1, r3
 8004dda:	2014      	movs	r0, #20
 8004ddc:	f7fe fade 	bl	800339c <WIZCHIP_WRITE>
 8004de0:	4b13      	ldr	r3, [pc, #76]	@ (8004e30 <default_ip_assign+0x9c>)
 8004de2:	789b      	ldrb	r3, [r3, #2]
 8004de4:	021b      	lsls	r3, r3, #8
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	4a11      	ldr	r2, [pc, #68]	@ (8004e30 <default_ip_assign+0x9c>)
 8004dea:	78d2      	ldrb	r2, [r2, #3]
 8004dec:	4413      	add	r3, r2
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	4619      	mov	r1, r3
 8004df2:	2016      	movs	r0, #22
 8004df4:	f7fe fad2 	bl	800339c <WIZCHIP_WRITE>
   setGAR (DHCP_allocated_gw);
 8004df8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e34 <default_ip_assign+0xa0>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	021b      	lsls	r3, r3, #8
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	4a0c      	ldr	r2, [pc, #48]	@ (8004e34 <default_ip_assign+0xa0>)
 8004e02:	7852      	ldrb	r2, [r2, #1]
 8004e04:	4413      	add	r3, r2
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	4619      	mov	r1, r3
 8004e0a:	2010      	movs	r0, #16
 8004e0c:	f7fe fac6 	bl	800339c <WIZCHIP_WRITE>
 8004e10:	4b08      	ldr	r3, [pc, #32]	@ (8004e34 <default_ip_assign+0xa0>)
 8004e12:	789b      	ldrb	r3, [r3, #2]
 8004e14:	021b      	lsls	r3, r3, #8
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	4a06      	ldr	r2, [pc, #24]	@ (8004e34 <default_ip_assign+0xa0>)
 8004e1a:	78d2      	ldrb	r2, [r2, #3]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	4619      	mov	r1, r3
 8004e22:	2012      	movs	r0, #18
 8004e24:	f7fe faba 	bl	800339c <WIZCHIP_WRITE>
}
 8004e28:	bf00      	nop
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20000a0c 	.word	0x20000a0c
 8004e30:	20000a14 	.word	0x20000a14
 8004e34:	20000a10 	.word	0x20000a10

08004e38 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	2200      	movs	r2, #0
 8004e40:	701a      	strb	r2, [r3, #0]
 8004e42:	2301      	movs	r3, #1
 8004e44:	2280      	movs	r2, #128	@ 0x80
 8004e46:	701a      	strb	r2, [r3, #0]
   getMR(); // for delay
   default_ip_assign();
 8004e48:	f7ff ffa4 	bl	8004d94 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8004e4c:	4b12      	ldr	r3, [pc, #72]	@ (8004e98 <default_ip_update+0x60>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	4a10      	ldr	r2, [pc, #64]	@ (8004e98 <default_ip_update+0x60>)
 8004e56:	7852      	ldrb	r2, [r2, #1]
 8004e58:	4413      	add	r3, r2
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	2008      	movs	r0, #8
 8004e60:	f7fe fa9c 	bl	800339c <WIZCHIP_WRITE>
 8004e64:	4b0c      	ldr	r3, [pc, #48]	@ (8004e98 <default_ip_update+0x60>)
 8004e66:	789b      	ldrb	r3, [r3, #2]
 8004e68:	021b      	lsls	r3, r3, #8
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8004e98 <default_ip_update+0x60>)
 8004e6e:	78d2      	ldrb	r2, [r2, #3]
 8004e70:	4413      	add	r3, r2
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	4619      	mov	r1, r3
 8004e76:	200a      	movs	r0, #10
 8004e78:	f7fe fa90 	bl	800339c <WIZCHIP_WRITE>
 8004e7c:	4b06      	ldr	r3, [pc, #24]	@ (8004e98 <default_ip_update+0x60>)
 8004e7e:	791b      	ldrb	r3, [r3, #4]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	4a04      	ldr	r2, [pc, #16]	@ (8004e98 <default_ip_update+0x60>)
 8004e86:	7952      	ldrb	r2, [r2, #5]
 8004e88:	4413      	add	r3, r2
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	200c      	movs	r0, #12
 8004e90:	f7fe fa84 	bl	800339c <WIZCHIP_WRITE>
}
 8004e94:	bf00      	nop
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	20000a2c 	.word	0x20000a2c

08004e9c <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	701a      	strb	r2, [r3, #0]
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	2280      	movs	r2, #128	@ 0x80
 8004eaa:	701a      	strb	r2, [r3, #0]
	getMR(); // for delay
	setSHAR(DHCP_CHADDR);
 8004eac:	4b12      	ldr	r3, [pc, #72]	@ (8004ef8 <default_ip_conflict+0x5c>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	4a10      	ldr	r2, [pc, #64]	@ (8004ef8 <default_ip_conflict+0x5c>)
 8004eb6:	7852      	ldrb	r2, [r2, #1]
 8004eb8:	4413      	add	r3, r2
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	2008      	movs	r0, #8
 8004ec0:	f7fe fa6c 	bl	800339c <WIZCHIP_WRITE>
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef8 <default_ip_conflict+0x5c>)
 8004ec6:	789b      	ldrb	r3, [r3, #2]
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8004ef8 <default_ip_conflict+0x5c>)
 8004ece:	78d2      	ldrb	r2, [r2, #3]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	200a      	movs	r0, #10
 8004ed8:	f7fe fa60 	bl	800339c <WIZCHIP_WRITE>
 8004edc:	4b06      	ldr	r3, [pc, #24]	@ (8004ef8 <default_ip_conflict+0x5c>)
 8004ede:	791b      	ldrb	r3, [r3, #4]
 8004ee0:	021b      	lsls	r3, r3, #8
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	4a04      	ldr	r2, [pc, #16]	@ (8004ef8 <default_ip_conflict+0x5c>)
 8004ee6:	7952      	ldrb	r2, [r2, #5]
 8004ee8:	4413      	add	r3, r2
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	4619      	mov	r1, r3
 8004eee:	200c      	movs	r0, #12
 8004ef0:	f7fe fa54 	bl	800339c <WIZCHIP_WRITE>
}
 8004ef4:	bf00      	nop
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20000a2c 	.word	0x20000a2c

08004efc <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8004f08:	4b10      	ldr	r3, [pc, #64]	@ (8004f4c <reg_dhcp_cbfunc+0x50>)
 8004f0a:	4a11      	ldr	r2, [pc, #68]	@ (8004f50 <reg_dhcp_cbfunc+0x54>)
 8004f0c:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8004f0e:	4b11      	ldr	r3, [pc, #68]	@ (8004f54 <reg_dhcp_cbfunc+0x58>)
 8004f10:	4a11      	ldr	r2, [pc, #68]	@ (8004f58 <reg_dhcp_cbfunc+0x5c>)
 8004f12:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8004f14:	4b11      	ldr	r3, [pc, #68]	@ (8004f5c <reg_dhcp_cbfunc+0x60>)
 8004f16:	4a12      	ldr	r2, [pc, #72]	@ (8004f60 <reg_dhcp_cbfunc+0x64>)
 8004f18:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <reg_dhcp_cbfunc+0x2a>
 8004f20:	4a0a      	ldr	r2, [pc, #40]	@ (8004f4c <reg_dhcp_cbfunc+0x50>)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <reg_dhcp_cbfunc+0x36>
 8004f2c:	4a09      	ldr	r2, [pc, #36]	@ (8004f54 <reg_dhcp_cbfunc+0x58>)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <reg_dhcp_cbfunc+0x42>
 8004f38:	4a08      	ldr	r2, [pc, #32]	@ (8004f5c <reg_dhcp_cbfunc+0x60>)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6013      	str	r3, [r2, #0]
}
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	20000060 	.word	0x20000060
 8004f50:	08004d95 	.word	0x08004d95
 8004f54:	20000064 	.word	0x20000064
 8004f58:	08004e39 	.word	0x08004e39
 8004f5c:	20000068 	.word	0x20000068
 8004f60:	08004e9d 	.word	0x08004e9d

08004f64 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8004f6a:	2008      	movs	r0, #8
 8004f6c:	f7fe fa40 	bl	80033f0 <WIZCHIP_READ>
 8004f70:	4603      	mov	r3, r0
 8004f72:	0a1b      	lsrs	r3, r3, #8
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	703b      	strb	r3, [r7, #0]
 8004f7a:	2008      	movs	r0, #8
 8004f7c:	f7fe fa38 	bl	80033f0 <WIZCHIP_READ>
 8004f80:	4603      	mov	r3, r0
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	707b      	strb	r3, [r7, #1]
 8004f86:	200a      	movs	r0, #10
 8004f88:	f7fe fa32 	bl	80033f0 <WIZCHIP_READ>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	0a1b      	lsrs	r3, r3, #8
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	70bb      	strb	r3, [r7, #2]
 8004f96:	200a      	movs	r0, #10
 8004f98:	f7fe fa2a 	bl	80033f0 <WIZCHIP_READ>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	70fb      	strb	r3, [r7, #3]
 8004fa2:	200c      	movs	r0, #12
 8004fa4:	f7fe fa24 	bl	80033f0 <WIZCHIP_READ>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	0a1b      	lsrs	r3, r3, #8
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	713b      	strb	r3, [r7, #4]
 8004fb2:	200c      	movs	r0, #12
 8004fb4:	f7fe fa1c 	bl	80033f0 <WIZCHIP_READ>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	717b      	strb	r3, [r7, #5]
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8004fbe:	4b72      	ldr	r3, [pc, #456]	@ (8005188 <makeDHCPMSG+0x224>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8004fc6:	4b70      	ldr	r3, [pc, #448]	@ (8005188 <makeDHCPMSG+0x224>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8004fce:	4b6e      	ldr	r3, [pc, #440]	@ (8005188 <makeDHCPMSG+0x224>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2206      	movs	r2, #6
 8004fd4:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8004fd6:	4b6c      	ldr	r3, [pc, #432]	@ (8005188 <makeDHCPMSG+0x224>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8004fde:	4b6a      	ldr	r3, [pc, #424]	@ (8005188 <makeDHCPMSG+0x224>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8004fe6:	4b69      	ldr	r3, [pc, #420]	@ (800518c <makeDHCPMSG+0x228>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	0e1b      	lsrs	r3, r3, #24
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8004ff2:	4b66      	ldr	r3, [pc, #408]	@ (800518c <makeDHCPMSG+0x228>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	0c1a      	lsrs	r2, r3, #16
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8005000:	4b62      	ldr	r3, [pc, #392]	@ (800518c <makeDHCPMSG+0x228>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	0a1a      	lsrs	r2, r3, #8
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	3302      	adds	r3, #2
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 800500e:	4b5f      	ldr	r3, [pc, #380]	@ (800518c <makeDHCPMSG+0x228>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	3303      	adds	r3, #3
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 800501a:	4b5b      	ldr	r3, [pc, #364]	@ (8005188 <makeDHCPMSG+0x224>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2200      	movs	r2, #0
 8005020:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8005022:	4b59      	ldr	r3, [pc, #356]	@ (8005188 <makeDHCPMSG+0x224>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	330a      	adds	r3, #10
 8005028:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2280      	movs	r2, #128	@ 0x80
 800502e:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	3301      	adds	r3, #1
 8005034:	2200      	movs	r2, #0
 8005036:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8005038:	4b53      	ldr	r3, [pc, #332]	@ (8005188 <makeDHCPMSG+0x224>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2200      	movs	r2, #0
 800503e:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8005040:	4b51      	ldr	r3, [pc, #324]	@ (8005188 <makeDHCPMSG+0x224>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2200      	movs	r2, #0
 8005046:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8005048:	4b4f      	ldr	r3, [pc, #316]	@ (8005188 <makeDHCPMSG+0x224>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2200      	movs	r2, #0
 800504e:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8005050:	4b4d      	ldr	r3, [pc, #308]	@ (8005188 <makeDHCPMSG+0x224>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2200      	movs	r2, #0
 8005056:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8005058:	4b4b      	ldr	r3, [pc, #300]	@ (8005188 <makeDHCPMSG+0x224>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2200      	movs	r2, #0
 800505e:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8005060:	4b49      	ldr	r3, [pc, #292]	@ (8005188 <makeDHCPMSG+0x224>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2200      	movs	r2, #0
 8005066:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8005068:	4b47      	ldr	r3, [pc, #284]	@ (8005188 <makeDHCPMSG+0x224>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2200      	movs	r2, #0
 800506e:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8005070:	4b45      	ldr	r3, [pc, #276]	@ (8005188 <makeDHCPMSG+0x224>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2200      	movs	r2, #0
 8005076:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8005078:	4b43      	ldr	r3, [pc, #268]	@ (8005188 <makeDHCPMSG+0x224>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2200      	movs	r2, #0
 800507e:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8005080:	4b41      	ldr	r3, [pc, #260]	@ (8005188 <makeDHCPMSG+0x224>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2200      	movs	r2, #0
 8005086:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8005088:	4b3f      	ldr	r3, [pc, #252]	@ (8005188 <makeDHCPMSG+0x224>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2200      	movs	r2, #0
 800508e:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8005090:	4b3d      	ldr	r3, [pc, #244]	@ (8005188 <makeDHCPMSG+0x224>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2200      	movs	r2, #0
 8005096:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8005098:	4b3b      	ldr	r3, [pc, #236]	@ (8005188 <makeDHCPMSG+0x224>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2200      	movs	r2, #0
 800509e:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 80050a0:	4b39      	ldr	r3, [pc, #228]	@ (8005188 <makeDHCPMSG+0x224>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2200      	movs	r2, #0
 80050a6:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 80050a8:	4b37      	ldr	r3, [pc, #220]	@ (8005188 <makeDHCPMSG+0x224>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2200      	movs	r2, #0
 80050ae:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 80050b0:	4b35      	ldr	r3, [pc, #212]	@ (8005188 <makeDHCPMSG+0x224>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2200      	movs	r2, #0
 80050b6:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 80050b8:	4b33      	ldr	r3, [pc, #204]	@ (8005188 <makeDHCPMSG+0x224>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a34      	ldr	r2, [pc, #208]	@ (8005190 <makeDHCPMSG+0x22c>)
 80050be:	7812      	ldrb	r2, [r2, #0]
 80050c0:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 80050c2:	4b31      	ldr	r3, [pc, #196]	@ (8005188 <makeDHCPMSG+0x224>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a32      	ldr	r2, [pc, #200]	@ (8005190 <makeDHCPMSG+0x22c>)
 80050c8:	7852      	ldrb	r2, [r2, #1]
 80050ca:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 80050cc:	4b2e      	ldr	r3, [pc, #184]	@ (8005188 <makeDHCPMSG+0x224>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a2f      	ldr	r2, [pc, #188]	@ (8005190 <makeDHCPMSG+0x22c>)
 80050d2:	7892      	ldrb	r2, [r2, #2]
 80050d4:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 80050d6:	4b2c      	ldr	r3, [pc, #176]	@ (8005188 <makeDHCPMSG+0x224>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a2d      	ldr	r2, [pc, #180]	@ (8005190 <makeDHCPMSG+0x22c>)
 80050dc:	78d2      	ldrb	r2, [r2, #3]
 80050de:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 80050e0:	4b29      	ldr	r3, [pc, #164]	@ (8005188 <makeDHCPMSG+0x224>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a2a      	ldr	r2, [pc, #168]	@ (8005190 <makeDHCPMSG+0x22c>)
 80050e6:	7912      	ldrb	r2, [r2, #4]
 80050e8:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 80050ec:	4b26      	ldr	r3, [pc, #152]	@ (8005188 <makeDHCPMSG+0x224>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a27      	ldr	r2, [pc, #156]	@ (8005190 <makeDHCPMSG+0x22c>)
 80050f2:	7952      	ldrb	r2, [r2, #5]
 80050f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80050f8:	2306      	movs	r3, #6
 80050fa:	73fb      	strb	r3, [r7, #15]
 80050fc:	e008      	b.n	8005110 <makeDHCPMSG+0x1ac>
 80050fe:	4b22      	ldr	r3, [pc, #136]	@ (8005188 <makeDHCPMSG+0x224>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	4413      	add	r3, r2
 8005106:	2200      	movs	r2, #0
 8005108:	771a      	strb	r2, [r3, #28]
 800510a:	7bfb      	ldrb	r3, [r7, #15]
 800510c:	3301      	adds	r3, #1
 800510e:	73fb      	strb	r3, [r7, #15]
 8005110:	7bfb      	ldrb	r3, [r7, #15]
 8005112:	2b0f      	cmp	r3, #15
 8005114:	d9f3      	bls.n	80050fe <makeDHCPMSG+0x19a>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	73fb      	strb	r3, [r7, #15]
 800511a:	e009      	b.n	8005130 <makeDHCPMSG+0x1cc>
 800511c:	4b1a      	ldr	r3, [pc, #104]	@ (8005188 <makeDHCPMSG+0x224>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	4413      	add	r3, r2
 8005124:	2200      	movs	r2, #0
 8005126:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	3301      	adds	r3, #1
 800512e:	73fb      	strb	r3, [r7, #15]
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	2b3f      	cmp	r3, #63	@ 0x3f
 8005134:	d9f2      	bls.n	800511c <makeDHCPMSG+0x1b8>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	73fb      	strb	r3, [r7, #15]
 800513a:	e009      	b.n	8005150 <makeDHCPMSG+0x1ec>
 800513c:	4b12      	ldr	r3, [pc, #72]	@ (8005188 <makeDHCPMSG+0x224>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	4413      	add	r3, r2
 8005144:	2200      	movs	r2, #0
 8005146:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 800514a:	7bfb      	ldrb	r3, [r7, #15]
 800514c:	3301      	adds	r3, #1
 800514e:	73fb      	strb	r3, [r7, #15]
 8005150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005154:	2b00      	cmp	r3, #0
 8005156:	daf1      	bge.n	800513c <makeDHCPMSG+0x1d8>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8005158:	4b0b      	ldr	r3, [pc, #44]	@ (8005188 <makeDHCPMSG+0x224>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2263      	movs	r2, #99	@ 0x63
 800515e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8005162:	4b09      	ldr	r3, [pc, #36]	@ (8005188 <makeDHCPMSG+0x224>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2282      	movs	r2, #130	@ 0x82
 8005168:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 800516c:	4b06      	ldr	r3, [pc, #24]	@ (8005188 <makeDHCPMSG+0x224>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2253      	movs	r2, #83	@ 0x53
 8005172:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8005176:	4b04      	ldr	r3, [pc, #16]	@ (8005188 <makeDHCPMSG+0x224>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2263      	movs	r2, #99	@ 0x63
 800517c:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	20000a28 	.word	0x20000a28
 800518c:	20000a24 	.word	0x20000a24
 8005190:	20000a2c 	.word	0x20000a2c

08005194 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8005194:	b5b0      	push	{r4, r5, r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 800519a:	2300      	movs	r3, #0
 800519c:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 800519e:	f7ff fee1 	bl	8004f64 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 80051a2:	4b56      	ldr	r3, [pc, #344]	@ (80052fc <send_DHCP_DISCOVER+0x168>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 80051a8:	4b54      	ldr	r3, [pc, #336]	@ (80052fc <send_DHCP_DISCOVER+0x168>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 80051ae:	4b53      	ldr	r3, [pc, #332]	@ (80052fc <send_DHCP_DISCOVER+0x168>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 80051b4:	4b51      	ldr	r3, [pc, #324]	@ (80052fc <send_DHCP_DISCOVER+0x168>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 80051ba:	4b51      	ldr	r3, [pc, #324]	@ (8005300 <send_DHCP_DISCOVER+0x16c>)
 80051bc:	2200      	movs	r2, #0
 80051be:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 80051c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005300 <send_DHCP_DISCOVER+0x16c>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 80051c6:	4b4e      	ldr	r3, [pc, #312]	@ (8005300 <send_DHCP_DISCOVER+0x16c>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 80051cc:	4b4c      	ldr	r3, [pc, #304]	@ (8005300 <send_DHCP_DISCOVER+0x16c>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 80051d2:	2304      	movs	r3, #4
 80051d4:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80051d6:	4b4b      	ldr	r3, [pc, #300]	@ (8005304 <send_DHCP_DISCOVER+0x170>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	88bb      	ldrh	r3, [r7, #4]
 80051dc:	1c59      	adds	r1, r3, #1
 80051de:	80b9      	strh	r1, [r7, #4]
 80051e0:	4413      	add	r3, r2
 80051e2:	2235      	movs	r2, #53	@ 0x35
 80051e4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80051e8:	4b46      	ldr	r3, [pc, #280]	@ (8005304 <send_DHCP_DISCOVER+0x170>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	88bb      	ldrh	r3, [r7, #4]
 80051ee:	1c59      	adds	r1, r3, #1
 80051f0:	80b9      	strh	r1, [r7, #4]
 80051f2:	4413      	add	r3, r2
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 80051fa:	4b42      	ldr	r3, [pc, #264]	@ (8005304 <send_DHCP_DISCOVER+0x170>)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	88bb      	ldrh	r3, [r7, #4]
 8005200:	1c59      	adds	r1, r3, #1
 8005202:	80b9      	strh	r1, [r7, #4]
 8005204:	4413      	add	r3, r2
 8005206:	2201      	movs	r2, #1
 8005208:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800520c:	4b3d      	ldr	r3, [pc, #244]	@ (8005304 <send_DHCP_DISCOVER+0x170>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	88bb      	ldrh	r3, [r7, #4]
 8005212:	1c59      	adds	r1, r3, #1
 8005214:	80b9      	strh	r1, [r7, #4]
 8005216:	4413      	add	r3, r2
 8005218:	223d      	movs	r2, #61	@ 0x3d
 800521a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800521e:	4b39      	ldr	r3, [pc, #228]	@ (8005304 <send_DHCP_DISCOVER+0x170>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	88bb      	ldrh	r3, [r7, #4]
 8005224:	1c59      	adds	r1, r3, #1
 8005226:	80b9      	strh	r1, [r7, #4]
 8005228:	4413      	add	r3, r2
 800522a:	2207      	movs	r2, #7
 800522c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8005230:	4b34      	ldr	r3, [pc, #208]	@ (8005304 <send_DHCP_DISCOVER+0x170>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	88bb      	ldrh	r3, [r7, #4]
 8005236:	1c59      	adds	r1, r3, #1
 8005238:	80b9      	strh	r1, [r7, #4]
 800523a:	4413      	add	r3, r2
 800523c:	2201      	movs	r2, #1
 800523e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8005242:	4b30      	ldr	r3, [pc, #192]	@ (8005304 <send_DHCP_DISCOVER+0x170>)
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	88bb      	ldrh	r3, [r7, #4]
 8005248:	1c59      	adds	r1, r3, #1
 800524a:	80b9      	strh	r1, [r7, #4]
 800524c:	4618      	mov	r0, r3
 800524e:	4b2e      	ldr	r3, [pc, #184]	@ (8005308 <send_DHCP_DISCOVER+0x174>)
 8005250:	7819      	ldrb	r1, [r3, #0]
 8005252:	1813      	adds	r3, r2, r0
 8005254:	460a      	mov	r2, r1
 8005256:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800525a:	4b2a      	ldr	r3, [pc, #168]	@ (8005304 <send_DHCP_DISCOVER+0x170>)
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	88bb      	ldrh	r3, [r7, #4]
 8005260:	1c59      	adds	r1, r3, #1
 8005262:	80b9      	strh	r1, [r7, #4]
 8005264:	4618      	mov	r0, r3
 8005266:	4b28      	ldr	r3, [pc, #160]	@ (8005308 <send_DHCP_DISCOVER+0x174>)
 8005268:	7859      	ldrb	r1, [r3, #1]
 800526a:	1813      	adds	r3, r2, r0
 800526c:	460a      	mov	r2, r1
 800526e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8005272:	4b24      	ldr	r3, [pc, #144]	@ (8005304 <send_DHCP_DISCOVER+0x170>)
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	88bb      	ldrh	r3, [r7, #4]
 8005278:	1c59      	adds	r1, r3, #1
 800527a:	80b9      	strh	r1, [r7, #4]
 800527c:	4618      	mov	r0, r3
 800527e:	4b22      	ldr	r3, [pc, #136]	@ (8005308 <send_DHCP_DISCOVER+0x174>)
 8005280:	7899      	ldrb	r1, [r3, #2]
 8005282:	1813      	adds	r3, r2, r0
 8005284:	460a      	mov	r2, r1
 8005286:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800528a:	4b1e      	ldr	r3, [pc, #120]	@ (8005304 <send_DHCP_DISCOVER+0x170>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	88bb      	ldrh	r3, [r7, #4]
 8005290:	1c59      	adds	r1, r3, #1
 8005292:	80b9      	strh	r1, [r7, #4]
 8005294:	4618      	mov	r0, r3
 8005296:	4b1c      	ldr	r3, [pc, #112]	@ (8005308 <send_DHCP_DISCOVER+0x174>)
 8005298:	78d9      	ldrb	r1, [r3, #3]
 800529a:	1813      	adds	r3, r2, r0
 800529c:	460a      	mov	r2, r1
 800529e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80052a2:	4b18      	ldr	r3, [pc, #96]	@ (8005304 <send_DHCP_DISCOVER+0x170>)
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	88bb      	ldrh	r3, [r7, #4]
 80052a8:	1c59      	adds	r1, r3, #1
 80052aa:	80b9      	strh	r1, [r7, #4]
 80052ac:	4618      	mov	r0, r3
 80052ae:	4b16      	ldr	r3, [pc, #88]	@ (8005308 <send_DHCP_DISCOVER+0x174>)
 80052b0:	7919      	ldrb	r1, [r3, #4]
 80052b2:	1813      	adds	r3, r2, r0
 80052b4:	460a      	mov	r2, r1
 80052b6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80052ba:	4b12      	ldr	r3, [pc, #72]	@ (8005304 <send_DHCP_DISCOVER+0x170>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	88bb      	ldrh	r3, [r7, #4]
 80052c0:	1c59      	adds	r1, r3, #1
 80052c2:	80b9      	strh	r1, [r7, #4]
 80052c4:	4618      	mov	r0, r3
 80052c6:	4b10      	ldr	r3, [pc, #64]	@ (8005308 <send_DHCP_DISCOVER+0x174>)
 80052c8:	7959      	ldrb	r1, [r3, #5]
 80052ca:	1813      	adds	r3, r2, r0
 80052cc:	460a      	mov	r2, r1
 80052ce:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80052d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005304 <send_DHCP_DISCOVER+0x170>)
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	88bb      	ldrh	r3, [r7, #4]
 80052d8:	1c59      	adds	r1, r3, #1
 80052da:	80b9      	strh	r1, [r7, #4]
 80052dc:	4413      	add	r3, r2
 80052de:	220c      	movs	r2, #12
 80052e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 80052e4:	4b07      	ldr	r3, [pc, #28]	@ (8005304 <send_DHCP_DISCOVER+0x170>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	88bb      	ldrh	r3, [r7, #4]
 80052ea:	1c59      	adds	r1, r3, #1
 80052ec:	80b9      	strh	r1, [r7, #4]
 80052ee:	4413      	add	r3, r2
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80052f6:	2300      	movs	r3, #0
 80052f8:	80fb      	strh	r3, [r7, #6]
 80052fa:	e017      	b.n	800532c <send_DHCP_DISCOVER+0x198>
 80052fc:	20000a00 	.word	0x20000a00
 8005300:	20000a04 	.word	0x20000a04
 8005304:	20000a28 	.word	0x20000a28
 8005308:	20000a2c 	.word	0x20000a2c
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800530c:	88f9      	ldrh	r1, [r7, #6]
 800530e:	4b80      	ldr	r3, [pc, #512]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	88bb      	ldrh	r3, [r7, #4]
 8005314:	1c58      	adds	r0, r3, #1
 8005316:	80b8      	strh	r0, [r7, #4]
 8005318:	4618      	mov	r0, r3
 800531a:	4b7e      	ldr	r3, [pc, #504]	@ (8005514 <send_DHCP_DISCOVER+0x380>)
 800531c:	5c59      	ldrb	r1, [r3, r1]
 800531e:	1813      	adds	r3, r2, r0
 8005320:	460a      	mov	r2, r1
 8005322:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	3301      	adds	r3, #1
 800532a:	80fb      	strh	r3, [r7, #6]
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	4a79      	ldr	r2, [pc, #484]	@ (8005514 <send_DHCP_DISCOVER+0x380>)
 8005330:	5cd3      	ldrb	r3, [r2, r3]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1ea      	bne.n	800530c <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8005336:	4b78      	ldr	r3, [pc, #480]	@ (8005518 <send_DHCP_DISCOVER+0x384>)
 8005338:	78db      	ldrb	r3, [r3, #3]
 800533a:	091b      	lsrs	r3, r3, #4
 800533c:	b2da      	uxtb	r2, r3
 800533e:	4b74      	ldr	r3, [pc, #464]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 8005340:	681c      	ldr	r4, [r3, #0]
 8005342:	88bb      	ldrh	r3, [r7, #4]
 8005344:	1c59      	adds	r1, r3, #1
 8005346:	80b9      	strh	r1, [r7, #4]
 8005348:	461d      	mov	r5, r3
 800534a:	4610      	mov	r0, r2
 800534c:	f001 fa3c 	bl	80067c8 <NibbleToHex>
 8005350:	4603      	mov	r3, r0
 8005352:	461a      	mov	r2, r3
 8005354:	1963      	adds	r3, r4, r5
 8005356:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800535a:	4b6f      	ldr	r3, [pc, #444]	@ (8005518 <send_DHCP_DISCOVER+0x384>)
 800535c:	78da      	ldrb	r2, [r3, #3]
 800535e:	4b6c      	ldr	r3, [pc, #432]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 8005360:	681c      	ldr	r4, [r3, #0]
 8005362:	88bb      	ldrh	r3, [r7, #4]
 8005364:	1c59      	adds	r1, r3, #1
 8005366:	80b9      	strh	r1, [r7, #4]
 8005368:	461d      	mov	r5, r3
 800536a:	4610      	mov	r0, r2
 800536c:	f001 fa2c 	bl	80067c8 <NibbleToHex>
 8005370:	4603      	mov	r3, r0
 8005372:	461a      	mov	r2, r3
 8005374:	1963      	adds	r3, r4, r5
 8005376:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800537a:	4b67      	ldr	r3, [pc, #412]	@ (8005518 <send_DHCP_DISCOVER+0x384>)
 800537c:	791b      	ldrb	r3, [r3, #4]
 800537e:	091b      	lsrs	r3, r3, #4
 8005380:	b2da      	uxtb	r2, r3
 8005382:	4b63      	ldr	r3, [pc, #396]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 8005384:	681c      	ldr	r4, [r3, #0]
 8005386:	88bb      	ldrh	r3, [r7, #4]
 8005388:	1c59      	adds	r1, r3, #1
 800538a:	80b9      	strh	r1, [r7, #4]
 800538c:	461d      	mov	r5, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f001 fa1a 	bl	80067c8 <NibbleToHex>
 8005394:	4603      	mov	r3, r0
 8005396:	461a      	mov	r2, r3
 8005398:	1963      	adds	r3, r4, r5
 800539a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800539e:	4b5e      	ldr	r3, [pc, #376]	@ (8005518 <send_DHCP_DISCOVER+0x384>)
 80053a0:	791a      	ldrb	r2, [r3, #4]
 80053a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 80053a4:	681c      	ldr	r4, [r3, #0]
 80053a6:	88bb      	ldrh	r3, [r7, #4]
 80053a8:	1c59      	adds	r1, r3, #1
 80053aa:	80b9      	strh	r1, [r7, #4]
 80053ac:	461d      	mov	r5, r3
 80053ae:	4610      	mov	r0, r2
 80053b0:	f001 fa0a 	bl	80067c8 <NibbleToHex>
 80053b4:	4603      	mov	r3, r0
 80053b6:	461a      	mov	r2, r3
 80053b8:	1963      	adds	r3, r4, r5
 80053ba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80053be:	4b56      	ldr	r3, [pc, #344]	@ (8005518 <send_DHCP_DISCOVER+0x384>)
 80053c0:	795b      	ldrb	r3, [r3, #5]
 80053c2:	091b      	lsrs	r3, r3, #4
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	4b52      	ldr	r3, [pc, #328]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 80053c8:	681c      	ldr	r4, [r3, #0]
 80053ca:	88bb      	ldrh	r3, [r7, #4]
 80053cc:	1c59      	adds	r1, r3, #1
 80053ce:	80b9      	strh	r1, [r7, #4]
 80053d0:	461d      	mov	r5, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f001 f9f8 	bl	80067c8 <NibbleToHex>
 80053d8:	4603      	mov	r3, r0
 80053da:	461a      	mov	r2, r3
 80053dc:	1963      	adds	r3, r4, r5
 80053de:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80053e2:	4b4d      	ldr	r3, [pc, #308]	@ (8005518 <send_DHCP_DISCOVER+0x384>)
 80053e4:	795a      	ldrb	r2, [r3, #5]
 80053e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 80053e8:	681c      	ldr	r4, [r3, #0]
 80053ea:	88bb      	ldrh	r3, [r7, #4]
 80053ec:	1c59      	adds	r1, r3, #1
 80053ee:	80b9      	strh	r1, [r7, #4]
 80053f0:	461d      	mov	r5, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f001 f9e8 	bl	80067c8 <NibbleToHex>
 80053f8:	4603      	mov	r3, r0
 80053fa:	461a      	mov	r2, r3
 80053fc:	1963      	adds	r3, r4, r5
 80053fe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	b2d9      	uxtb	r1, r3
 8005406:	4b42      	ldr	r3, [pc, #264]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	88b8      	ldrh	r0, [r7, #4]
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	3307      	adds	r3, #7
 8005410:	1ac3      	subs	r3, r0, r3
 8005412:	3106      	adds	r1, #6
 8005414:	b2c9      	uxtb	r1, r1
 8005416:	4413      	add	r3, r2
 8005418:	460a      	mov	r2, r1
 800541a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800541e:	4b3c      	ldr	r3, [pc, #240]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	88bb      	ldrh	r3, [r7, #4]
 8005424:	1c59      	adds	r1, r3, #1
 8005426:	80b9      	strh	r1, [r7, #4]
 8005428:	4413      	add	r3, r2
 800542a:	2237      	movs	r2, #55	@ 0x37
 800542c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8005430:	4b37      	ldr	r3, [pc, #220]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	88bb      	ldrh	r3, [r7, #4]
 8005436:	1c59      	adds	r1, r3, #1
 8005438:	80b9      	strh	r1, [r7, #4]
 800543a:	4413      	add	r3, r2
 800543c:	2206      	movs	r2, #6
 800543e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8005442:	4b33      	ldr	r3, [pc, #204]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	88bb      	ldrh	r3, [r7, #4]
 8005448:	1c59      	adds	r1, r3, #1
 800544a:	80b9      	strh	r1, [r7, #4]
 800544c:	4413      	add	r3, r2
 800544e:	2201      	movs	r2, #1
 8005450:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8005454:	4b2e      	ldr	r3, [pc, #184]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	88bb      	ldrh	r3, [r7, #4]
 800545a:	1c59      	adds	r1, r3, #1
 800545c:	80b9      	strh	r1, [r7, #4]
 800545e:	4413      	add	r3, r2
 8005460:	2203      	movs	r2, #3
 8005462:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8005466:	4b2a      	ldr	r3, [pc, #168]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	88bb      	ldrh	r3, [r7, #4]
 800546c:	1c59      	adds	r1, r3, #1
 800546e:	80b9      	strh	r1, [r7, #4]
 8005470:	4413      	add	r3, r2
 8005472:	2206      	movs	r2, #6
 8005474:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8005478:	4b25      	ldr	r3, [pc, #148]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	88bb      	ldrh	r3, [r7, #4]
 800547e:	1c59      	adds	r1, r3, #1
 8005480:	80b9      	strh	r1, [r7, #4]
 8005482:	4413      	add	r3, r2
 8005484:	220f      	movs	r2, #15
 8005486:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800548a:	4b21      	ldr	r3, [pc, #132]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	88bb      	ldrh	r3, [r7, #4]
 8005490:	1c59      	adds	r1, r3, #1
 8005492:	80b9      	strh	r1, [r7, #4]
 8005494:	4413      	add	r3, r2
 8005496:	223a      	movs	r2, #58	@ 0x3a
 8005498:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 800549c:	4b1c      	ldr	r3, [pc, #112]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	88bb      	ldrh	r3, [r7, #4]
 80054a2:	1c59      	adds	r1, r3, #1
 80054a4:	80b9      	strh	r1, [r7, #4]
 80054a6:	4413      	add	r3, r2
 80054a8:	223b      	movs	r2, #59	@ 0x3b
 80054aa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80054ae:	4b18      	ldr	r3, [pc, #96]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	88bb      	ldrh	r3, [r7, #4]
 80054b4:	1c59      	adds	r1, r3, #1
 80054b6:	80b9      	strh	r1, [r7, #4]
 80054b8:	4413      	add	r3, r2
 80054ba:	22ff      	movs	r2, #255	@ 0xff
 80054bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80054c0:	88bb      	ldrh	r3, [r7, #4]
 80054c2:	80fb      	strh	r3, [r7, #6]
 80054c4:	e009      	b.n	80054da <send_DHCP_DISCOVER+0x346>
 80054c6:	4b12      	ldr	r3, [pc, #72]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	88fb      	ldrh	r3, [r7, #6]
 80054cc:	4413      	add	r3, r2
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 80054d4:	88fb      	ldrh	r3, [r7, #6]
 80054d6:	3301      	adds	r3, #1
 80054d8:	80fb      	strh	r3, [r7, #6]
 80054da:	88fb      	ldrh	r3, [r7, #6]
 80054dc:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80054e0:	d3f1      	bcc.n	80054c6 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 80054e2:	23ff      	movs	r3, #255	@ 0xff
 80054e4:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 80054e6:	23ff      	movs	r3, #255	@ 0xff
 80054e8:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 80054ea:	23ff      	movs	r3, #255	@ 0xff
 80054ec:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 80054ee:	23ff      	movs	r3, #255	@ 0xff
 80054f0:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80054f2:	4b0a      	ldr	r3, [pc, #40]	@ (800551c <send_DHCP_DISCOVER+0x388>)
 80054f4:	7818      	ldrb	r0, [r3, #0]
 80054f6:	4b06      	ldr	r3, [pc, #24]	@ (8005510 <send_DHCP_DISCOVER+0x37c>)
 80054f8:	6819      	ldr	r1, [r3, #0]
 80054fa:	463b      	mov	r3, r7
 80054fc:	2243      	movs	r2, #67	@ 0x43
 80054fe:	9200      	str	r2, [sp, #0]
 8005500:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8005504:	f7fe faf8 	bl	8003af8 <sendto>
}
 8005508:	bf00      	nop
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bdb0      	pop	{r4, r5, r7, pc}
 8005510:	20000a28 	.word	0x20000a28
 8005514:	20000058 	.word	0x20000058
 8005518:	20000a2c 	.word	0x20000a2c
 800551c:	200009fd 	.word	0x200009fd

08005520 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8005520:	b5b0      	push	{r4, r5, r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 800552a:	f7ff fd1b 	bl	8004f64 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 800552e:	4b1b      	ldr	r3, [pc, #108]	@ (800559c <send_DHCP_REQUEST+0x7c>)
 8005530:	f993 3000 	ldrsb.w	r3, [r3]
 8005534:	2b03      	cmp	r3, #3
 8005536:	d004      	beq.n	8005542 <send_DHCP_REQUEST+0x22>
 8005538:	4b18      	ldr	r3, [pc, #96]	@ (800559c <send_DHCP_REQUEST+0x7c>)
 800553a:	f993 3000 	ldrsb.w	r3, [r3]
 800553e:	2b04      	cmp	r3, #4
 8005540:	d134      	bne.n	80055ac <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8005542:	4b17      	ldr	r3, [pc, #92]	@ (80055a0 <send_DHCP_REQUEST+0x80>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	330a      	adds	r3, #10
 8005548:	2200      	movs	r2, #0
 800554a:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800554c:	4b14      	ldr	r3, [pc, #80]	@ (80055a0 <send_DHCP_REQUEST+0x80>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	330a      	adds	r3, #10
 8005552:	3301      	adds	r3, #1
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8005558:	4b11      	ldr	r3, [pc, #68]	@ (80055a0 <send_DHCP_REQUEST+0x80>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a11      	ldr	r2, [pc, #68]	@ (80055a4 <send_DHCP_REQUEST+0x84>)
 800555e:	7812      	ldrb	r2, [r2, #0]
 8005560:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8005562:	4b0f      	ldr	r3, [pc, #60]	@ (80055a0 <send_DHCP_REQUEST+0x80>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a0f      	ldr	r2, [pc, #60]	@ (80055a4 <send_DHCP_REQUEST+0x84>)
 8005568:	7852      	ldrb	r2, [r2, #1]
 800556a:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 800556c:	4b0c      	ldr	r3, [pc, #48]	@ (80055a0 <send_DHCP_REQUEST+0x80>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a0c      	ldr	r2, [pc, #48]	@ (80055a4 <send_DHCP_REQUEST+0x84>)
 8005572:	7892      	ldrb	r2, [r2, #2]
 8005574:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8005576:	4b0a      	ldr	r3, [pc, #40]	@ (80055a0 <send_DHCP_REQUEST+0x80>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a0a      	ldr	r2, [pc, #40]	@ (80055a4 <send_DHCP_REQUEST+0x84>)
 800557c:	78d2      	ldrb	r2, [r2, #3]
 800557e:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8005580:	4b09      	ldr	r3, [pc, #36]	@ (80055a8 <send_DHCP_REQUEST+0x88>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8005586:	4b08      	ldr	r3, [pc, #32]	@ (80055a8 <send_DHCP_REQUEST+0x88>)
 8005588:	785b      	ldrb	r3, [r3, #1]
 800558a:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 800558c:	4b06      	ldr	r3, [pc, #24]	@ (80055a8 <send_DHCP_REQUEST+0x88>)
 800558e:	789b      	ldrb	r3, [r3, #2]
 8005590:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8005592:	4b05      	ldr	r3, [pc, #20]	@ (80055a8 <send_DHCP_REQUEST+0x88>)
 8005594:	78db      	ldrb	r3, [r3, #3]
 8005596:	71fb      	strb	r3, [r7, #7]
 8005598:	e010      	b.n	80055bc <send_DHCP_REQUEST+0x9c>
 800559a:	bf00      	nop
 800559c:	20000a1c 	.word	0x20000a1c
 80055a0:	20000a28 	.word	0x20000a28
 80055a4:	20000a0c 	.word	0x20000a0c
 80055a8:	20000a00 	.word	0x20000a00
   }
   else
   {
   	ip[0] = 255;
 80055ac:	23ff      	movs	r3, #255	@ 0xff
 80055ae:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 80055b0:	23ff      	movs	r3, #255	@ 0xff
 80055b2:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 80055b4:	23ff      	movs	r3, #255	@ 0xff
 80055b6:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 80055b8:	23ff      	movs	r3, #255	@ 0xff
 80055ba:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80055bc:	2304      	movs	r3, #4
 80055be:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80055c0:	4b8d      	ldr	r3, [pc, #564]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	897b      	ldrh	r3, [r7, #10]
 80055c6:	1c59      	adds	r1, r3, #1
 80055c8:	8179      	strh	r1, [r7, #10]
 80055ca:	4413      	add	r3, r2
 80055cc:	2235      	movs	r2, #53	@ 0x35
 80055ce:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80055d2:	4b89      	ldr	r3, [pc, #548]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	897b      	ldrh	r3, [r7, #10]
 80055d8:	1c59      	adds	r1, r3, #1
 80055da:	8179      	strh	r1, [r7, #10]
 80055dc:	4413      	add	r3, r2
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 80055e4:	4b84      	ldr	r3, [pc, #528]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	897b      	ldrh	r3, [r7, #10]
 80055ea:	1c59      	adds	r1, r3, #1
 80055ec:	8179      	strh	r1, [r7, #10]
 80055ee:	4413      	add	r3, r2
 80055f0:	2203      	movs	r2, #3
 80055f2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80055f6:	4b80      	ldr	r3, [pc, #512]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	897b      	ldrh	r3, [r7, #10]
 80055fc:	1c59      	adds	r1, r3, #1
 80055fe:	8179      	strh	r1, [r7, #10]
 8005600:	4413      	add	r3, r2
 8005602:	223d      	movs	r2, #61	@ 0x3d
 8005604:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8005608:	4b7b      	ldr	r3, [pc, #492]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	897b      	ldrh	r3, [r7, #10]
 800560e:	1c59      	adds	r1, r3, #1
 8005610:	8179      	strh	r1, [r7, #10]
 8005612:	4413      	add	r3, r2
 8005614:	2207      	movs	r2, #7
 8005616:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800561a:	4b77      	ldr	r3, [pc, #476]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	897b      	ldrh	r3, [r7, #10]
 8005620:	1c59      	adds	r1, r3, #1
 8005622:	8179      	strh	r1, [r7, #10]
 8005624:	4413      	add	r3, r2
 8005626:	2201      	movs	r2, #1
 8005628:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800562c:	4b72      	ldr	r3, [pc, #456]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	897b      	ldrh	r3, [r7, #10]
 8005632:	1c59      	adds	r1, r3, #1
 8005634:	8179      	strh	r1, [r7, #10]
 8005636:	4618      	mov	r0, r3
 8005638:	4b70      	ldr	r3, [pc, #448]	@ (80057fc <send_DHCP_REQUEST+0x2dc>)
 800563a:	7819      	ldrb	r1, [r3, #0]
 800563c:	1813      	adds	r3, r2, r0
 800563e:	460a      	mov	r2, r1
 8005640:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8005644:	4b6c      	ldr	r3, [pc, #432]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	897b      	ldrh	r3, [r7, #10]
 800564a:	1c59      	adds	r1, r3, #1
 800564c:	8179      	strh	r1, [r7, #10]
 800564e:	4618      	mov	r0, r3
 8005650:	4b6a      	ldr	r3, [pc, #424]	@ (80057fc <send_DHCP_REQUEST+0x2dc>)
 8005652:	7859      	ldrb	r1, [r3, #1]
 8005654:	1813      	adds	r3, r2, r0
 8005656:	460a      	mov	r2, r1
 8005658:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800565c:	4b66      	ldr	r3, [pc, #408]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	897b      	ldrh	r3, [r7, #10]
 8005662:	1c59      	adds	r1, r3, #1
 8005664:	8179      	strh	r1, [r7, #10]
 8005666:	4618      	mov	r0, r3
 8005668:	4b64      	ldr	r3, [pc, #400]	@ (80057fc <send_DHCP_REQUEST+0x2dc>)
 800566a:	7899      	ldrb	r1, [r3, #2]
 800566c:	1813      	adds	r3, r2, r0
 800566e:	460a      	mov	r2, r1
 8005670:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8005674:	4b60      	ldr	r3, [pc, #384]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	897b      	ldrh	r3, [r7, #10]
 800567a:	1c59      	adds	r1, r3, #1
 800567c:	8179      	strh	r1, [r7, #10]
 800567e:	4618      	mov	r0, r3
 8005680:	4b5e      	ldr	r3, [pc, #376]	@ (80057fc <send_DHCP_REQUEST+0x2dc>)
 8005682:	78d9      	ldrb	r1, [r3, #3]
 8005684:	1813      	adds	r3, r2, r0
 8005686:	460a      	mov	r2, r1
 8005688:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800568c:	4b5a      	ldr	r3, [pc, #360]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	897b      	ldrh	r3, [r7, #10]
 8005692:	1c59      	adds	r1, r3, #1
 8005694:	8179      	strh	r1, [r7, #10]
 8005696:	4618      	mov	r0, r3
 8005698:	4b58      	ldr	r3, [pc, #352]	@ (80057fc <send_DHCP_REQUEST+0x2dc>)
 800569a:	7919      	ldrb	r1, [r3, #4]
 800569c:	1813      	adds	r3, r2, r0
 800569e:	460a      	mov	r2, r1
 80056a0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80056a4:	4b54      	ldr	r3, [pc, #336]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	897b      	ldrh	r3, [r7, #10]
 80056aa:	1c59      	adds	r1, r3, #1
 80056ac:	8179      	strh	r1, [r7, #10]
 80056ae:	4618      	mov	r0, r3
 80056b0:	4b52      	ldr	r3, [pc, #328]	@ (80057fc <send_DHCP_REQUEST+0x2dc>)
 80056b2:	7959      	ldrb	r1, [r3, #5]
 80056b4:	1813      	adds	r3, r2, r0
 80056b6:	460a      	mov	r2, r1
 80056b8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80056bc:	79fb      	ldrb	r3, [r7, #7]
 80056be:	2bff      	cmp	r3, #255	@ 0xff
 80056c0:	f040 8084 	bne.w	80057cc <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80056c4:	4b4c      	ldr	r3, [pc, #304]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	897b      	ldrh	r3, [r7, #10]
 80056ca:	1c59      	adds	r1, r3, #1
 80056cc:	8179      	strh	r1, [r7, #10]
 80056ce:	4413      	add	r3, r2
 80056d0:	2232      	movs	r2, #50	@ 0x32
 80056d2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80056d6:	4b48      	ldr	r3, [pc, #288]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	897b      	ldrh	r3, [r7, #10]
 80056dc:	1c59      	adds	r1, r3, #1
 80056de:	8179      	strh	r1, [r7, #10]
 80056e0:	4413      	add	r3, r2
 80056e2:	2204      	movs	r2, #4
 80056e4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80056e8:	4b43      	ldr	r3, [pc, #268]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	897b      	ldrh	r3, [r7, #10]
 80056ee:	1c59      	adds	r1, r3, #1
 80056f0:	8179      	strh	r1, [r7, #10]
 80056f2:	4618      	mov	r0, r3
 80056f4:	4b42      	ldr	r3, [pc, #264]	@ (8005800 <send_DHCP_REQUEST+0x2e0>)
 80056f6:	7819      	ldrb	r1, [r3, #0]
 80056f8:	1813      	adds	r3, r2, r0
 80056fa:	460a      	mov	r2, r1
 80056fc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8005700:	4b3d      	ldr	r3, [pc, #244]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	897b      	ldrh	r3, [r7, #10]
 8005706:	1c59      	adds	r1, r3, #1
 8005708:	8179      	strh	r1, [r7, #10]
 800570a:	4618      	mov	r0, r3
 800570c:	4b3c      	ldr	r3, [pc, #240]	@ (8005800 <send_DHCP_REQUEST+0x2e0>)
 800570e:	7859      	ldrb	r1, [r3, #1]
 8005710:	1813      	adds	r3, r2, r0
 8005712:	460a      	mov	r2, r1
 8005714:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8005718:	4b37      	ldr	r3, [pc, #220]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	897b      	ldrh	r3, [r7, #10]
 800571e:	1c59      	adds	r1, r3, #1
 8005720:	8179      	strh	r1, [r7, #10]
 8005722:	4618      	mov	r0, r3
 8005724:	4b36      	ldr	r3, [pc, #216]	@ (8005800 <send_DHCP_REQUEST+0x2e0>)
 8005726:	7899      	ldrb	r1, [r3, #2]
 8005728:	1813      	adds	r3, r2, r0
 800572a:	460a      	mov	r2, r1
 800572c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8005730:	4b31      	ldr	r3, [pc, #196]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	897b      	ldrh	r3, [r7, #10]
 8005736:	1c59      	adds	r1, r3, #1
 8005738:	8179      	strh	r1, [r7, #10]
 800573a:	4618      	mov	r0, r3
 800573c:	4b30      	ldr	r3, [pc, #192]	@ (8005800 <send_DHCP_REQUEST+0x2e0>)
 800573e:	78d9      	ldrb	r1, [r3, #3]
 8005740:	1813      	adds	r3, r2, r0
 8005742:	460a      	mov	r2, r1
 8005744:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8005748:	4b2b      	ldr	r3, [pc, #172]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	897b      	ldrh	r3, [r7, #10]
 800574e:	1c59      	adds	r1, r3, #1
 8005750:	8179      	strh	r1, [r7, #10]
 8005752:	4413      	add	r3, r2
 8005754:	2236      	movs	r2, #54	@ 0x36
 8005756:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800575a:	4b27      	ldr	r3, [pc, #156]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	897b      	ldrh	r3, [r7, #10]
 8005760:	1c59      	adds	r1, r3, #1
 8005762:	8179      	strh	r1, [r7, #10]
 8005764:	4413      	add	r3, r2
 8005766:	2204      	movs	r2, #4
 8005768:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800576c:	4b22      	ldr	r3, [pc, #136]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	897b      	ldrh	r3, [r7, #10]
 8005772:	1c59      	adds	r1, r3, #1
 8005774:	8179      	strh	r1, [r7, #10]
 8005776:	4618      	mov	r0, r3
 8005778:	4b22      	ldr	r3, [pc, #136]	@ (8005804 <send_DHCP_REQUEST+0x2e4>)
 800577a:	7819      	ldrb	r1, [r3, #0]
 800577c:	1813      	adds	r3, r2, r0
 800577e:	460a      	mov	r2, r1
 8005780:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8005784:	4b1c      	ldr	r3, [pc, #112]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	897b      	ldrh	r3, [r7, #10]
 800578a:	1c59      	adds	r1, r3, #1
 800578c:	8179      	strh	r1, [r7, #10]
 800578e:	4618      	mov	r0, r3
 8005790:	4b1c      	ldr	r3, [pc, #112]	@ (8005804 <send_DHCP_REQUEST+0x2e4>)
 8005792:	7859      	ldrb	r1, [r3, #1]
 8005794:	1813      	adds	r3, r2, r0
 8005796:	460a      	mov	r2, r1
 8005798:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 800579c:	4b16      	ldr	r3, [pc, #88]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	897b      	ldrh	r3, [r7, #10]
 80057a2:	1c59      	adds	r1, r3, #1
 80057a4:	8179      	strh	r1, [r7, #10]
 80057a6:	4618      	mov	r0, r3
 80057a8:	4b16      	ldr	r3, [pc, #88]	@ (8005804 <send_DHCP_REQUEST+0x2e4>)
 80057aa:	7899      	ldrb	r1, [r3, #2]
 80057ac:	1813      	adds	r3, r2, r0
 80057ae:	460a      	mov	r2, r1
 80057b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80057b4:	4b10      	ldr	r3, [pc, #64]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	897b      	ldrh	r3, [r7, #10]
 80057ba:	1c59      	adds	r1, r3, #1
 80057bc:	8179      	strh	r1, [r7, #10]
 80057be:	4618      	mov	r0, r3
 80057c0:	4b10      	ldr	r3, [pc, #64]	@ (8005804 <send_DHCP_REQUEST+0x2e4>)
 80057c2:	78d9      	ldrb	r1, [r3, #3]
 80057c4:	1813      	adds	r3, r2, r0
 80057c6:	460a      	mov	r2, r1
 80057c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80057cc:	4b0a      	ldr	r3, [pc, #40]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	897b      	ldrh	r3, [r7, #10]
 80057d2:	1c59      	adds	r1, r3, #1
 80057d4:	8179      	strh	r1, [r7, #10]
 80057d6:	4413      	add	r3, r2
 80057d8:	220c      	movs	r2, #12
 80057da:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 80057de:	4b06      	ldr	r3, [pc, #24]	@ (80057f8 <send_DHCP_REQUEST+0x2d8>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	897b      	ldrh	r3, [r7, #10]
 80057e4:	1c59      	adds	r1, r3, #1
 80057e6:	8179      	strh	r1, [r7, #10]
 80057e8:	4413      	add	r3, r2
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80057f0:	2300      	movs	r3, #0
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	e019      	b.n	800582a <send_DHCP_REQUEST+0x30a>
 80057f6:	bf00      	nop
 80057f8:	20000a28 	.word	0x20000a28
 80057fc:	20000a2c 	.word	0x20000a2c
 8005800:	20000a0c 	.word	0x20000a0c
 8005804:	20000a00 	.word	0x20000a00
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8005808:	4b86      	ldr	r3, [pc, #536]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	897b      	ldrh	r3, [r7, #10]
 800580e:	1c59      	adds	r1, r3, #1
 8005810:	8179      	strh	r1, [r7, #10]
 8005812:	4618      	mov	r0, r3
 8005814:	4984      	ldr	r1, [pc, #528]	@ (8005a28 <send_DHCP_REQUEST+0x508>)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	440b      	add	r3, r1
 800581a:	7819      	ldrb	r1, [r3, #0]
 800581c:	1813      	adds	r3, r2, r0
 800581e:	460a      	mov	r2, r1
 8005820:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	4a7f      	ldr	r2, [pc, #508]	@ (8005a28 <send_DHCP_REQUEST+0x508>)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e8      	bne.n	8005808 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8005836:	4b7d      	ldr	r3, [pc, #500]	@ (8005a2c <send_DHCP_REQUEST+0x50c>)
 8005838:	78db      	ldrb	r3, [r3, #3]
 800583a:	091b      	lsrs	r3, r3, #4
 800583c:	b2da      	uxtb	r2, r3
 800583e:	4b79      	ldr	r3, [pc, #484]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 8005840:	681c      	ldr	r4, [r3, #0]
 8005842:	897b      	ldrh	r3, [r7, #10]
 8005844:	1c59      	adds	r1, r3, #1
 8005846:	8179      	strh	r1, [r7, #10]
 8005848:	461d      	mov	r5, r3
 800584a:	4610      	mov	r0, r2
 800584c:	f000 ffbc 	bl	80067c8 <NibbleToHex>
 8005850:	4603      	mov	r3, r0
 8005852:	461a      	mov	r2, r3
 8005854:	1963      	adds	r3, r4, r5
 8005856:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800585a:	4b74      	ldr	r3, [pc, #464]	@ (8005a2c <send_DHCP_REQUEST+0x50c>)
 800585c:	78da      	ldrb	r2, [r3, #3]
 800585e:	4b71      	ldr	r3, [pc, #452]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 8005860:	681c      	ldr	r4, [r3, #0]
 8005862:	897b      	ldrh	r3, [r7, #10]
 8005864:	1c59      	adds	r1, r3, #1
 8005866:	8179      	strh	r1, [r7, #10]
 8005868:	461d      	mov	r5, r3
 800586a:	4610      	mov	r0, r2
 800586c:	f000 ffac 	bl	80067c8 <NibbleToHex>
 8005870:	4603      	mov	r3, r0
 8005872:	461a      	mov	r2, r3
 8005874:	1963      	adds	r3, r4, r5
 8005876:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800587a:	4b6c      	ldr	r3, [pc, #432]	@ (8005a2c <send_DHCP_REQUEST+0x50c>)
 800587c:	791b      	ldrb	r3, [r3, #4]
 800587e:	091b      	lsrs	r3, r3, #4
 8005880:	b2da      	uxtb	r2, r3
 8005882:	4b68      	ldr	r3, [pc, #416]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 8005884:	681c      	ldr	r4, [r3, #0]
 8005886:	897b      	ldrh	r3, [r7, #10]
 8005888:	1c59      	adds	r1, r3, #1
 800588a:	8179      	strh	r1, [r7, #10]
 800588c:	461d      	mov	r5, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f000 ff9a 	bl	80067c8 <NibbleToHex>
 8005894:	4603      	mov	r3, r0
 8005896:	461a      	mov	r2, r3
 8005898:	1963      	adds	r3, r4, r5
 800589a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800589e:	4b63      	ldr	r3, [pc, #396]	@ (8005a2c <send_DHCP_REQUEST+0x50c>)
 80058a0:	791a      	ldrb	r2, [r3, #4]
 80058a2:	4b60      	ldr	r3, [pc, #384]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 80058a4:	681c      	ldr	r4, [r3, #0]
 80058a6:	897b      	ldrh	r3, [r7, #10]
 80058a8:	1c59      	adds	r1, r3, #1
 80058aa:	8179      	strh	r1, [r7, #10]
 80058ac:	461d      	mov	r5, r3
 80058ae:	4610      	mov	r0, r2
 80058b0:	f000 ff8a 	bl	80067c8 <NibbleToHex>
 80058b4:	4603      	mov	r3, r0
 80058b6:	461a      	mov	r2, r3
 80058b8:	1963      	adds	r3, r4, r5
 80058ba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80058be:	4b5b      	ldr	r3, [pc, #364]	@ (8005a2c <send_DHCP_REQUEST+0x50c>)
 80058c0:	795b      	ldrb	r3, [r3, #5]
 80058c2:	091b      	lsrs	r3, r3, #4
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	4b57      	ldr	r3, [pc, #348]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 80058c8:	681c      	ldr	r4, [r3, #0]
 80058ca:	897b      	ldrh	r3, [r7, #10]
 80058cc:	1c59      	adds	r1, r3, #1
 80058ce:	8179      	strh	r1, [r7, #10]
 80058d0:	461d      	mov	r5, r3
 80058d2:	4610      	mov	r0, r2
 80058d4:	f000 ff78 	bl	80067c8 <NibbleToHex>
 80058d8:	4603      	mov	r3, r0
 80058da:	461a      	mov	r2, r3
 80058dc:	1963      	adds	r3, r4, r5
 80058de:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80058e2:	4b52      	ldr	r3, [pc, #328]	@ (8005a2c <send_DHCP_REQUEST+0x50c>)
 80058e4:	795a      	ldrb	r2, [r3, #5]
 80058e6:	4b4f      	ldr	r3, [pc, #316]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 80058e8:	681c      	ldr	r4, [r3, #0]
 80058ea:	897b      	ldrh	r3, [r7, #10]
 80058ec:	1c59      	adds	r1, r3, #1
 80058ee:	8179      	strh	r1, [r7, #10]
 80058f0:	461d      	mov	r5, r3
 80058f2:	4610      	mov	r0, r2
 80058f4:	f000 ff68 	bl	80067c8 <NibbleToHex>
 80058f8:	4603      	mov	r3, r0
 80058fa:	461a      	mov	r2, r3
 80058fc:	1963      	adds	r3, r4, r5
 80058fe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	b2d9      	uxtb	r1, r3
 8005906:	4b47      	ldr	r3, [pc, #284]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	8978      	ldrh	r0, [r7, #10]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3307      	adds	r3, #7
 8005910:	1ac3      	subs	r3, r0, r3
 8005912:	3106      	adds	r1, #6
 8005914:	b2c9      	uxtb	r1, r1
 8005916:	4413      	add	r3, r2
 8005918:	460a      	mov	r2, r1
 800591a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800591e:	4b41      	ldr	r3, [pc, #260]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	897b      	ldrh	r3, [r7, #10]
 8005924:	1c59      	adds	r1, r3, #1
 8005926:	8179      	strh	r1, [r7, #10]
 8005928:	4413      	add	r3, r2
 800592a:	2237      	movs	r2, #55	@ 0x37
 800592c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8005930:	4b3c      	ldr	r3, [pc, #240]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	897b      	ldrh	r3, [r7, #10]
 8005936:	1c59      	adds	r1, r3, #1
 8005938:	8179      	strh	r1, [r7, #10]
 800593a:	4413      	add	r3, r2
 800593c:	2208      	movs	r2, #8
 800593e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8005942:	4b38      	ldr	r3, [pc, #224]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	897b      	ldrh	r3, [r7, #10]
 8005948:	1c59      	adds	r1, r3, #1
 800594a:	8179      	strh	r1, [r7, #10]
 800594c:	4413      	add	r3, r2
 800594e:	2201      	movs	r2, #1
 8005950:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8005954:	4b33      	ldr	r3, [pc, #204]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	897b      	ldrh	r3, [r7, #10]
 800595a:	1c59      	adds	r1, r3, #1
 800595c:	8179      	strh	r1, [r7, #10]
 800595e:	4413      	add	r3, r2
 8005960:	2203      	movs	r2, #3
 8005962:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8005966:	4b2f      	ldr	r3, [pc, #188]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	897b      	ldrh	r3, [r7, #10]
 800596c:	1c59      	adds	r1, r3, #1
 800596e:	8179      	strh	r1, [r7, #10]
 8005970:	4413      	add	r3, r2
 8005972:	2206      	movs	r2, #6
 8005974:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8005978:	4b2a      	ldr	r3, [pc, #168]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	897b      	ldrh	r3, [r7, #10]
 800597e:	1c59      	adds	r1, r3, #1
 8005980:	8179      	strh	r1, [r7, #10]
 8005982:	4413      	add	r3, r2
 8005984:	220f      	movs	r2, #15
 8005986:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800598a:	4b26      	ldr	r3, [pc, #152]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	897b      	ldrh	r3, [r7, #10]
 8005990:	1c59      	adds	r1, r3, #1
 8005992:	8179      	strh	r1, [r7, #10]
 8005994:	4413      	add	r3, r2
 8005996:	223a      	movs	r2, #58	@ 0x3a
 8005998:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 800599c:	4b21      	ldr	r3, [pc, #132]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	897b      	ldrh	r3, [r7, #10]
 80059a2:	1c59      	adds	r1, r3, #1
 80059a4:	8179      	strh	r1, [r7, #10]
 80059a6:	4413      	add	r3, r2
 80059a8:	223b      	movs	r2, #59	@ 0x3b
 80059aa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 80059ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	897b      	ldrh	r3, [r7, #10]
 80059b4:	1c59      	adds	r1, r3, #1
 80059b6:	8179      	strh	r1, [r7, #10]
 80059b8:	4413      	add	r3, r2
 80059ba:	221f      	movs	r2, #31
 80059bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 80059c0:	4b18      	ldr	r3, [pc, #96]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	897b      	ldrh	r3, [r7, #10]
 80059c6:	1c59      	adds	r1, r3, #1
 80059c8:	8179      	strh	r1, [r7, #10]
 80059ca:	4413      	add	r3, r2
 80059cc:	2221      	movs	r2, #33	@ 0x21
 80059ce:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80059d2:	4b14      	ldr	r3, [pc, #80]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	897b      	ldrh	r3, [r7, #10]
 80059d8:	1c59      	adds	r1, r3, #1
 80059da:	8179      	strh	r1, [r7, #10]
 80059dc:	4413      	add	r3, r2
 80059de:	22ff      	movs	r2, #255	@ 0xff
 80059e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80059e4:	897b      	ldrh	r3, [r7, #10]
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	e009      	b.n	80059fe <send_DHCP_REQUEST+0x4de>
 80059ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4413      	add	r3, r2
 80059f2:	33ec      	adds	r3, #236	@ 0xec
 80059f4:	2200      	movs	r2, #0
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3301      	adds	r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8005a04:	dbf1      	blt.n	80059ea <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8005a06:	4b0a      	ldr	r3, [pc, #40]	@ (8005a30 <send_DHCP_REQUEST+0x510>)
 8005a08:	7818      	ldrb	r0, [r3, #0]
 8005a0a:	4b06      	ldr	r3, [pc, #24]	@ (8005a24 <send_DHCP_REQUEST+0x504>)
 8005a0c:	6819      	ldr	r1, [r3, #0]
 8005a0e:	1d3b      	adds	r3, r7, #4
 8005a10:	2243      	movs	r2, #67	@ 0x43
 8005a12:	9200      	str	r2, [sp, #0]
 8005a14:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8005a18:	f7fe f86e 	bl	8003af8 <sendto>

}
 8005a1c:	bf00      	nop
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bdb0      	pop	{r4, r5, r7, pc}
 8005a24:	20000a28 	.word	0x20000a28
 8005a28:	20000058 	.word	0x20000058
 8005a2c:	20000a2c 	.word	0x20000a2c
 8005a30:	200009fd 	.word	0x200009fd

08005a34 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8005a3e:	f7ff fa91 	bl	8004f64 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8005a42:	2304      	movs	r3, #4
 8005a44:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8005a46:	4b9f      	ldr	r3, [pc, #636]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	330a      	adds	r3, #10
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8005a50:	4b9c      	ldr	r3, [pc, #624]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330a      	adds	r3, #10
 8005a56:	3301      	adds	r3, #1
 8005a58:	2200      	movs	r2, #0
 8005a5a:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8005a5c:	4b99      	ldr	r3, [pc, #612]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	897b      	ldrh	r3, [r7, #10]
 8005a62:	1c59      	adds	r1, r3, #1
 8005a64:	8179      	strh	r1, [r7, #10]
 8005a66:	4413      	add	r3, r2
 8005a68:	2235      	movs	r2, #53	@ 0x35
 8005a6a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8005a6e:	4b95      	ldr	r3, [pc, #596]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	897b      	ldrh	r3, [r7, #10]
 8005a74:	1c59      	adds	r1, r3, #1
 8005a76:	8179      	strh	r1, [r7, #10]
 8005a78:	4413      	add	r3, r2
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8005a80:	4b90      	ldr	r3, [pc, #576]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	897b      	ldrh	r3, [r7, #10]
 8005a86:	1c59      	adds	r1, r3, #1
 8005a88:	8179      	strh	r1, [r7, #10]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	2204      	movs	r2, #4
 8005a8e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8005a92:	4b8c      	ldr	r3, [pc, #560]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	897b      	ldrh	r3, [r7, #10]
 8005a98:	1c59      	adds	r1, r3, #1
 8005a9a:	8179      	strh	r1, [r7, #10]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	223d      	movs	r2, #61	@ 0x3d
 8005aa0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8005aa4:	4b87      	ldr	r3, [pc, #540]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	897b      	ldrh	r3, [r7, #10]
 8005aaa:	1c59      	adds	r1, r3, #1
 8005aac:	8179      	strh	r1, [r7, #10]
 8005aae:	4413      	add	r3, r2
 8005ab0:	2207      	movs	r2, #7
 8005ab2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8005ab6:	4b83      	ldr	r3, [pc, #524]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	897b      	ldrh	r3, [r7, #10]
 8005abc:	1c59      	adds	r1, r3, #1
 8005abe:	8179      	strh	r1, [r7, #10]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8005ac8:	4b7e      	ldr	r3, [pc, #504]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	897b      	ldrh	r3, [r7, #10]
 8005ace:	1c59      	adds	r1, r3, #1
 8005ad0:	8179      	strh	r1, [r7, #10]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	4b7c      	ldr	r3, [pc, #496]	@ (8005cc8 <send_DHCP_DECLINE+0x294>)
 8005ad6:	7819      	ldrb	r1, [r3, #0]
 8005ad8:	1813      	adds	r3, r2, r0
 8005ada:	460a      	mov	r2, r1
 8005adc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8005ae0:	4b78      	ldr	r3, [pc, #480]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	897b      	ldrh	r3, [r7, #10]
 8005ae6:	1c59      	adds	r1, r3, #1
 8005ae8:	8179      	strh	r1, [r7, #10]
 8005aea:	4618      	mov	r0, r3
 8005aec:	4b76      	ldr	r3, [pc, #472]	@ (8005cc8 <send_DHCP_DECLINE+0x294>)
 8005aee:	7859      	ldrb	r1, [r3, #1]
 8005af0:	1813      	adds	r3, r2, r0
 8005af2:	460a      	mov	r2, r1
 8005af4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8005af8:	4b72      	ldr	r3, [pc, #456]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	897b      	ldrh	r3, [r7, #10]
 8005afe:	1c59      	adds	r1, r3, #1
 8005b00:	8179      	strh	r1, [r7, #10]
 8005b02:	4618      	mov	r0, r3
 8005b04:	4b70      	ldr	r3, [pc, #448]	@ (8005cc8 <send_DHCP_DECLINE+0x294>)
 8005b06:	7899      	ldrb	r1, [r3, #2]
 8005b08:	1813      	adds	r3, r2, r0
 8005b0a:	460a      	mov	r2, r1
 8005b0c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8005b10:	4b6c      	ldr	r3, [pc, #432]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	897b      	ldrh	r3, [r7, #10]
 8005b16:	1c59      	adds	r1, r3, #1
 8005b18:	8179      	strh	r1, [r7, #10]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	4b6a      	ldr	r3, [pc, #424]	@ (8005cc8 <send_DHCP_DECLINE+0x294>)
 8005b1e:	78d9      	ldrb	r1, [r3, #3]
 8005b20:	1813      	adds	r3, r2, r0
 8005b22:	460a      	mov	r2, r1
 8005b24:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8005b28:	4b66      	ldr	r3, [pc, #408]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	897b      	ldrh	r3, [r7, #10]
 8005b2e:	1c59      	adds	r1, r3, #1
 8005b30:	8179      	strh	r1, [r7, #10]
 8005b32:	4618      	mov	r0, r3
 8005b34:	4b64      	ldr	r3, [pc, #400]	@ (8005cc8 <send_DHCP_DECLINE+0x294>)
 8005b36:	7919      	ldrb	r1, [r3, #4]
 8005b38:	1813      	adds	r3, r2, r0
 8005b3a:	460a      	mov	r2, r1
 8005b3c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8005b40:	4b60      	ldr	r3, [pc, #384]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	897b      	ldrh	r3, [r7, #10]
 8005b46:	1c59      	adds	r1, r3, #1
 8005b48:	8179      	strh	r1, [r7, #10]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	4b5e      	ldr	r3, [pc, #376]	@ (8005cc8 <send_DHCP_DECLINE+0x294>)
 8005b4e:	7959      	ldrb	r1, [r3, #5]
 8005b50:	1813      	adds	r3, r2, r0
 8005b52:	460a      	mov	r2, r1
 8005b54:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8005b58:	4b5a      	ldr	r3, [pc, #360]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	897b      	ldrh	r3, [r7, #10]
 8005b5e:	1c59      	adds	r1, r3, #1
 8005b60:	8179      	strh	r1, [r7, #10]
 8005b62:	4413      	add	r3, r2
 8005b64:	2232      	movs	r2, #50	@ 0x32
 8005b66:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8005b6a:	4b56      	ldr	r3, [pc, #344]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	897b      	ldrh	r3, [r7, #10]
 8005b70:	1c59      	adds	r1, r3, #1
 8005b72:	8179      	strh	r1, [r7, #10]
 8005b74:	4413      	add	r3, r2
 8005b76:	2204      	movs	r2, #4
 8005b78:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8005b7c:	4b51      	ldr	r3, [pc, #324]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	897b      	ldrh	r3, [r7, #10]
 8005b82:	1c59      	adds	r1, r3, #1
 8005b84:	8179      	strh	r1, [r7, #10]
 8005b86:	4618      	mov	r0, r3
 8005b88:	4b50      	ldr	r3, [pc, #320]	@ (8005ccc <send_DHCP_DECLINE+0x298>)
 8005b8a:	7819      	ldrb	r1, [r3, #0]
 8005b8c:	1813      	adds	r3, r2, r0
 8005b8e:	460a      	mov	r2, r1
 8005b90:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8005b94:	4b4b      	ldr	r3, [pc, #300]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	897b      	ldrh	r3, [r7, #10]
 8005b9a:	1c59      	adds	r1, r3, #1
 8005b9c:	8179      	strh	r1, [r7, #10]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	4b4a      	ldr	r3, [pc, #296]	@ (8005ccc <send_DHCP_DECLINE+0x298>)
 8005ba2:	7859      	ldrb	r1, [r3, #1]
 8005ba4:	1813      	adds	r3, r2, r0
 8005ba6:	460a      	mov	r2, r1
 8005ba8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8005bac:	4b45      	ldr	r3, [pc, #276]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	897b      	ldrh	r3, [r7, #10]
 8005bb2:	1c59      	adds	r1, r3, #1
 8005bb4:	8179      	strh	r1, [r7, #10]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	4b44      	ldr	r3, [pc, #272]	@ (8005ccc <send_DHCP_DECLINE+0x298>)
 8005bba:	7899      	ldrb	r1, [r3, #2]
 8005bbc:	1813      	adds	r3, r2, r0
 8005bbe:	460a      	mov	r2, r1
 8005bc0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8005bc4:	4b3f      	ldr	r3, [pc, #252]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	897b      	ldrh	r3, [r7, #10]
 8005bca:	1c59      	adds	r1, r3, #1
 8005bcc:	8179      	strh	r1, [r7, #10]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	4b3e      	ldr	r3, [pc, #248]	@ (8005ccc <send_DHCP_DECLINE+0x298>)
 8005bd2:	78d9      	ldrb	r1, [r3, #3]
 8005bd4:	1813      	adds	r3, r2, r0
 8005bd6:	460a      	mov	r2, r1
 8005bd8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8005bdc:	4b39      	ldr	r3, [pc, #228]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	897b      	ldrh	r3, [r7, #10]
 8005be2:	1c59      	adds	r1, r3, #1
 8005be4:	8179      	strh	r1, [r7, #10]
 8005be6:	4413      	add	r3, r2
 8005be8:	2236      	movs	r2, #54	@ 0x36
 8005bea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8005bee:	4b35      	ldr	r3, [pc, #212]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	897b      	ldrh	r3, [r7, #10]
 8005bf4:	1c59      	adds	r1, r3, #1
 8005bf6:	8179      	strh	r1, [r7, #10]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	2204      	movs	r2, #4
 8005bfc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8005c00:	4b30      	ldr	r3, [pc, #192]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	897b      	ldrh	r3, [r7, #10]
 8005c06:	1c59      	adds	r1, r3, #1
 8005c08:	8179      	strh	r1, [r7, #10]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	4b30      	ldr	r3, [pc, #192]	@ (8005cd0 <send_DHCP_DECLINE+0x29c>)
 8005c0e:	7819      	ldrb	r1, [r3, #0]
 8005c10:	1813      	adds	r3, r2, r0
 8005c12:	460a      	mov	r2, r1
 8005c14:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8005c18:	4b2a      	ldr	r3, [pc, #168]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	897b      	ldrh	r3, [r7, #10]
 8005c1e:	1c59      	adds	r1, r3, #1
 8005c20:	8179      	strh	r1, [r7, #10]
 8005c22:	4618      	mov	r0, r3
 8005c24:	4b2a      	ldr	r3, [pc, #168]	@ (8005cd0 <send_DHCP_DECLINE+0x29c>)
 8005c26:	7859      	ldrb	r1, [r3, #1]
 8005c28:	1813      	adds	r3, r2, r0
 8005c2a:	460a      	mov	r2, r1
 8005c2c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8005c30:	4b24      	ldr	r3, [pc, #144]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	897b      	ldrh	r3, [r7, #10]
 8005c36:	1c59      	adds	r1, r3, #1
 8005c38:	8179      	strh	r1, [r7, #10]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	4b24      	ldr	r3, [pc, #144]	@ (8005cd0 <send_DHCP_DECLINE+0x29c>)
 8005c3e:	7899      	ldrb	r1, [r3, #2]
 8005c40:	1813      	adds	r3, r2, r0
 8005c42:	460a      	mov	r2, r1
 8005c44:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8005c48:	4b1e      	ldr	r3, [pc, #120]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	897b      	ldrh	r3, [r7, #10]
 8005c4e:	1c59      	adds	r1, r3, #1
 8005c50:	8179      	strh	r1, [r7, #10]
 8005c52:	4618      	mov	r0, r3
 8005c54:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd0 <send_DHCP_DECLINE+0x29c>)
 8005c56:	78d9      	ldrb	r1, [r3, #3]
 8005c58:	1813      	adds	r3, r2, r0
 8005c5a:	460a      	mov	r2, r1
 8005c5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8005c60:	4b18      	ldr	r3, [pc, #96]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	897b      	ldrh	r3, [r7, #10]
 8005c66:	1c59      	adds	r1, r3, #1
 8005c68:	8179      	strh	r1, [r7, #10]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	22ff      	movs	r2, #255	@ 0xff
 8005c6e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8005c72:	897b      	ldrh	r3, [r7, #10]
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	e009      	b.n	8005c8c <send_DHCP_DECLINE+0x258>
 8005c78:	4b12      	ldr	r3, [pc, #72]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	33ec      	adds	r3, #236	@ 0xec
 8005c82:	2200      	movs	r2, #0
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8005c92:	dbf1      	blt.n	8005c78 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8005c94:	23ff      	movs	r3, #255	@ 0xff
 8005c96:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8005c98:	23ff      	movs	r3, #255	@ 0xff
 8005c9a:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8005c9c:	23ff      	movs	r3, #255	@ 0xff
 8005c9e:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8005ca0:	23ff      	movs	r3, #255	@ 0xff
 8005ca2:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd4 <send_DHCP_DECLINE+0x2a0>)
 8005ca6:	7818      	ldrb	r0, [r3, #0]
 8005ca8:	4b06      	ldr	r3, [pc, #24]	@ (8005cc4 <send_DHCP_DECLINE+0x290>)
 8005caa:	6819      	ldr	r1, [r3, #0]
 8005cac:	1d3b      	adds	r3, r7, #4
 8005cae:	2243      	movs	r2, #67	@ 0x43
 8005cb0:	9200      	str	r2, [sp, #0]
 8005cb2:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8005cb6:	f7fd ff1f 	bl	8003af8 <sendto>
}
 8005cba:	bf00      	nop
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000a28 	.word	0x20000a28
 8005cc8:	20000a2c 	.word	0x20000a2c
 8005ccc:	20000a0c 	.word	0x20000a0c
 8005cd0:	20000a00 	.word	0x20000a00
 8005cd4:	200009fd 	.word	0x200009fd

08005cd8 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8005cd8:	b590      	push	{r4, r7, lr}
 8005cda:	b089      	sub	sp, #36	@ 0x24
 8005cdc:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8005ce2:	4ba1      	ldr	r3, [pc, #644]	@ (8005f68 <parseDHCPMSG+0x290>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fd fc6a 	bl	80035c0 <getSn_RX_RSR>
 8005cec:	4603      	mov	r3, r0
 8005cee:	823b      	strh	r3, [r7, #16]
 8005cf0:	8a3b      	ldrh	r3, [r7, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d011      	beq.n	8005d1a <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8005cf6:	4b9c      	ldr	r3, [pc, #624]	@ (8005f68 <parseDHCPMSG+0x290>)
 8005cf8:	7818      	ldrb	r0, [r3, #0]
 8005cfa:	4b9c      	ldr	r3, [pc, #624]	@ (8005f6c <parseDHCPMSG+0x294>)
 8005cfc:	6819      	ldr	r1, [r3, #0]
 8005cfe:	1d3c      	adds	r4, r7, #4
 8005d00:	8a3a      	ldrh	r2, [r7, #16]
 8005d02:	1cbb      	adds	r3, r7, #2
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	4623      	mov	r3, r4
 8005d08:	f7fe f8ee 	bl	8003ee8 <recvfrom>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8005d10:	887b      	ldrh	r3, [r7, #2]
 8005d12:	2b43      	cmp	r3, #67	@ 0x43
 8005d14:	f040 81ed 	bne.w	80060f2 <parseDHCPMSG+0x41a>
 8005d18:	e001      	b.n	8005d1e <parseDHCPMSG+0x46>
   else return 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e1eb      	b.n	80060f6 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8005d1e:	4b93      	ldr	r3, [pc, #588]	@ (8005f6c <parseDHCPMSG+0x294>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	7f1a      	ldrb	r2, [r3, #28]
 8005d24:	4b92      	ldr	r3, [pc, #584]	@ (8005f70 <parseDHCPMSG+0x298>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d124      	bne.n	8005d76 <parseDHCPMSG+0x9e>
 8005d2c:	4b8f      	ldr	r3, [pc, #572]	@ (8005f6c <parseDHCPMSG+0x294>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	7f5a      	ldrb	r2, [r3, #29]
 8005d32:	4b8f      	ldr	r3, [pc, #572]	@ (8005f70 <parseDHCPMSG+0x298>)
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d11d      	bne.n	8005d76 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8005d3a:	4b8c      	ldr	r3, [pc, #560]	@ (8005f6c <parseDHCPMSG+0x294>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	7f9a      	ldrb	r2, [r3, #30]
 8005d40:	4b8b      	ldr	r3, [pc, #556]	@ (8005f70 <parseDHCPMSG+0x298>)
 8005d42:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d116      	bne.n	8005d76 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8005d48:	4b88      	ldr	r3, [pc, #544]	@ (8005f6c <parseDHCPMSG+0x294>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	7fda      	ldrb	r2, [r3, #31]
 8005d4e:	4b88      	ldr	r3, [pc, #544]	@ (8005f70 <parseDHCPMSG+0x298>)
 8005d50:	78db      	ldrb	r3, [r3, #3]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d10f      	bne.n	8005d76 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8005d56:	4b85      	ldr	r3, [pc, #532]	@ (8005f6c <parseDHCPMSG+0x294>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005d5e:	4b84      	ldr	r3, [pc, #528]	@ (8005f70 <parseDHCPMSG+0x298>)
 8005d60:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d107      	bne.n	8005d76 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8005d66:	4b81      	ldr	r3, [pc, #516]	@ (8005f6c <parseDHCPMSG+0x294>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8005d6e:	4b80      	ldr	r3, [pc, #512]	@ (8005f70 <parseDHCPMSG+0x298>)
 8005d70:	795b      	ldrb	r3, [r3, #5]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d001      	beq.n	8005d7a <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	e1bd      	b.n	80060f6 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8005d7a:	4b7e      	ldr	r3, [pc, #504]	@ (8005f74 <parseDHCPMSG+0x29c>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10b      	bne.n	8005d9a <parseDHCPMSG+0xc2>
 8005d82:	4b7c      	ldr	r3, [pc, #496]	@ (8005f74 <parseDHCPMSG+0x29c>)
 8005d84:	785b      	ldrb	r3, [r3, #1]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d107      	bne.n	8005d9a <parseDHCPMSG+0xc2>
 8005d8a:	4b7a      	ldr	r3, [pc, #488]	@ (8005f74 <parseDHCPMSG+0x29c>)
 8005d8c:	789b      	ldrb	r3, [r3, #2]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d103      	bne.n	8005d9a <parseDHCPMSG+0xc2>
 8005d92:	4b78      	ldr	r3, [pc, #480]	@ (8005f74 <parseDHCPMSG+0x29c>)
 8005d94:	78db      	ldrb	r3, [r3, #3]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d029      	beq.n	8005dee <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8005d9a:	793a      	ldrb	r2, [r7, #4]
 8005d9c:	4b75      	ldr	r3, [pc, #468]	@ (8005f74 <parseDHCPMSG+0x29c>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d10e      	bne.n	8005dc2 <parseDHCPMSG+0xea>
 8005da4:	797a      	ldrb	r2, [r7, #5]
 8005da6:	4b73      	ldr	r3, [pc, #460]	@ (8005f74 <parseDHCPMSG+0x29c>)
 8005da8:	785b      	ldrb	r3, [r3, #1]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d109      	bne.n	8005dc2 <parseDHCPMSG+0xea>
 8005dae:	79ba      	ldrb	r2, [r7, #6]
 8005db0:	4b70      	ldr	r3, [pc, #448]	@ (8005f74 <parseDHCPMSG+0x29c>)
 8005db2:	789b      	ldrb	r3, [r3, #2]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d104      	bne.n	8005dc2 <parseDHCPMSG+0xea>
 8005db8:	79fa      	ldrb	r2, [r7, #7]
 8005dba:	4b6e      	ldr	r3, [pc, #440]	@ (8005f74 <parseDHCPMSG+0x29c>)
 8005dbc:	78db      	ldrb	r3, [r3, #3]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d015      	beq.n	8005dee <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8005dc2:	793a      	ldrb	r2, [r7, #4]
 8005dc4:	4b6c      	ldr	r3, [pc, #432]	@ (8005f78 <parseDHCPMSG+0x2a0>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d10e      	bne.n	8005dea <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8005dcc:	797a      	ldrb	r2, [r7, #5]
 8005dce:	4b6a      	ldr	r3, [pc, #424]	@ (8005f78 <parseDHCPMSG+0x2a0>)
 8005dd0:	785b      	ldrb	r3, [r3, #1]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d109      	bne.n	8005dea <parseDHCPMSG+0x112>
 8005dd6:	79ba      	ldrb	r2, [r7, #6]
 8005dd8:	4b67      	ldr	r3, [pc, #412]	@ (8005f78 <parseDHCPMSG+0x2a0>)
 8005dda:	789b      	ldrb	r3, [r3, #2]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d104      	bne.n	8005dea <parseDHCPMSG+0x112>
 8005de0:	79fa      	ldrb	r2, [r7, #7]
 8005de2:	4b65      	ldr	r3, [pc, #404]	@ (8005f78 <parseDHCPMSG+0x2a0>)
 8005de4:	78db      	ldrb	r3, [r3, #3]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d001      	beq.n	8005dee <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	e183      	b.n	80060f6 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8005dee:	4b5f      	ldr	r3, [pc, #380]	@ (8005f6c <parseDHCPMSG+0x294>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	33f0      	adds	r3, #240	@ 0xf0
 8005df8:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8005dfa:	8a3b      	ldrh	r3, [r7, #16]
 8005dfc:	3bf0      	subs	r3, #240	@ 0xf0
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	4413      	add	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8005e04:	e170      	b.n	80060e8 <parseDHCPMSG+0x410>

			switch ( *p ) {
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b36      	cmp	r3, #54	@ 0x36
 8005e0c:	dc76      	bgt.n	8005efc <parseDHCPMSG+0x224>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f2c0 815d 	blt.w	80060ce <parseDHCPMSG+0x3f6>
 8005e14:	2b36      	cmp	r3, #54	@ 0x36
 8005e16:	f200 815a 	bhi.w	80060ce <parseDHCPMSG+0x3f6>
 8005e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e20 <parseDHCPMSG+0x148>)
 8005e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e20:	08005f09 	.word	0x08005f09
 8005e24:	08005f29 	.word	0x08005f29
 8005e28:	080060cf 	.word	0x080060cf
 8005e2c:	08005f81 	.word	0x08005f81
 8005e30:	080060cf 	.word	0x080060cf
 8005e34:	080060cf 	.word	0x080060cf
 8005e38:	08005fcd 	.word	0x08005fcd
 8005e3c:	080060cf 	.word	0x080060cf
 8005e40:	080060cf 	.word	0x080060cf
 8005e44:	080060cf 	.word	0x080060cf
 8005e48:	080060cf 	.word	0x080060cf
 8005e4c:	080060cf 	.word	0x080060cf
 8005e50:	080060cf 	.word	0x080060cf
 8005e54:	080060cf 	.word	0x080060cf
 8005e58:	080060cf 	.word	0x080060cf
 8005e5c:	080060cf 	.word	0x080060cf
 8005e60:	080060cf 	.word	0x080060cf
 8005e64:	080060cf 	.word	0x080060cf
 8005e68:	080060cf 	.word	0x080060cf
 8005e6c:	080060cf 	.word	0x080060cf
 8005e70:	080060cf 	.word	0x080060cf
 8005e74:	080060cf 	.word	0x080060cf
 8005e78:	080060cf 	.word	0x080060cf
 8005e7c:	080060cf 	.word	0x080060cf
 8005e80:	080060cf 	.word	0x080060cf
 8005e84:	080060cf 	.word	0x080060cf
 8005e88:	080060cf 	.word	0x080060cf
 8005e8c:	080060cf 	.word	0x080060cf
 8005e90:	080060cf 	.word	0x080060cf
 8005e94:	080060cf 	.word	0x080060cf
 8005e98:	080060cf 	.word	0x080060cf
 8005e9c:	080060cf 	.word	0x080060cf
 8005ea0:	080060cf 	.word	0x080060cf
 8005ea4:	080060cf 	.word	0x080060cf
 8005ea8:	080060cf 	.word	0x080060cf
 8005eac:	080060cf 	.word	0x080060cf
 8005eb0:	080060cf 	.word	0x080060cf
 8005eb4:	080060cf 	.word	0x080060cf
 8005eb8:	080060cf 	.word	0x080060cf
 8005ebc:	080060cf 	.word	0x080060cf
 8005ec0:	080060cf 	.word	0x080060cf
 8005ec4:	080060cf 	.word	0x080060cf
 8005ec8:	080060cf 	.word	0x080060cf
 8005ecc:	080060cf 	.word	0x080060cf
 8005ed0:	080060cf 	.word	0x080060cf
 8005ed4:	080060cf 	.word	0x080060cf
 8005ed8:	080060cf 	.word	0x080060cf
 8005edc:	080060cf 	.word	0x080060cf
 8005ee0:	080060cf 	.word	0x080060cf
 8005ee4:	080060cf 	.word	0x080060cf
 8005ee8:	080060cf 	.word	0x080060cf
 8005eec:	08006019 	.word	0x08006019
 8005ef0:	080060cf 	.word	0x080060cf
 8005ef4:	08005f11 	.word	0x08005f11
 8005ef8:	08006075 	.word	0x08006075
 8005efc:	2bff      	cmp	r3, #255	@ 0xff
 8005efe:	f040 80e6 	bne.w	80060ce <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	617b      	str	r3, [r7, #20]
   				break;
 8005f06:	e0ef      	b.n	80060e8 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	617b      	str	r3, [r7, #20]
   				break;
 8005f0e:	e0eb      	b.n	80060e8 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	3301      	adds	r3, #1
 8005f14:	617b      	str	r3, [r7, #20]
   				p++;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	617a      	str	r2, [r7, #20]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	74fb      	strb	r3, [r7, #19]
   				break;
 8005f26:	e0df      	b.n	80060e8 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	617b      	str	r3, [r7, #20]
   				p++;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	3301      	adds	r3, #1
 8005f32:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	617a      	str	r2, [r7, #20]
 8005f3a:	781a      	ldrb	r2, [r3, #0]
 8005f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8005f7c <parseDHCPMSG+0x2a4>)
 8005f3e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	617a      	str	r2, [r7, #20]
 8005f46:	781a      	ldrb	r2, [r3, #0]
 8005f48:	4b0c      	ldr	r3, [pc, #48]	@ (8005f7c <parseDHCPMSG+0x2a4>)
 8005f4a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	617a      	str	r2, [r7, #20]
 8005f52:	781a      	ldrb	r2, [r3, #0]
 8005f54:	4b09      	ldr	r3, [pc, #36]	@ (8005f7c <parseDHCPMSG+0x2a4>)
 8005f56:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	617a      	str	r2, [r7, #20]
 8005f5e:	781a      	ldrb	r2, [r3, #0]
 8005f60:	4b06      	ldr	r3, [pc, #24]	@ (8005f7c <parseDHCPMSG+0x2a4>)
 8005f62:	70da      	strb	r2, [r3, #3]
   				break;
 8005f64:	e0c0      	b.n	80060e8 <parseDHCPMSG+0x410>
 8005f66:	bf00      	nop
 8005f68:	200009fd 	.word	0x200009fd
 8005f6c:	20000a28 	.word	0x20000a28
 8005f70:	20000a2c 	.word	0x20000a2c
 8005f74:	20000a00 	.word	0x20000a00
 8005f78:	20000a04 	.word	0x20000a04
 8005f7c:	20000a14 	.word	0x20000a14
   			case routersOnSubnet :
   				p++;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	3301      	adds	r3, #1
 8005f84:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	617a      	str	r2, [r7, #20]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	617a      	str	r2, [r7, #20]
 8005f96:	781a      	ldrb	r2, [r3, #0]
 8005f98:	4b59      	ldr	r3, [pc, #356]	@ (8006100 <parseDHCPMSG+0x428>)
 8005f9a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	617a      	str	r2, [r7, #20]
 8005fa2:	781a      	ldrb	r2, [r3, #0]
 8005fa4:	4b56      	ldr	r3, [pc, #344]	@ (8006100 <parseDHCPMSG+0x428>)
 8005fa6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	617a      	str	r2, [r7, #20]
 8005fae:	781a      	ldrb	r2, [r3, #0]
 8005fb0:	4b53      	ldr	r3, [pc, #332]	@ (8006100 <parseDHCPMSG+0x428>)
 8005fb2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	617a      	str	r2, [r7, #20]
 8005fba:	781a      	ldrb	r2, [r3, #0]
 8005fbc:	4b50      	ldr	r3, [pc, #320]	@ (8006100 <parseDHCPMSG+0x428>)
 8005fbe:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8005fc0:	7afb      	ldrb	r3, [r7, #11]
 8005fc2:	3b04      	subs	r3, #4
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]
   				break;
 8005fca:	e08d      	b.n	80060e8 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	617a      	str	r2, [r7, #20]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	617a      	str	r2, [r7, #20]
 8005fe2:	781a      	ldrb	r2, [r3, #0]
 8005fe4:	4b47      	ldr	r3, [pc, #284]	@ (8006104 <parseDHCPMSG+0x42c>)
 8005fe6:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	617a      	str	r2, [r7, #20]
 8005fee:	781a      	ldrb	r2, [r3, #0]
 8005ff0:	4b44      	ldr	r3, [pc, #272]	@ (8006104 <parseDHCPMSG+0x42c>)
 8005ff2:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	617a      	str	r2, [r7, #20]
 8005ffa:	781a      	ldrb	r2, [r3, #0]
 8005ffc:	4b41      	ldr	r3, [pc, #260]	@ (8006104 <parseDHCPMSG+0x42c>)
 8005ffe:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	617a      	str	r2, [r7, #20]
 8006006:	781a      	ldrb	r2, [r3, #0]
 8006008:	4b3e      	ldr	r3, [pc, #248]	@ (8006104 <parseDHCPMSG+0x42c>)
 800600a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800600c:	7afb      	ldrb	r3, [r7, #11]
 800600e:	3b04      	subs	r3, #4
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4413      	add	r3, r2
 8006014:	617b      	str	r3, [r7, #20]
   				break;
 8006016:	e067      	b.n	80060e8 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	3301      	adds	r3, #1
 800601c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	617a      	str	r2, [r7, #20]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	617a      	str	r2, [r7, #20]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	461a      	mov	r2, r3
 8006032:	4b35      	ldr	r3, [pc, #212]	@ (8006108 <parseDHCPMSG+0x430>)
 8006034:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8006036:	4b34      	ldr	r3, [pc, #208]	@ (8006108 <parseDHCPMSG+0x430>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	021a      	lsls	r2, r3, #8
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	1c59      	adds	r1, r3, #1
 8006040:	6179      	str	r1, [r7, #20]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	4413      	add	r3, r2
 8006046:	4a30      	ldr	r2, [pc, #192]	@ (8006108 <parseDHCPMSG+0x430>)
 8006048:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800604a:	4b2f      	ldr	r3, [pc, #188]	@ (8006108 <parseDHCPMSG+0x430>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	021a      	lsls	r2, r3, #8
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	1c59      	adds	r1, r3, #1
 8006054:	6179      	str	r1, [r7, #20]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	4413      	add	r3, r2
 800605a:	4a2b      	ldr	r2, [pc, #172]	@ (8006108 <parseDHCPMSG+0x430>)
 800605c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800605e:	4b2a      	ldr	r3, [pc, #168]	@ (8006108 <parseDHCPMSG+0x430>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	021a      	lsls	r2, r3, #8
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	1c59      	adds	r1, r3, #1
 8006068:	6179      	str	r1, [r7, #20]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	4413      	add	r3, r2
 800606e:	4a26      	ldr	r2, [pc, #152]	@ (8006108 <parseDHCPMSG+0x430>)
 8006070:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8006072:	e039      	b.n	80060e8 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	3301      	adds	r3, #1
 8006078:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	617a      	str	r2, [r7, #20]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	617a      	str	r2, [r7, #20]
 800608a:	781a      	ldrb	r2, [r3, #0]
 800608c:	4b1f      	ldr	r3, [pc, #124]	@ (800610c <parseDHCPMSG+0x434>)
 800608e:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	617a      	str	r2, [r7, #20]
 8006096:	781a      	ldrb	r2, [r3, #0]
 8006098:	4b1c      	ldr	r3, [pc, #112]	@ (800610c <parseDHCPMSG+0x434>)
 800609a:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	617a      	str	r2, [r7, #20]
 80060a2:	781a      	ldrb	r2, [r3, #0]
 80060a4:	4b19      	ldr	r3, [pc, #100]	@ (800610c <parseDHCPMSG+0x434>)
 80060a6:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	617a      	str	r2, [r7, #20]
 80060ae:	781a      	ldrb	r2, [r3, #0]
 80060b0:	4b16      	ldr	r3, [pc, #88]	@ (800610c <parseDHCPMSG+0x434>)
 80060b2:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 80060b4:	793a      	ldrb	r2, [r7, #4]
 80060b6:	4b16      	ldr	r3, [pc, #88]	@ (8006110 <parseDHCPMSG+0x438>)
 80060b8:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 80060ba:	797a      	ldrb	r2, [r7, #5]
 80060bc:	4b14      	ldr	r3, [pc, #80]	@ (8006110 <parseDHCPMSG+0x438>)
 80060be:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 80060c0:	79ba      	ldrb	r2, [r7, #6]
 80060c2:	4b13      	ldr	r3, [pc, #76]	@ (8006110 <parseDHCPMSG+0x438>)
 80060c4:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 80060c6:	79fa      	ldrb	r2, [r7, #7]
 80060c8:	4b11      	ldr	r3, [pc, #68]	@ (8006110 <parseDHCPMSG+0x438>)
 80060ca:	70da      	strb	r2, [r3, #3]
   				break;
 80060cc:	e00c      	b.n	80060e8 <parseDHCPMSG+0x410>
   			default :
   				p++;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	3301      	adds	r3, #1
 80060d2:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	617a      	str	r2, [r7, #20]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 80060de:	7afb      	ldrb	r3, [r7, #11]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	4413      	add	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]
   				break;
 80060e6:	bf00      	nop
		while ( p < e ) {
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	f4ff ae8a 	bcc.w	8005e06 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 80060f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd90      	pop	{r4, r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000a10 	.word	0x20000a10
 8006104:	20000a18 	.word	0x20000a18
 8006108:	20000050 	.word	0x20000050
 800610c:	20000a00 	.word	0x20000a00
 8006110:	20000a04 	.word	0x20000a04

08006114 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 800611a:	4b7e      	ldr	r3, [pc, #504]	@ (8006314 <DHCP_run+0x200>)
 800611c:	f993 3000 	ldrsb.w	r3, [r3]
 8006120:	2b06      	cmp	r3, #6
 8006122:	d101      	bne.n	8006128 <DHCP_run+0x14>
 8006124:	2305      	movs	r3, #5
 8006126:	e0f1      	b.n	800630c <DHCP_run+0x1f8>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8006128:	4b7b      	ldr	r3, [pc, #492]	@ (8006318 <DHCP_run+0x204>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	3308      	adds	r3, #8
 800612e:	019b      	lsls	r3, r3, #6
 8006130:	3308      	adds	r3, #8
 8006132:	4618      	mov	r0, r3
 8006134:	f7fd f95c 	bl	80033f0 <WIZCHIP_READ>
 8006138:	4603      	mov	r3, r0
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b22      	cmp	r3, #34	@ 0x22
 800613e:	d006      	beq.n	800614e <DHCP_run+0x3a>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8006140:	4b75      	ldr	r3, [pc, #468]	@ (8006318 <DHCP_run+0x204>)
 8006142:	7818      	ldrb	r0, [r3, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	2244      	movs	r2, #68	@ 0x44
 8006148:	2102      	movs	r1, #2
 800614a:	f7fd fafd 	bl	8003748 <socket>

	ret = DHCP_RUNNING;
 800614e:	2301      	movs	r3, #1
 8006150:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8006152:	f7ff fdc1 	bl	8005cd8 <parseDHCPMSG>
 8006156:	4603      	mov	r3, r0
 8006158:	71bb      	strb	r3, [r7, #6]
	switch ( dhcp_state ) {
 800615a:	4b6e      	ldr	r3, [pc, #440]	@ (8006314 <DHCP_run+0x200>)
 800615c:	f993 3000 	ldrsb.w	r3, [r3]
 8006160:	2b04      	cmp	r3, #4
 8006162:	f200 80cf 	bhi.w	8006304 <DHCP_run+0x1f0>
 8006166:	a201      	add	r2, pc, #4	@ (adr r2, 800616c <DHCP_run+0x58>)
 8006168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616c:	08006181 	.word	0x08006181
 8006170:	080061a5 	.word	0x080061a5
 8006174:	080061e9 	.word	0x080061e9
 8006178:	08006239 	.word	0x08006239
 800617c:	08006293 	.word	0x08006293
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8006180:	4b66      	ldr	r3, [pc, #408]	@ (800631c <DHCP_run+0x208>)
 8006182:	2200      	movs	r2, #0
 8006184:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8006186:	4b65      	ldr	r3, [pc, #404]	@ (800631c <DHCP_run+0x208>)
 8006188:	2200      	movs	r2, #0
 800618a:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 800618c:	4b63      	ldr	r3, [pc, #396]	@ (800631c <DHCP_run+0x208>)
 800618e:	2200      	movs	r2, #0
 8006190:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8006192:	4b62      	ldr	r3, [pc, #392]	@ (800631c <DHCP_run+0x208>)
 8006194:	2200      	movs	r2, #0
 8006196:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8006198:	f7fe fffc 	bl	8005194 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 800619c:	4b5d      	ldr	r3, [pc, #372]	@ (8006314 <DHCP_run+0x200>)
 800619e:	2201      	movs	r2, #1
 80061a0:	701a      	strb	r2, [r3, #0]
   		break;
 80061a2:	e0b2      	b.n	800630a <DHCP_run+0x1f6>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 80061a4:	79bb      	ldrb	r3, [r7, #6]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d119      	bne.n	80061de <DHCP_run+0xca>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 80061aa:	4b5d      	ldr	r3, [pc, #372]	@ (8006320 <DHCP_run+0x20c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	7c1a      	ldrb	r2, [r3, #16]
 80061b0:	4b5a      	ldr	r3, [pc, #360]	@ (800631c <DHCP_run+0x208>)
 80061b2:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 80061b4:	4b5a      	ldr	r3, [pc, #360]	@ (8006320 <DHCP_run+0x20c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	7c5a      	ldrb	r2, [r3, #17]
 80061ba:	4b58      	ldr	r3, [pc, #352]	@ (800631c <DHCP_run+0x208>)
 80061bc:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 80061be:	4b58      	ldr	r3, [pc, #352]	@ (8006320 <DHCP_run+0x20c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	7c9a      	ldrb	r2, [r3, #18]
 80061c4:	4b55      	ldr	r3, [pc, #340]	@ (800631c <DHCP_run+0x208>)
 80061c6:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 80061c8:	4b55      	ldr	r3, [pc, #340]	@ (8006320 <DHCP_run+0x20c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	7cda      	ldrb	r2, [r3, #19]
 80061ce:	4b53      	ldr	r3, [pc, #332]	@ (800631c <DHCP_run+0x208>)
 80061d0:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 80061d2:	f7ff f9a5 	bl	8005520 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 80061d6:	4b4f      	ldr	r3, [pc, #316]	@ (8006314 <DHCP_run+0x200>)
 80061d8:	2202      	movs	r2, #2
 80061da:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 80061dc:	e095      	b.n	800630a <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 80061de:	f000 f8c1 	bl	8006364 <check_DHCP_timeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	71fb      	strb	r3, [r7, #7]
         break;
 80061e6:	e090      	b.n	800630a <DHCP_run+0x1f6>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 80061e8:	79bb      	ldrb	r3, [r7, #6]
 80061ea:	2b05      	cmp	r3, #5
 80061ec:	d116      	bne.n	800621c <DHCP_run+0x108>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 80061ee:	f000 f919 	bl	8006424 <check_DHCP_leasedIP>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d008      	beq.n	800620a <DHCP_run+0xf6>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 80061f8:	4b4a      	ldr	r3, [pc, #296]	@ (8006324 <DHCP_run+0x210>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4798      	blx	r3
					reset_DHCP_timeout();
 80061fe:	f000 fa41 	bl	8006684 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8006202:	4b44      	ldr	r3, [pc, #272]	@ (8006314 <DHCP_run+0x200>)
 8006204:	2203      	movs	r2, #3
 8006206:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8006208:	e07f      	b.n	800630a <DHCP_run+0x1f6>
					reset_DHCP_timeout();
 800620a:	f000 fa3b 	bl	8006684 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 800620e:	4b46      	ldr	r3, [pc, #280]	@ (8006328 <DHCP_run+0x214>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8006214:	4b3f      	ldr	r3, [pc, #252]	@ (8006314 <DHCP_run+0x200>)
 8006216:	2200      	movs	r2, #0
 8006218:	701a      	strb	r2, [r3, #0]
		break;
 800621a:	e076      	b.n	800630a <DHCP_run+0x1f6>
			} else if (type == DHCP_NAK) {
 800621c:	79bb      	ldrb	r3, [r7, #6]
 800621e:	2b06      	cmp	r3, #6
 8006220:	d105      	bne.n	800622e <DHCP_run+0x11a>
				reset_DHCP_timeout();
 8006222:	f000 fa2f 	bl	8006684 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8006226:	4b3b      	ldr	r3, [pc, #236]	@ (8006314 <DHCP_run+0x200>)
 8006228:	2201      	movs	r2, #1
 800622a:	701a      	strb	r2, [r3, #0]
		break;
 800622c:	e06d      	b.n	800630a <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 800622e:	f000 f899 	bl	8006364 <check_DHCP_timeout>
 8006232:	4603      	mov	r3, r0
 8006234:	71fb      	strb	r3, [r7, #7]
		break;
 8006236:	e068      	b.n	800630a <DHCP_run+0x1f6>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8006238:	2304      	movs	r3, #4
 800623a:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 800623c:	4b3b      	ldr	r3, [pc, #236]	@ (800632c <DHCP_run+0x218>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006244:	d060      	beq.n	8006308 <DHCP_run+0x1f4>
 8006246:	4b39      	ldr	r3, [pc, #228]	@ (800632c <DHCP_run+0x218>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	085a      	lsrs	r2, r3, #1
 800624c:	4b38      	ldr	r3, [pc, #224]	@ (8006330 <DHCP_run+0x21c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d259      	bcs.n	8006308 <DHCP_run+0x1f4>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8006254:	2300      	movs	r3, #0
 8006256:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8006258:	4b30      	ldr	r3, [pc, #192]	@ (800631c <DHCP_run+0x208>)
 800625a:	781a      	ldrb	r2, [r3, #0]
 800625c:	4b35      	ldr	r3, [pc, #212]	@ (8006334 <DHCP_run+0x220>)
 800625e:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8006260:	4b2e      	ldr	r3, [pc, #184]	@ (800631c <DHCP_run+0x208>)
 8006262:	785a      	ldrb	r2, [r3, #1]
 8006264:	4b33      	ldr	r3, [pc, #204]	@ (8006334 <DHCP_run+0x220>)
 8006266:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8006268:	4b2c      	ldr	r3, [pc, #176]	@ (800631c <DHCP_run+0x208>)
 800626a:	789a      	ldrb	r2, [r3, #2]
 800626c:	4b31      	ldr	r3, [pc, #196]	@ (8006334 <DHCP_run+0x220>)
 800626e:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8006270:	4b2a      	ldr	r3, [pc, #168]	@ (800631c <DHCP_run+0x208>)
 8006272:	78da      	ldrb	r2, [r3, #3]
 8006274:	4b2f      	ldr	r3, [pc, #188]	@ (8006334 <DHCP_run+0x220>)
 8006276:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8006278:	4b2f      	ldr	r3, [pc, #188]	@ (8006338 <DHCP_run+0x224>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3301      	adds	r3, #1
 800627e:	4a2e      	ldr	r2, [pc, #184]	@ (8006338 <DHCP_run+0x224>)
 8006280:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8006282:	f7ff f94d 	bl	8005520 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8006286:	f000 f9fd 	bl	8006684 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800628a:	4b22      	ldr	r3, [pc, #136]	@ (8006314 <DHCP_run+0x200>)
 800628c:	2204      	movs	r2, #4
 800628e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8006290:	e03a      	b.n	8006308 <DHCP_run+0x1f4>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8006292:	2304      	movs	r3, #4
 8006294:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8006296:	79bb      	ldrb	r3, [r7, #6]
 8006298:	2b05      	cmp	r3, #5
 800629a:	d125      	bne.n	80062e8 <DHCP_run+0x1d4>
				dhcp_retry_count = 0;
 800629c:	4b27      	ldr	r3, [pc, #156]	@ (800633c <DHCP_run+0x228>)
 800629e:	2200      	movs	r2, #0
 80062a0:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80062a2:	4b24      	ldr	r3, [pc, #144]	@ (8006334 <DHCP_run+0x220>)
 80062a4:	781a      	ldrb	r2, [r3, #0]
 80062a6:	4b1d      	ldr	r3, [pc, #116]	@ (800631c <DHCP_run+0x208>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d111      	bne.n	80062d2 <DHCP_run+0x1be>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80062ae:	4b21      	ldr	r3, [pc, #132]	@ (8006334 <DHCP_run+0x220>)
 80062b0:	785a      	ldrb	r2, [r3, #1]
 80062b2:	4b1a      	ldr	r3, [pc, #104]	@ (800631c <DHCP_run+0x208>)
 80062b4:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d10b      	bne.n	80062d2 <DHCP_run+0x1be>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80062ba:	4b1e      	ldr	r3, [pc, #120]	@ (8006334 <DHCP_run+0x220>)
 80062bc:	789a      	ldrb	r2, [r3, #2]
 80062be:	4b17      	ldr	r3, [pc, #92]	@ (800631c <DHCP_run+0x208>)
 80062c0:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d105      	bne.n	80062d2 <DHCP_run+0x1be>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 80062c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006334 <DHCP_run+0x220>)
 80062c8:	78da      	ldrb	r2, [r3, #3]
 80062ca:	4b14      	ldr	r3, [pc, #80]	@ (800631c <DHCP_run+0x208>)
 80062cc:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d004      	beq.n	80062dc <DHCP_run+0x1c8>
				{
					ret = DHCP_IP_CHANGED;
 80062d2:	2303      	movs	r3, #3
 80062d4:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 80062d6:	4b1a      	ldr	r3, [pc, #104]	@ (8006340 <DHCP_run+0x22c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 80062dc:	f000 f9d2 	bl	8006684 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 80062e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006314 <DHCP_run+0x200>)
 80062e2:	2203      	movs	r2, #3
 80062e4:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 80062e6:	e010      	b.n	800630a <DHCP_run+0x1f6>
			} else if (type == DHCP_NAK) {
 80062e8:	79bb      	ldrb	r3, [r7, #6]
 80062ea:	2b06      	cmp	r3, #6
 80062ec:	d105      	bne.n	80062fa <DHCP_run+0x1e6>
				reset_DHCP_timeout();
 80062ee:	f000 f9c9 	bl	8006684 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80062f2:	4b08      	ldr	r3, [pc, #32]	@ (8006314 <DHCP_run+0x200>)
 80062f4:	2201      	movs	r2, #1
 80062f6:	701a      	strb	r2, [r3, #0]
	   	break;
 80062f8:	e007      	b.n	800630a <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 80062fa:	f000 f833 	bl	8006364 <check_DHCP_timeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	71fb      	strb	r3, [r7, #7]
	   	break;
 8006302:	e002      	b.n	800630a <DHCP_run+0x1f6>
		default :
   		break;
 8006304:	bf00      	nop
 8006306:	e000      	b.n	800630a <DHCP_run+0x1f6>
		break;
 8006308:	bf00      	nop
	}

	return ret;
 800630a:	79fb      	ldrb	r3, [r7, #7]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	20000a1c 	.word	0x20000a1c
 8006318:	200009fd 	.word	0x200009fd
 800631c:	20000a0c 	.word	0x20000a0c
 8006320:	20000a28 	.word	0x20000a28
 8006324:	20000060 	.word	0x20000060
 8006328:	20000068 	.word	0x20000068
 800632c:	20000050 	.word	0x20000050
 8006330:	20000a20 	.word	0x20000a20
 8006334:	20000a08 	.word	0x20000a08
 8006338:	20000a24 	.word	0x20000a24
 800633c:	20000a1d 	.word	0x20000a1d
 8006340:	20000064 	.word	0x20000064

08006344 <DHCP_stop>:

void    DHCP_stop(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
   close(DHCP_SOCKET);
 8006348:	4b04      	ldr	r3, [pc, #16]	@ (800635c <DHCP_stop+0x18>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	4618      	mov	r0, r3
 800634e:	f7fd fb15 	bl	800397c <close>
   dhcp_state = STATE_DHCP_STOP;
 8006352:	4b03      	ldr	r3, [pc, #12]	@ (8006360 <DHCP_stop+0x1c>)
 8006354:	2206      	movs	r2, #6
 8006356:	701a      	strb	r2, [r3, #0]
}
 8006358:	bf00      	nop
 800635a:	bd80      	pop	{r7, pc}
 800635c:	200009fd 	.word	0x200009fd
 8006360:	20000a1c 	.word	0x20000a1c

08006364 <check_DHCP_timeout>:

uint8_t check_DHCP_timeout(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 800636a:	2301      	movs	r3, #1
 800636c:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 800636e:	4b29      	ldr	r3, [pc, #164]	@ (8006414 <check_DHCP_timeout+0xb0>)
 8006370:	f993 3000 	ldrsb.w	r3, [r3]
 8006374:	2b01      	cmp	r3, #1
 8006376:	dc2d      	bgt.n	80063d4 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8006378:	4b27      	ldr	r3, [pc, #156]	@ (8006418 <check_DHCP_timeout+0xb4>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	4b27      	ldr	r3, [pc, #156]	@ (800641c <check_DHCP_timeout+0xb8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	429a      	cmp	r2, r3
 8006382:	d242      	bcs.n	800640a <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8006384:	4b26      	ldr	r3, [pc, #152]	@ (8006420 <check_DHCP_timeout+0xbc>)
 8006386:	f993 3000 	ldrsb.w	r3, [r3]
 800638a:	2b04      	cmp	r3, #4
 800638c:	d00c      	beq.n	80063a8 <check_DHCP_timeout+0x44>
 800638e:	2b04      	cmp	r3, #4
 8006390:	dc0d      	bgt.n	80063ae <check_DHCP_timeout+0x4a>
 8006392:	2b01      	cmp	r3, #1
 8006394:	d002      	beq.n	800639c <check_DHCP_timeout+0x38>
 8006396:	2b02      	cmp	r3, #2
 8006398:	d003      	beq.n	80063a2 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 800639a:	e008      	b.n	80063ae <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 800639c:	f7fe fefa 	bl	8005194 <send_DHCP_DISCOVER>
				break;
 80063a0:	e006      	b.n	80063b0 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80063a2:	f7ff f8bd 	bl	8005520 <send_DHCP_REQUEST>
				break;
 80063a6:	e003      	b.n	80063b0 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80063a8:	f7ff f8ba 	bl	8005520 <send_DHCP_REQUEST>
				break;
 80063ac:	e000      	b.n	80063b0 <check_DHCP_timeout+0x4c>
				break;
 80063ae:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 80063b0:	4b1a      	ldr	r3, [pc, #104]	@ (800641c <check_DHCP_timeout+0xb8>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80063b6:	4b19      	ldr	r3, [pc, #100]	@ (800641c <check_DHCP_timeout+0xb8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	330a      	adds	r3, #10
 80063bc:	4a16      	ldr	r2, [pc, #88]	@ (8006418 <check_DHCP_timeout+0xb4>)
 80063be:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 80063c0:	4b14      	ldr	r3, [pc, #80]	@ (8006414 <check_DHCP_timeout+0xb0>)
 80063c2:	f993 3000 	ldrsb.w	r3, [r3]
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	3301      	adds	r3, #1
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	b25a      	sxtb	r2, r3
 80063ce:	4b11      	ldr	r3, [pc, #68]	@ (8006414 <check_DHCP_timeout+0xb0>)
 80063d0:	701a      	strb	r2, [r3, #0]
 80063d2:	e01a      	b.n	800640a <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 80063d4:	4b12      	ldr	r3, [pc, #72]	@ (8006420 <check_DHCP_timeout+0xbc>)
 80063d6:	f993 3000 	ldrsb.w	r3, [r3]
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d00c      	beq.n	80063f8 <check_DHCP_timeout+0x94>
 80063de:	2b04      	cmp	r3, #4
 80063e0:	dc10      	bgt.n	8006404 <check_DHCP_timeout+0xa0>
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d002      	beq.n	80063ec <check_DHCP_timeout+0x88>
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d006      	beq.n	80063f8 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 80063ea:	e00b      	b.n	8006404 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 80063ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006420 <check_DHCP_timeout+0xbc>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 80063f2:	2300      	movs	r3, #0
 80063f4:	71fb      	strb	r3, [r7, #7]
				break;
 80063f6:	e006      	b.n	8006406 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 80063f8:	f7fe fecc 	bl	8005194 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 80063fc:	4b08      	ldr	r3, [pc, #32]	@ (8006420 <check_DHCP_timeout+0xbc>)
 80063fe:	2201      	movs	r2, #1
 8006400:	701a      	strb	r2, [r3, #0]
				break;
 8006402:	e000      	b.n	8006406 <check_DHCP_timeout+0xa2>
				break;
 8006404:	bf00      	nop
		}
		reset_DHCP_timeout();
 8006406:	f000 f93d 	bl	8006684 <reset_DHCP_timeout>
	}
	return ret;
 800640a:	79fb      	ldrb	r3, [r7, #7]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	20000a1d 	.word	0x20000a1d
 8006418:	20000054 	.word	0x20000054
 800641c:	20000a20 	.word	0x20000a20
 8006420:	20000a1c 	.word	0x20000a1c

08006424 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800642a:	201e      	movs	r0, #30
 800642c:	f7fc ffe0 	bl	80033f0 <WIZCHIP_READ>
 8006430:	4603      	mov	r3, r0
 8006432:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8006434:	2103      	movs	r1, #3
 8006436:	201e      	movs	r0, #30
 8006438:	f7fc ffb0 	bl	800339c <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 800643c:	4b13      	ldr	r3, [pc, #76]	@ (800648c <check_DHCP_leasedIP+0x68>)
 800643e:	7818      	ldrb	r0, [r3, #0]
 8006440:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	4b12      	ldr	r3, [pc, #72]	@ (8006490 <check_DHCP_leasedIP+0x6c>)
 8006448:	2211      	movs	r2, #17
 800644a:	4912      	ldr	r1, [pc, #72]	@ (8006494 <check_DHCP_leasedIP+0x70>)
 800644c:	f7fd fb54 	bl	8003af8 <sendto>
 8006450:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8006452:	79fb      	ldrb	r3, [r7, #7]
 8006454:	b29b      	uxth	r3, r3
 8006456:	4619      	mov	r1, r3
 8006458:	201e      	movs	r0, #30
 800645a:	f7fc ff9f 	bl	800339c <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	f113 0f0d 	cmn.w	r3, #13
 8006464:	d101      	bne.n	800646a <check_DHCP_leasedIP+0x46>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8006466:	2301      	movs	r3, #1
 8006468:	e00c      	b.n	8006484 <check_DHCP_leasedIP+0x60>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 800646a:	f7ff fae3 	bl	8005a34 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 800646e:	4b0a      	ldr	r3, [pc, #40]	@ (8006498 <check_DHCP_leasedIP+0x74>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8006474:	bf00      	nop
 8006476:	4b08      	ldr	r3, [pc, #32]	@ (8006498 <check_DHCP_leasedIP+0x74>)
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b01      	cmp	r3, #1
 8006480:	d9f9      	bls.n	8006476 <check_DHCP_leasedIP+0x52>

		return 0;
 8006482:	2300      	movs	r3, #0
	}
}	
 8006484:	4618      	mov	r0, r3
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	200009fd 	.word	0x200009fd
 8006490:	20000a0c 	.word	0x20000a0c
 8006494:	08007a40 	.word	0x08007a40
 8006498:	20000a20 	.word	0x20000a20

0800649c <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	4603      	mov	r3, r0
 80064a4:	6039      	str	r1, [r7, #0]
 80064a6:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 80064ac:	2008      	movs	r0, #8
 80064ae:	f7fc ff9f 	bl	80033f0 <WIZCHIP_READ>
 80064b2:	4603      	mov	r3, r0
 80064b4:	0a1b      	lsrs	r3, r3, #8
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	4b6c      	ldr	r3, [pc, #432]	@ (800666c <DHCP_init+0x1d0>)
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	2008      	movs	r0, #8
 80064c0:	f7fc ff96 	bl	80033f0 <WIZCHIP_READ>
 80064c4:	4603      	mov	r3, r0
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	4b68      	ldr	r3, [pc, #416]	@ (800666c <DHCP_init+0x1d0>)
 80064ca:	705a      	strb	r2, [r3, #1]
 80064cc:	200a      	movs	r0, #10
 80064ce:	f7fc ff8f 	bl	80033f0 <WIZCHIP_READ>
 80064d2:	4603      	mov	r3, r0
 80064d4:	0a1b      	lsrs	r3, r3, #8
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	4b64      	ldr	r3, [pc, #400]	@ (800666c <DHCP_init+0x1d0>)
 80064dc:	709a      	strb	r2, [r3, #2]
 80064de:	200a      	movs	r0, #10
 80064e0:	f7fc ff86 	bl	80033f0 <WIZCHIP_READ>
 80064e4:	4603      	mov	r3, r0
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	4b60      	ldr	r3, [pc, #384]	@ (800666c <DHCP_init+0x1d0>)
 80064ea:	70da      	strb	r2, [r3, #3]
 80064ec:	200c      	movs	r0, #12
 80064ee:	f7fc ff7f 	bl	80033f0 <WIZCHIP_READ>
 80064f2:	4603      	mov	r3, r0
 80064f4:	0a1b      	lsrs	r3, r3, #8
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	4b5c      	ldr	r3, [pc, #368]	@ (800666c <DHCP_init+0x1d0>)
 80064fc:	711a      	strb	r2, [r3, #4]
 80064fe:	200c      	movs	r0, #12
 8006500:	f7fc ff76 	bl	80033f0 <WIZCHIP_READ>
 8006504:	4603      	mov	r3, r0
 8006506:	b2da      	uxtb	r2, r3
 8006508:	4b58      	ldr	r3, [pc, #352]	@ (800666c <DHCP_init+0x1d0>)
 800650a:	715a      	strb	r2, [r3, #5]
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 800650c:	4b57      	ldr	r3, [pc, #348]	@ (800666c <DHCP_init+0x1d0>)
 800650e:	781a      	ldrb	r2, [r3, #0]
 8006510:	4b56      	ldr	r3, [pc, #344]	@ (800666c <DHCP_init+0x1d0>)
 8006512:	785b      	ldrb	r3, [r3, #1]
 8006514:	4313      	orrs	r3, r2
 8006516:	b2da      	uxtb	r2, r3
 8006518:	4b54      	ldr	r3, [pc, #336]	@ (800666c <DHCP_init+0x1d0>)
 800651a:	789b      	ldrb	r3, [r3, #2]
 800651c:	4313      	orrs	r3, r2
 800651e:	b2da      	uxtb	r2, r3
 8006520:	4b52      	ldr	r3, [pc, #328]	@ (800666c <DHCP_init+0x1d0>)
 8006522:	78db      	ldrb	r3, [r3, #3]
 8006524:	4313      	orrs	r3, r2
 8006526:	b2da      	uxtb	r2, r3
 8006528:	4b50      	ldr	r3, [pc, #320]	@ (800666c <DHCP_init+0x1d0>)
 800652a:	791b      	ldrb	r3, [r3, #4]
 800652c:	4313      	orrs	r3, r2
 800652e:	b2da      	uxtb	r2, r3
 8006530:	4b4e      	ldr	r3, [pc, #312]	@ (800666c <DHCP_init+0x1d0>)
 8006532:	795b      	ldrb	r3, [r3, #5]
 8006534:	4313      	orrs	r3, r2
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d135      	bne.n	80065a8 <DHCP_init+0x10c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 800653c:	4b4b      	ldr	r3, [pc, #300]	@ (800666c <DHCP_init+0x1d0>)
 800653e:	2200      	movs	r2, #0
 8006540:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8006542:	4b4a      	ldr	r3, [pc, #296]	@ (800666c <DHCP_init+0x1d0>)
 8006544:	2208      	movs	r2, #8
 8006546:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8006548:	4b48      	ldr	r3, [pc, #288]	@ (800666c <DHCP_init+0x1d0>)
 800654a:	22dc      	movs	r2, #220	@ 0xdc
 800654c:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 800654e:	4b47      	ldr	r3, [pc, #284]	@ (800666c <DHCP_init+0x1d0>)
 8006550:	2200      	movs	r2, #0
 8006552:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8006554:	4b45      	ldr	r3, [pc, #276]	@ (800666c <DHCP_init+0x1d0>)
 8006556:	2200      	movs	r2, #0
 8006558:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 800655a:	4b44      	ldr	r3, [pc, #272]	@ (800666c <DHCP_init+0x1d0>)
 800655c:	2200      	movs	r2, #0
 800655e:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8006560:	4b42      	ldr	r3, [pc, #264]	@ (800666c <DHCP_init+0x1d0>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	021b      	lsls	r3, r3, #8
 8006566:	b29b      	uxth	r3, r3
 8006568:	4a40      	ldr	r2, [pc, #256]	@ (800666c <DHCP_init+0x1d0>)
 800656a:	7852      	ldrb	r2, [r2, #1]
 800656c:	4413      	add	r3, r2
 800656e:	b29b      	uxth	r3, r3
 8006570:	4619      	mov	r1, r3
 8006572:	2008      	movs	r0, #8
 8006574:	f7fc ff12 	bl	800339c <WIZCHIP_WRITE>
 8006578:	4b3c      	ldr	r3, [pc, #240]	@ (800666c <DHCP_init+0x1d0>)
 800657a:	789b      	ldrb	r3, [r3, #2]
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	b29b      	uxth	r3, r3
 8006580:	4a3a      	ldr	r2, [pc, #232]	@ (800666c <DHCP_init+0x1d0>)
 8006582:	78d2      	ldrb	r2, [r2, #3]
 8006584:	4413      	add	r3, r2
 8006586:	b29b      	uxth	r3, r3
 8006588:	4619      	mov	r1, r3
 800658a:	200a      	movs	r0, #10
 800658c:	f7fc ff06 	bl	800339c <WIZCHIP_WRITE>
 8006590:	4b36      	ldr	r3, [pc, #216]	@ (800666c <DHCP_init+0x1d0>)
 8006592:	791b      	ldrb	r3, [r3, #4]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	b29b      	uxth	r3, r3
 8006598:	4a34      	ldr	r2, [pc, #208]	@ (800666c <DHCP_init+0x1d0>)
 800659a:	7952      	ldrb	r2, [r2, #5]
 800659c:	4413      	add	r3, r2
 800659e:	b29b      	uxth	r3, r3
 80065a0:	4619      	mov	r1, r3
 80065a2:	200c      	movs	r0, #12
 80065a4:	f7fc fefa 	bl	800339c <WIZCHIP_WRITE>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 80065a8:	4a31      	ldr	r2, [pc, #196]	@ (8006670 <DHCP_init+0x1d4>)
 80065aa:	79fb      	ldrb	r3, [r7, #7]
 80065ac:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 80065ae:	4a31      	ldr	r2, [pc, #196]	@ (8006674 <DHCP_init+0x1d8>)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 80065b4:	4b30      	ldr	r3, [pc, #192]	@ (8006678 <DHCP_init+0x1dc>)
 80065b6:	4a31      	ldr	r2, [pc, #196]	@ (800667c <DHCP_init+0x1e0>)
 80065b8:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 80065ba:	4b2c      	ldr	r3, [pc, #176]	@ (800666c <DHCP_init+0x1d0>)
 80065bc:	78db      	ldrb	r3, [r3, #3]
 80065be:	461a      	mov	r2, r3
 80065c0:	4b2d      	ldr	r3, [pc, #180]	@ (8006678 <DHCP_init+0x1dc>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4413      	add	r3, r2
 80065c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006678 <DHCP_init+0x1dc>)
 80065c8:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 80065ca:	4b28      	ldr	r3, [pc, #160]	@ (800666c <DHCP_init+0x1d0>)
 80065cc:	791b      	ldrb	r3, [r3, #4]
 80065ce:	461a      	mov	r2, r3
 80065d0:	4b29      	ldr	r3, [pc, #164]	@ (8006678 <DHCP_init+0x1dc>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4413      	add	r3, r2
 80065d6:	4a28      	ldr	r2, [pc, #160]	@ (8006678 <DHCP_init+0x1dc>)
 80065d8:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 80065da:	4b24      	ldr	r3, [pc, #144]	@ (800666c <DHCP_init+0x1d0>)
 80065dc:	795b      	ldrb	r3, [r3, #5]
 80065de:	461a      	mov	r2, r3
 80065e0:	4b25      	ldr	r3, [pc, #148]	@ (8006678 <DHCP_init+0x1dc>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4413      	add	r3, r2
 80065e6:	4a24      	ldr	r2, [pc, #144]	@ (8006678 <DHCP_init+0x1dc>)
 80065e8:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 80065ea:	4b20      	ldr	r3, [pc, #128]	@ (800666c <DHCP_init+0x1d0>)
 80065ec:	78da      	ldrb	r2, [r3, #3]
 80065ee:	4b1f      	ldr	r3, [pc, #124]	@ (800666c <DHCP_init+0x1d0>)
 80065f0:	791b      	ldrb	r3, [r3, #4]
 80065f2:	4053      	eors	r3, r2
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	4b1d      	ldr	r3, [pc, #116]	@ (800666c <DHCP_init+0x1d0>)
 80065f8:	795b      	ldrb	r3, [r3, #5]
 80065fa:	4053      	eors	r3, r2
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	461a      	mov	r2, r3
 8006600:	4b1d      	ldr	r3, [pc, #116]	@ (8006678 <DHCP_init+0x1dc>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4413      	add	r3, r2
 8006606:	4a1c      	ldr	r2, [pc, #112]	@ (8006678 <DHCP_init+0x1dc>)
 8006608:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 800660a:	7b3b      	ldrb	r3, [r7, #12]
 800660c:	021b      	lsls	r3, r3, #8
 800660e:	b29b      	uxth	r3, r3
 8006610:	7b7a      	ldrb	r2, [r7, #13]
 8006612:	4413      	add	r3, r2
 8006614:	b29b      	uxth	r3, r3
 8006616:	4619      	mov	r1, r3
 8006618:	2018      	movs	r0, #24
 800661a:	f7fc febf 	bl	800339c <WIZCHIP_WRITE>
 800661e:	7bbb      	ldrb	r3, [r7, #14]
 8006620:	021b      	lsls	r3, r3, #8
 8006622:	b29b      	uxth	r3, r3
 8006624:	7bfa      	ldrb	r2, [r7, #15]
 8006626:	4413      	add	r3, r2
 8006628:	b29b      	uxth	r3, r3
 800662a:	4619      	mov	r1, r3
 800662c:	201a      	movs	r0, #26
 800662e:	f7fc feb5 	bl	800339c <WIZCHIP_WRITE>
	setGAR(zeroip);
 8006632:	7b3b      	ldrb	r3, [r7, #12]
 8006634:	021b      	lsls	r3, r3, #8
 8006636:	b29b      	uxth	r3, r3
 8006638:	7b7a      	ldrb	r2, [r7, #13]
 800663a:	4413      	add	r3, r2
 800663c:	b29b      	uxth	r3, r3
 800663e:	4619      	mov	r1, r3
 8006640:	2010      	movs	r0, #16
 8006642:	f7fc feab 	bl	800339c <WIZCHIP_WRITE>
 8006646:	7bbb      	ldrb	r3, [r7, #14]
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	b29b      	uxth	r3, r3
 800664c:	7bfa      	ldrb	r2, [r7, #15]
 800664e:	4413      	add	r3, r2
 8006650:	b29b      	uxth	r3, r3
 8006652:	4619      	mov	r1, r3
 8006654:	2012      	movs	r0, #18
 8006656:	f7fc fea1 	bl	800339c <WIZCHIP_WRITE>

	reset_DHCP_timeout();
 800665a:	f000 f813 	bl	8006684 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 800665e:	4b08      	ldr	r3, [pc, #32]	@ (8006680 <DHCP_init+0x1e4>)
 8006660:	2200      	movs	r2, #0
 8006662:	701a      	strb	r2, [r3, #0]
}
 8006664:	bf00      	nop
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	20000a2c 	.word	0x20000a2c
 8006670:	200009fd 	.word	0x200009fd
 8006674:	20000a28 	.word	0x20000a28
 8006678:	20000a24 	.word	0x20000a24
 800667c:	12345678 	.word	0x12345678
 8006680:	20000a1c 	.word	0x20000a1c

08006684 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8006684:	b480      	push	{r7}
 8006686:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8006688:	4b06      	ldr	r3, [pc, #24]	@ (80066a4 <reset_DHCP_timeout+0x20>)
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 800668e:	4b06      	ldr	r3, [pc, #24]	@ (80066a8 <reset_DHCP_timeout+0x24>)
 8006690:	220a      	movs	r2, #10
 8006692:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8006694:	4b05      	ldr	r3, [pc, #20]	@ (80066ac <reset_DHCP_timeout+0x28>)
 8006696:	2200      	movs	r2, #0
 8006698:	701a      	strb	r2, [r3, #0]
}
 800669a:	bf00      	nop
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	20000a20 	.word	0x20000a20
 80066a8:	20000054 	.word	0x20000054
 80066ac:	20000a1d 	.word	0x20000a1d

080066b0 <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 80066b8:	4b0c      	ldr	r3, [pc, #48]	@ (80066ec <getIPfromDHCP+0x3c>)
 80066ba:	781a      	ldrb	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3301      	adds	r3, #1
 80066c4:	4a09      	ldr	r2, [pc, #36]	@ (80066ec <getIPfromDHCP+0x3c>)
 80066c6:	7852      	ldrb	r2, [r2, #1]
 80066c8:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	3302      	adds	r3, #2
 80066ce:	4a07      	ldr	r2, [pc, #28]	@ (80066ec <getIPfromDHCP+0x3c>)
 80066d0:	7892      	ldrb	r2, [r2, #2]
 80066d2:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	3303      	adds	r3, #3
 80066d8:	4a04      	ldr	r2, [pc, #16]	@ (80066ec <getIPfromDHCP+0x3c>)
 80066da:	78d2      	ldrb	r2, [r2, #3]
 80066dc:	701a      	strb	r2, [r3, #0]
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	20000a0c 	.word	0x20000a0c

080066f0 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 80066f8:	4b0c      	ldr	r3, [pc, #48]	@ (800672c <getGWfromDHCP+0x3c>)
 80066fa:	781a      	ldrb	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3301      	adds	r3, #1
 8006704:	4a09      	ldr	r2, [pc, #36]	@ (800672c <getGWfromDHCP+0x3c>)
 8006706:	7852      	ldrb	r2, [r2, #1]
 8006708:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	3302      	adds	r3, #2
 800670e:	4a07      	ldr	r2, [pc, #28]	@ (800672c <getGWfromDHCP+0x3c>)
 8006710:	7892      	ldrb	r2, [r2, #2]
 8006712:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3303      	adds	r3, #3
 8006718:	4a04      	ldr	r2, [pc, #16]	@ (800672c <getGWfromDHCP+0x3c>)
 800671a:	78d2      	ldrb	r2, [r2, #3]
 800671c:	701a      	strb	r2, [r3, #0]
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	20000a10 	.word	0x20000a10

08006730 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8006738:	4b0c      	ldr	r3, [pc, #48]	@ (800676c <getSNfromDHCP+0x3c>)
 800673a:	781a      	ldrb	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3301      	adds	r3, #1
 8006744:	4a09      	ldr	r2, [pc, #36]	@ (800676c <getSNfromDHCP+0x3c>)
 8006746:	7852      	ldrb	r2, [r2, #1]
 8006748:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	3302      	adds	r3, #2
 800674e:	4a07      	ldr	r2, [pc, #28]	@ (800676c <getSNfromDHCP+0x3c>)
 8006750:	7892      	ldrb	r2, [r2, #2]
 8006752:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3303      	adds	r3, #3
 8006758:	4a04      	ldr	r2, [pc, #16]	@ (800676c <getSNfromDHCP+0x3c>)
 800675a:	78d2      	ldrb	r2, [r2, #3]
 800675c:	701a      	strb	r2, [r3, #0]
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000a14 	.word	0x20000a14

08006770 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 8006778:	4b0c      	ldr	r3, [pc, #48]	@ (80067ac <getDNSfromDHCP+0x3c>)
 800677a:	781a      	ldrb	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3301      	adds	r3, #1
 8006784:	4a09      	ldr	r2, [pc, #36]	@ (80067ac <getDNSfromDHCP+0x3c>)
 8006786:	7852      	ldrb	r2, [r2, #1]
 8006788:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3302      	adds	r3, #2
 800678e:	4a07      	ldr	r2, [pc, #28]	@ (80067ac <getDNSfromDHCP+0x3c>)
 8006790:	7892      	ldrb	r2, [r2, #2]
 8006792:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3303      	adds	r3, #3
 8006798:	4a04      	ldr	r2, [pc, #16]	@ (80067ac <getDNSfromDHCP+0x3c>)
 800679a:	78d2      	ldrb	r2, [r2, #3]
 800679c:	701a      	strb	r2, [r3, #0]
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	20000a18 	.word	0x20000a18

080067b0 <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 80067b4:	4b03      	ldr	r3, [pc, #12]	@ (80067c4 <getDHCPLeasetime+0x14>)
 80067b6:	681b      	ldr	r3, [r3, #0]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	20000050 	.word	0x20000050

080067c8 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	4603      	mov	r3, r0
 80067d0:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 80067da:	79fb      	ldrb	r3, [r7, #7]
 80067dc:	2b09      	cmp	r3, #9
 80067de:	d803      	bhi.n	80067e8 <NibbleToHex+0x20>
    return nibble + '0';
 80067e0:	79fb      	ldrb	r3, [r7, #7]
 80067e2:	3330      	adds	r3, #48	@ 0x30
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	e002      	b.n	80067ee <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	3337      	adds	r3, #55	@ 0x37
 80067ec:	b2db      	uxtb	r3, r3
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
	...

080067fc <wizchip_select>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
static inline void wizchip_select(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8006800:	2200      	movs	r2, #0
 8006802:	2180      	movs	r1, #128	@ 0x80
 8006804:	4802      	ldr	r0, [pc, #8]	@ (8006810 <wizchip_select+0x14>)
 8006806:	f7fa feef 	bl	80015e8 <HAL_GPIO_WritePin>
}
 800680a:	bf00      	nop
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	40020c00 	.word	0x40020c00

08006814 <wizchip_deselect>:

static inline void wizchip_deselect(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8006818:	2201      	movs	r2, #1
 800681a:	2180      	movs	r1, #128	@ 0x80
 800681c:	4802      	ldr	r0, [pc, #8]	@ (8006828 <wizchip_deselect+0x14>)
 800681e:	f7fa fee3 	bl	80015e8 <HAL_GPIO_WritePin>
}
 8006822:	bf00      	nop
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	40020c00 	.word	0x40020c00

0800682c <wizchip_read>:

static inline iodata_t wizchip_read(uint32_t addr)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  data = _W5300_DATA(addr);
  //wizchip_deselect();
  
  return data;
#else
  return _W5300_DATA(addr);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f103 43c0 	add.w	r3, r3, #1610612736	@ 0x60000000
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	b2db      	uxtb	r3, r3
#endif
}
 800683e:	4618      	mov	r0, r3
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <wizchip_write>:

static inline void wizchip_write(uint32_t addr, iodata_t tx_data)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	460b      	mov	r3, r1
 8006854:	70fb      	strb	r3, [r7, #3]
#if 0
  //wizchip_select();
  _W5300_DATA(addr) = tx_data;
  //wizchip_deselect();
#else
  _W5300_DATA(addr) = tx_data;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f103 43c0 	add.w	r3, r3, #1610612736	@ 0x60000000
 800685c:	461a      	mov	r2, r3
 800685e:	78fb      	ldrb	r3, [r7, #3]
 8006860:	7013      	strb	r3, [r2, #0]
#endif
  

}
 8006862:	bf00      	nop
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
	...

08006870 <wizchip_initialize>:

void wizchip_initialize(void)
{
 8006870:	b590      	push	{r4, r7, lr}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
  /* Deselect the FLASH : chip select high */
  wizchip_deselect();
 8006876:	f7ff ffcd 	bl	8006814 <wizchip_deselect>

  /* CS function register */
  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 800687a:	490e      	ldr	r1, [pc, #56]	@ (80068b4 <wizchip_initialize+0x44>)
 800687c:	480e      	ldr	r0, [pc, #56]	@ (80068b8 <wizchip_initialize+0x48>)
 800687e:	f7fd fddd 	bl	800443c <reg_wizchip_cs_cbfunc>

  /* BUS function register */
  reg_wizchip_bus_cbfunc(wizchip_read, wizchip_write);
 8006882:	490e      	ldr	r1, [pc, #56]	@ (80068bc <wizchip_initialize+0x4c>)
 8006884:	480e      	ldr	r0, [pc, #56]	@ (80068c0 <wizchip_initialize+0x50>)
 8006886:	f7fd fdff 	bl	8004488 <reg_wizchip_bus_cbfunc>

  /* W5x00 initialize */
#if (_WIZCHIP_ == W5100S)
  uint8_t memsize[2][4] = {{2, 2, 2, 2}, {2, 2, 2, 2}};
#elif (_WIZCHIP_ == W5300)
  uint8_t memsize[2][8] = {{8, 8, 8, 8, 8, 8, 8, 8}, {8, 8, 8, 8, 8, 8, 8, 8}};
 800688a:	4b0e      	ldr	r3, [pc, #56]	@ (80068c4 <wizchip_initialize+0x54>)
 800688c:	463c      	mov	r4, r7
 800688e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#elif (_WIZCHIP_ == W5500)
  uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
#endif

  if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memsize) == -1)
 8006894:	463b      	mov	r3, r7
 8006896:	4619      	mov	r1, r3
 8006898:	2001      	movs	r0, #1
 800689a:	f7fd fe21 	bl	80044e0 <ctlwizchip>
 800689e:	4603      	mov	r3, r0
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a4:	d102      	bne.n	80068ac <wizchip_initialize+0x3c>
  {
    printf(" W5x00 initialized fail\n");
 80068a6:	4808      	ldr	r0, [pc, #32]	@ (80068c8 <wizchip_initialize+0x58>)
 80068a8:	f000 fa08 	bl	8006cbc <puts>

      return;
    }
  } while (temp == PHY_LINK_OFF);
#endif
}
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd90      	pop	{r4, r7, pc}
 80068b2:	bf00      	nop
 80068b4:	08006815 	.word	0x08006815
 80068b8:	080067fd 	.word	0x080067fd
 80068bc:	0800684b 	.word	0x0800684b
 80068c0:	0800682d 	.word	0x0800682d
 80068c4:	08007a6c 	.word	0x08007a6c
 80068c8:	08007a54 	.word	0x08007a54

080068cc <wizchip_reset>:

void wizchip_reset(void)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80068d0:	2200      	movs	r2, #0
 80068d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80068d6:	4808      	ldr	r0, [pc, #32]	@ (80068f8 <wizchip_reset+0x2c>)
 80068d8:	f7fa fe86 	bl	80015e8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80068dc:	2064      	movs	r0, #100	@ 0x64
 80068de:	f7fa fba1 	bl	8001024 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80068e2:	2201      	movs	r2, #1
 80068e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80068e8:	4803      	ldr	r0, [pc, #12]	@ (80068f8 <wizchip_reset+0x2c>)
 80068ea:	f7fa fe7d 	bl	80015e8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80068ee:	2064      	movs	r0, #100	@ 0x64
 80068f0:	f7fa fb98 	bl	8001024 <HAL_Delay>
}
 80068f4:	bf00      	nop
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	40020800 	.word	0x40020800

080068fc <wizchip_check>:

void wizchip_check(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0

    while (1)
      ;
  }
#endif
}
 8006900:	bf00      	nop
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <wizchip_network_initialize>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
void wizchip_network_initialize(wiz_NetInfo *net_info)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b082      	sub	sp, #8
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  wizchip_initialize();
 8006912:	f7ff ffad 	bl	8006870 <wizchip_initialize>
  wizchip_reset();
 8006916:	f7ff ffd9 	bl	80068cc <wizchip_reset>
  wizchip_check();
 800691a:	f7ff ffef 	bl	80068fc <wizchip_check>

  ctlnetwork(CN_SET_NETINFO, (void *)net_info);
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	2000      	movs	r0, #0
 8006922:	f7fd fe59 	bl	80045d8 <ctlnetwork>
}
 8006926:	bf00      	nop
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <wizchip_network_information>:

void wizchip_network_information(wiz_NetInfo *net_info)
{
 8006930:	b5b0      	push	{r4, r5, r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af04      	add	r7, sp, #16
 8006936:	6078      	str	r0, [r7, #4]
  uint8_t tmp_str[8] = {
 8006938:	2300      	movs	r3, #0
 800693a:	60bb      	str	r3, [r7, #8]
 800693c:	2300      	movs	r3, #0
 800693e:	60fb      	str	r3, [r7, #12]
      0,
  };

  ctlnetwork(CN_GET_NETINFO, (void *)net_info);
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	2001      	movs	r0, #1
 8006944:	f7fd fe48 	bl	80045d8 <ctlnetwork>
  ctlwizchip(CW_GET_ID, (void *)tmp_str);
 8006948:	f107 0308 	add.w	r3, r7, #8
 800694c:	4619      	mov	r1, r3
 800694e:	2008      	movs	r0, #8
 8006950:	f7fd fdc6 	bl	80044e0 <ctlwizchip>

  if (net_info->dhcp == NETINFO_DHCP)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	7d9b      	ldrb	r3, [r3, #22]
 8006958:	2b02      	cmp	r3, #2
 800695a:	d109      	bne.n	8006970 <wizchip_network_information+0x40>
  {
    printf("====================================================================================================\n");
 800695c:	4839      	ldr	r0, [pc, #228]	@ (8006a44 <wizchip_network_information+0x114>)
 800695e:	f000 f9ad 	bl	8006cbc <puts>
    printf(" %s network configuration : DHCP\n\n", (char *)tmp_str);
 8006962:	f107 0308 	add.w	r3, r7, #8
 8006966:	4619      	mov	r1, r3
 8006968:	4837      	ldr	r0, [pc, #220]	@ (8006a48 <wizchip_network_information+0x118>)
 800696a:	f000 f93f 	bl	8006bec <iprintf>
 800696e:	e008      	b.n	8006982 <wizchip_network_information+0x52>
  }
  else
  {
    printf("====================================================================================================\n");
 8006970:	4834      	ldr	r0, [pc, #208]	@ (8006a44 <wizchip_network_information+0x114>)
 8006972:	f000 f9a3 	bl	8006cbc <puts>
    printf(" %s network configuration : static\n\n", (char *)tmp_str);
 8006976:	f107 0308 	add.w	r3, r7, #8
 800697a:	4619      	mov	r1, r3
 800697c:	4833      	ldr	r0, [pc, #204]	@ (8006a4c <wizchip_network_information+0x11c>)
 800697e:	f000 f935 	bl	8006bec <iprintf>
  }

  printf(" MAC         : %02X:%02X:%02X:%02X:%02X:%02X\n", net_info->mac[0], net_info->mac[1], net_info->mac[2], net_info->mac[3], net_info->mac[4], net_info->mac[5]);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	4618      	mov	r0, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	785b      	ldrb	r3, [r3, #1]
 800698c:	461c      	mov	r4, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	789b      	ldrb	r3, [r3, #2]
 8006992:	461d      	mov	r5, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	78db      	ldrb	r3, [r3, #3]
 8006998:	461a      	mov	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	791b      	ldrb	r3, [r3, #4]
 800699e:	4619      	mov	r1, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	795b      	ldrb	r3, [r3, #5]
 80069a4:	9302      	str	r3, [sp, #8]
 80069a6:	9101      	str	r1, [sp, #4]
 80069a8:	9200      	str	r2, [sp, #0]
 80069aa:	462b      	mov	r3, r5
 80069ac:	4622      	mov	r2, r4
 80069ae:	4601      	mov	r1, r0
 80069b0:	4827      	ldr	r0, [pc, #156]	@ (8006a50 <wizchip_network_information+0x120>)
 80069b2:	f000 f91b 	bl	8006bec <iprintf>
  printf(" IP          : %d.%d.%d.%d\n", net_info->ip[0], net_info->ip[1], net_info->ip[2], net_info->ip[3]);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	799b      	ldrb	r3, [r3, #6]
 80069ba:	4619      	mov	r1, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	79db      	ldrb	r3, [r3, #7]
 80069c0:	461a      	mov	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	7a1b      	ldrb	r3, [r3, #8]
 80069c6:	4618      	mov	r0, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	7a5b      	ldrb	r3, [r3, #9]
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	4603      	mov	r3, r0
 80069d0:	4820      	ldr	r0, [pc, #128]	@ (8006a54 <wizchip_network_information+0x124>)
 80069d2:	f000 f90b 	bl	8006bec <iprintf>
  printf(" Subnet Mask : %d.%d.%d.%d\n", net_info->sn[0], net_info->sn[1], net_info->sn[2], net_info->sn[3]);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	7a9b      	ldrb	r3, [r3, #10]
 80069da:	4619      	mov	r1, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	7adb      	ldrb	r3, [r3, #11]
 80069e0:	461a      	mov	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	7b1b      	ldrb	r3, [r3, #12]
 80069e6:	4618      	mov	r0, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	7b5b      	ldrb	r3, [r3, #13]
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	4603      	mov	r3, r0
 80069f0:	4819      	ldr	r0, [pc, #100]	@ (8006a58 <wizchip_network_information+0x128>)
 80069f2:	f000 f8fb 	bl	8006bec <iprintf>
  printf(" Gateway     : %d.%d.%d.%d\n", net_info->gw[0], net_info->gw[1], net_info->gw[2], net_info->gw[3]);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	7b9b      	ldrb	r3, [r3, #14]
 80069fa:	4619      	mov	r1, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	7bdb      	ldrb	r3, [r3, #15]
 8006a00:	461a      	mov	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	7c1b      	ldrb	r3, [r3, #16]
 8006a06:	4618      	mov	r0, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	7c5b      	ldrb	r3, [r3, #17]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	4603      	mov	r3, r0
 8006a10:	4812      	ldr	r0, [pc, #72]	@ (8006a5c <wizchip_network_information+0x12c>)
 8006a12:	f000 f8eb 	bl	8006bec <iprintf>
  printf(" DNS         : %d.%d.%d.%d\n", net_info->dns[0], net_info->dns[1], net_info->dns[2], net_info->dns[3]);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	7c9b      	ldrb	r3, [r3, #18]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	7cdb      	ldrb	r3, [r3, #19]
 8006a20:	461a      	mov	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	7d1b      	ldrb	r3, [r3, #20]
 8006a26:	4618      	mov	r0, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	7d5b      	ldrb	r3, [r3, #21]
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	4603      	mov	r3, r0
 8006a30:	480b      	ldr	r0, [pc, #44]	@ (8006a60 <wizchip_network_information+0x130>)
 8006a32:	f000 f8db 	bl	8006bec <iprintf>
  printf("====================================================================================================\n\n");
 8006a36:	480b      	ldr	r0, [pc, #44]	@ (8006a64 <wizchip_network_information+0x134>)
 8006a38:	f000 f940 	bl	8006cbc <puts>
}
 8006a3c:	bf00      	nop
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bdb0      	pop	{r4, r5, r7, pc}
 8006a44:	08007a7c 	.word	0x08007a7c
 8006a48:	08007ae4 	.word	0x08007ae4
 8006a4c:	08007b08 	.word	0x08007b08
 8006a50:	08007b30 	.word	0x08007b30
 8006a54:	08007b60 	.word	0x08007b60
 8006a58:	08007b7c 	.word	0x08007b7c
 8006a5c:	08007b98 	.word	0x08007b98
 8006a60:	08007bb4 	.word	0x08007bb4
 8006a64:	08007bd0 	.word	0x08007bd0

08006a68 <std>:
 8006a68:	2300      	movs	r3, #0
 8006a6a:	b510      	push	{r4, lr}
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a76:	6083      	str	r3, [r0, #8]
 8006a78:	8181      	strh	r1, [r0, #12]
 8006a7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a7c:	81c2      	strh	r2, [r0, #14]
 8006a7e:	6183      	str	r3, [r0, #24]
 8006a80:	4619      	mov	r1, r3
 8006a82:	2208      	movs	r2, #8
 8006a84:	305c      	adds	r0, #92	@ 0x5c
 8006a86:	f000 f9f9 	bl	8006e7c <memset>
 8006a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac0 <std+0x58>)
 8006a8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac4 <std+0x5c>)
 8006a90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a92:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac8 <std+0x60>)
 8006a94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a96:	4b0d      	ldr	r3, [pc, #52]	@ (8006acc <std+0x64>)
 8006a98:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad0 <std+0x68>)
 8006a9c:	6224      	str	r4, [r4, #32]
 8006a9e:	429c      	cmp	r4, r3
 8006aa0:	d006      	beq.n	8006ab0 <std+0x48>
 8006aa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006aa6:	4294      	cmp	r4, r2
 8006aa8:	d002      	beq.n	8006ab0 <std+0x48>
 8006aaa:	33d0      	adds	r3, #208	@ 0xd0
 8006aac:	429c      	cmp	r4, r3
 8006aae:	d105      	bne.n	8006abc <std+0x54>
 8006ab0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ab8:	f000 ba58 	b.w	8006f6c <__retarget_lock_init_recursive>
 8006abc:	bd10      	pop	{r4, pc}
 8006abe:	bf00      	nop
 8006ac0:	08006ccd 	.word	0x08006ccd
 8006ac4:	08006cef 	.word	0x08006cef
 8006ac8:	08006d27 	.word	0x08006d27
 8006acc:	08006d4b 	.word	0x08006d4b
 8006ad0:	20000a34 	.word	0x20000a34

08006ad4 <stdio_exit_handler>:
 8006ad4:	4a02      	ldr	r2, [pc, #8]	@ (8006ae0 <stdio_exit_handler+0xc>)
 8006ad6:	4903      	ldr	r1, [pc, #12]	@ (8006ae4 <stdio_exit_handler+0x10>)
 8006ad8:	4803      	ldr	r0, [pc, #12]	@ (8006ae8 <stdio_exit_handler+0x14>)
 8006ada:	f000 b869 	b.w	8006bb0 <_fwalk_sglue>
 8006ade:	bf00      	nop
 8006ae0:	2000006c 	.word	0x2000006c
 8006ae4:	0800780d 	.word	0x0800780d
 8006ae8:	2000007c 	.word	0x2000007c

08006aec <cleanup_stdio>:
 8006aec:	6841      	ldr	r1, [r0, #4]
 8006aee:	4b0c      	ldr	r3, [pc, #48]	@ (8006b20 <cleanup_stdio+0x34>)
 8006af0:	4299      	cmp	r1, r3
 8006af2:	b510      	push	{r4, lr}
 8006af4:	4604      	mov	r4, r0
 8006af6:	d001      	beq.n	8006afc <cleanup_stdio+0x10>
 8006af8:	f000 fe88 	bl	800780c <_fflush_r>
 8006afc:	68a1      	ldr	r1, [r4, #8]
 8006afe:	4b09      	ldr	r3, [pc, #36]	@ (8006b24 <cleanup_stdio+0x38>)
 8006b00:	4299      	cmp	r1, r3
 8006b02:	d002      	beq.n	8006b0a <cleanup_stdio+0x1e>
 8006b04:	4620      	mov	r0, r4
 8006b06:	f000 fe81 	bl	800780c <_fflush_r>
 8006b0a:	68e1      	ldr	r1, [r4, #12]
 8006b0c:	4b06      	ldr	r3, [pc, #24]	@ (8006b28 <cleanup_stdio+0x3c>)
 8006b0e:	4299      	cmp	r1, r3
 8006b10:	d004      	beq.n	8006b1c <cleanup_stdio+0x30>
 8006b12:	4620      	mov	r0, r4
 8006b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b18:	f000 be78 	b.w	800780c <_fflush_r>
 8006b1c:	bd10      	pop	{r4, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000a34 	.word	0x20000a34
 8006b24:	20000a9c 	.word	0x20000a9c
 8006b28:	20000b04 	.word	0x20000b04

08006b2c <global_stdio_init.part.0>:
 8006b2c:	b510      	push	{r4, lr}
 8006b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b5c <global_stdio_init.part.0+0x30>)
 8006b30:	4c0b      	ldr	r4, [pc, #44]	@ (8006b60 <global_stdio_init.part.0+0x34>)
 8006b32:	4a0c      	ldr	r2, [pc, #48]	@ (8006b64 <global_stdio_init.part.0+0x38>)
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	4620      	mov	r0, r4
 8006b38:	2200      	movs	r2, #0
 8006b3a:	2104      	movs	r1, #4
 8006b3c:	f7ff ff94 	bl	8006a68 <std>
 8006b40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b44:	2201      	movs	r2, #1
 8006b46:	2109      	movs	r1, #9
 8006b48:	f7ff ff8e 	bl	8006a68 <std>
 8006b4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b50:	2202      	movs	r2, #2
 8006b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b56:	2112      	movs	r1, #18
 8006b58:	f7ff bf86 	b.w	8006a68 <std>
 8006b5c:	20000b6c 	.word	0x20000b6c
 8006b60:	20000a34 	.word	0x20000a34
 8006b64:	08006ad5 	.word	0x08006ad5

08006b68 <__sfp_lock_acquire>:
 8006b68:	4801      	ldr	r0, [pc, #4]	@ (8006b70 <__sfp_lock_acquire+0x8>)
 8006b6a:	f000 ba00 	b.w	8006f6e <__retarget_lock_acquire_recursive>
 8006b6e:	bf00      	nop
 8006b70:	20000b75 	.word	0x20000b75

08006b74 <__sfp_lock_release>:
 8006b74:	4801      	ldr	r0, [pc, #4]	@ (8006b7c <__sfp_lock_release+0x8>)
 8006b76:	f000 b9fb 	b.w	8006f70 <__retarget_lock_release_recursive>
 8006b7a:	bf00      	nop
 8006b7c:	20000b75 	.word	0x20000b75

08006b80 <__sinit>:
 8006b80:	b510      	push	{r4, lr}
 8006b82:	4604      	mov	r4, r0
 8006b84:	f7ff fff0 	bl	8006b68 <__sfp_lock_acquire>
 8006b88:	6a23      	ldr	r3, [r4, #32]
 8006b8a:	b11b      	cbz	r3, 8006b94 <__sinit+0x14>
 8006b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b90:	f7ff bff0 	b.w	8006b74 <__sfp_lock_release>
 8006b94:	4b04      	ldr	r3, [pc, #16]	@ (8006ba8 <__sinit+0x28>)
 8006b96:	6223      	str	r3, [r4, #32]
 8006b98:	4b04      	ldr	r3, [pc, #16]	@ (8006bac <__sinit+0x2c>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1f5      	bne.n	8006b8c <__sinit+0xc>
 8006ba0:	f7ff ffc4 	bl	8006b2c <global_stdio_init.part.0>
 8006ba4:	e7f2      	b.n	8006b8c <__sinit+0xc>
 8006ba6:	bf00      	nop
 8006ba8:	08006aed 	.word	0x08006aed
 8006bac:	20000b6c 	.word	0x20000b6c

08006bb0 <_fwalk_sglue>:
 8006bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bb4:	4607      	mov	r7, r0
 8006bb6:	4688      	mov	r8, r1
 8006bb8:	4614      	mov	r4, r2
 8006bba:	2600      	movs	r6, #0
 8006bbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bc0:	f1b9 0901 	subs.w	r9, r9, #1
 8006bc4:	d505      	bpl.n	8006bd2 <_fwalk_sglue+0x22>
 8006bc6:	6824      	ldr	r4, [r4, #0]
 8006bc8:	2c00      	cmp	r4, #0
 8006bca:	d1f7      	bne.n	8006bbc <_fwalk_sglue+0xc>
 8006bcc:	4630      	mov	r0, r6
 8006bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bd2:	89ab      	ldrh	r3, [r5, #12]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d907      	bls.n	8006be8 <_fwalk_sglue+0x38>
 8006bd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	d003      	beq.n	8006be8 <_fwalk_sglue+0x38>
 8006be0:	4629      	mov	r1, r5
 8006be2:	4638      	mov	r0, r7
 8006be4:	47c0      	blx	r8
 8006be6:	4306      	orrs	r6, r0
 8006be8:	3568      	adds	r5, #104	@ 0x68
 8006bea:	e7e9      	b.n	8006bc0 <_fwalk_sglue+0x10>

08006bec <iprintf>:
 8006bec:	b40f      	push	{r0, r1, r2, r3}
 8006bee:	b507      	push	{r0, r1, r2, lr}
 8006bf0:	4906      	ldr	r1, [pc, #24]	@ (8006c0c <iprintf+0x20>)
 8006bf2:	ab04      	add	r3, sp, #16
 8006bf4:	6808      	ldr	r0, [r1, #0]
 8006bf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bfa:	6881      	ldr	r1, [r0, #8]
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	f000 fadb 	bl	80071b8 <_vfiprintf_r>
 8006c02:	b003      	add	sp, #12
 8006c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c08:	b004      	add	sp, #16
 8006c0a:	4770      	bx	lr
 8006c0c:	20000078 	.word	0x20000078

08006c10 <_puts_r>:
 8006c10:	6a03      	ldr	r3, [r0, #32]
 8006c12:	b570      	push	{r4, r5, r6, lr}
 8006c14:	6884      	ldr	r4, [r0, #8]
 8006c16:	4605      	mov	r5, r0
 8006c18:	460e      	mov	r6, r1
 8006c1a:	b90b      	cbnz	r3, 8006c20 <_puts_r+0x10>
 8006c1c:	f7ff ffb0 	bl	8006b80 <__sinit>
 8006c20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c22:	07db      	lsls	r3, r3, #31
 8006c24:	d405      	bmi.n	8006c32 <_puts_r+0x22>
 8006c26:	89a3      	ldrh	r3, [r4, #12]
 8006c28:	0598      	lsls	r0, r3, #22
 8006c2a:	d402      	bmi.n	8006c32 <_puts_r+0x22>
 8006c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c2e:	f000 f99e 	bl	8006f6e <__retarget_lock_acquire_recursive>
 8006c32:	89a3      	ldrh	r3, [r4, #12]
 8006c34:	0719      	lsls	r1, r3, #28
 8006c36:	d502      	bpl.n	8006c3e <_puts_r+0x2e>
 8006c38:	6923      	ldr	r3, [r4, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d135      	bne.n	8006caa <_puts_r+0x9a>
 8006c3e:	4621      	mov	r1, r4
 8006c40:	4628      	mov	r0, r5
 8006c42:	f000 f8c5 	bl	8006dd0 <__swsetup_r>
 8006c46:	b380      	cbz	r0, 8006caa <_puts_r+0x9a>
 8006c48:	f04f 35ff 	mov.w	r5, #4294967295
 8006c4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c4e:	07da      	lsls	r2, r3, #31
 8006c50:	d405      	bmi.n	8006c5e <_puts_r+0x4e>
 8006c52:	89a3      	ldrh	r3, [r4, #12]
 8006c54:	059b      	lsls	r3, r3, #22
 8006c56:	d402      	bmi.n	8006c5e <_puts_r+0x4e>
 8006c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c5a:	f000 f989 	bl	8006f70 <__retarget_lock_release_recursive>
 8006c5e:	4628      	mov	r0, r5
 8006c60:	bd70      	pop	{r4, r5, r6, pc}
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	da04      	bge.n	8006c70 <_puts_r+0x60>
 8006c66:	69a2      	ldr	r2, [r4, #24]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	dc17      	bgt.n	8006c9c <_puts_r+0x8c>
 8006c6c:	290a      	cmp	r1, #10
 8006c6e:	d015      	beq.n	8006c9c <_puts_r+0x8c>
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	1c5a      	adds	r2, r3, #1
 8006c74:	6022      	str	r2, [r4, #0]
 8006c76:	7019      	strb	r1, [r3, #0]
 8006c78:	68a3      	ldr	r3, [r4, #8]
 8006c7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	60a3      	str	r3, [r4, #8]
 8006c82:	2900      	cmp	r1, #0
 8006c84:	d1ed      	bne.n	8006c62 <_puts_r+0x52>
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	da11      	bge.n	8006cae <_puts_r+0x9e>
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	210a      	movs	r1, #10
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f000 f85f 	bl	8006d52 <__swbuf_r>
 8006c94:	3001      	adds	r0, #1
 8006c96:	d0d7      	beq.n	8006c48 <_puts_r+0x38>
 8006c98:	250a      	movs	r5, #10
 8006c9a:	e7d7      	b.n	8006c4c <_puts_r+0x3c>
 8006c9c:	4622      	mov	r2, r4
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f000 f857 	bl	8006d52 <__swbuf_r>
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	d1e7      	bne.n	8006c78 <_puts_r+0x68>
 8006ca8:	e7ce      	b.n	8006c48 <_puts_r+0x38>
 8006caa:	3e01      	subs	r6, #1
 8006cac:	e7e4      	b.n	8006c78 <_puts_r+0x68>
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	6022      	str	r2, [r4, #0]
 8006cb4:	220a      	movs	r2, #10
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	e7ee      	b.n	8006c98 <_puts_r+0x88>
	...

08006cbc <puts>:
 8006cbc:	4b02      	ldr	r3, [pc, #8]	@ (8006cc8 <puts+0xc>)
 8006cbe:	4601      	mov	r1, r0
 8006cc0:	6818      	ldr	r0, [r3, #0]
 8006cc2:	f7ff bfa5 	b.w	8006c10 <_puts_r>
 8006cc6:	bf00      	nop
 8006cc8:	20000078 	.word	0x20000078

08006ccc <__sread>:
 8006ccc:	b510      	push	{r4, lr}
 8006cce:	460c      	mov	r4, r1
 8006cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd4:	f000 f8fc 	bl	8006ed0 <_read_r>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	bfab      	itete	ge
 8006cdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006cde:	89a3      	ldrhlt	r3, [r4, #12]
 8006ce0:	181b      	addge	r3, r3, r0
 8006ce2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ce6:	bfac      	ite	ge
 8006ce8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cea:	81a3      	strhlt	r3, [r4, #12]
 8006cec:	bd10      	pop	{r4, pc}

08006cee <__swrite>:
 8006cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf2:	461f      	mov	r7, r3
 8006cf4:	898b      	ldrh	r3, [r1, #12]
 8006cf6:	05db      	lsls	r3, r3, #23
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	4616      	mov	r6, r2
 8006cfe:	d505      	bpl.n	8006d0c <__swrite+0x1e>
 8006d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d04:	2302      	movs	r3, #2
 8006d06:	2200      	movs	r2, #0
 8006d08:	f000 f8d0 	bl	8006eac <_lseek_r>
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d16:	81a3      	strh	r3, [r4, #12]
 8006d18:	4632      	mov	r2, r6
 8006d1a:	463b      	mov	r3, r7
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d22:	f000 b8e7 	b.w	8006ef4 <_write_r>

08006d26 <__sseek>:
 8006d26:	b510      	push	{r4, lr}
 8006d28:	460c      	mov	r4, r1
 8006d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d2e:	f000 f8bd 	bl	8006eac <_lseek_r>
 8006d32:	1c43      	adds	r3, r0, #1
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	bf15      	itete	ne
 8006d38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d42:	81a3      	strheq	r3, [r4, #12]
 8006d44:	bf18      	it	ne
 8006d46:	81a3      	strhne	r3, [r4, #12]
 8006d48:	bd10      	pop	{r4, pc}

08006d4a <__sclose>:
 8006d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d4e:	f000 b89d 	b.w	8006e8c <_close_r>

08006d52 <__swbuf_r>:
 8006d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d54:	460e      	mov	r6, r1
 8006d56:	4614      	mov	r4, r2
 8006d58:	4605      	mov	r5, r0
 8006d5a:	b118      	cbz	r0, 8006d64 <__swbuf_r+0x12>
 8006d5c:	6a03      	ldr	r3, [r0, #32]
 8006d5e:	b90b      	cbnz	r3, 8006d64 <__swbuf_r+0x12>
 8006d60:	f7ff ff0e 	bl	8006b80 <__sinit>
 8006d64:	69a3      	ldr	r3, [r4, #24]
 8006d66:	60a3      	str	r3, [r4, #8]
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	071a      	lsls	r2, r3, #28
 8006d6c:	d501      	bpl.n	8006d72 <__swbuf_r+0x20>
 8006d6e:	6923      	ldr	r3, [r4, #16]
 8006d70:	b943      	cbnz	r3, 8006d84 <__swbuf_r+0x32>
 8006d72:	4621      	mov	r1, r4
 8006d74:	4628      	mov	r0, r5
 8006d76:	f000 f82b 	bl	8006dd0 <__swsetup_r>
 8006d7a:	b118      	cbz	r0, 8006d84 <__swbuf_r+0x32>
 8006d7c:	f04f 37ff 	mov.w	r7, #4294967295
 8006d80:	4638      	mov	r0, r7
 8006d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	6922      	ldr	r2, [r4, #16]
 8006d88:	1a98      	subs	r0, r3, r2
 8006d8a:	6963      	ldr	r3, [r4, #20]
 8006d8c:	b2f6      	uxtb	r6, r6
 8006d8e:	4283      	cmp	r3, r0
 8006d90:	4637      	mov	r7, r6
 8006d92:	dc05      	bgt.n	8006da0 <__swbuf_r+0x4e>
 8006d94:	4621      	mov	r1, r4
 8006d96:	4628      	mov	r0, r5
 8006d98:	f000 fd38 	bl	800780c <_fflush_r>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d1ed      	bne.n	8006d7c <__swbuf_r+0x2a>
 8006da0:	68a3      	ldr	r3, [r4, #8]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	60a3      	str	r3, [r4, #8]
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	6022      	str	r2, [r4, #0]
 8006dac:	701e      	strb	r6, [r3, #0]
 8006dae:	6962      	ldr	r2, [r4, #20]
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d004      	beq.n	8006dc0 <__swbuf_r+0x6e>
 8006db6:	89a3      	ldrh	r3, [r4, #12]
 8006db8:	07db      	lsls	r3, r3, #31
 8006dba:	d5e1      	bpl.n	8006d80 <__swbuf_r+0x2e>
 8006dbc:	2e0a      	cmp	r6, #10
 8006dbe:	d1df      	bne.n	8006d80 <__swbuf_r+0x2e>
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	f000 fd22 	bl	800780c <_fflush_r>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d0d9      	beq.n	8006d80 <__swbuf_r+0x2e>
 8006dcc:	e7d6      	b.n	8006d7c <__swbuf_r+0x2a>
	...

08006dd0 <__swsetup_r>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4b29      	ldr	r3, [pc, #164]	@ (8006e78 <__swsetup_r+0xa8>)
 8006dd4:	4605      	mov	r5, r0
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	460c      	mov	r4, r1
 8006dda:	b118      	cbz	r0, 8006de4 <__swsetup_r+0x14>
 8006ddc:	6a03      	ldr	r3, [r0, #32]
 8006dde:	b90b      	cbnz	r3, 8006de4 <__swsetup_r+0x14>
 8006de0:	f7ff fece 	bl	8006b80 <__sinit>
 8006de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006de8:	0719      	lsls	r1, r3, #28
 8006dea:	d422      	bmi.n	8006e32 <__swsetup_r+0x62>
 8006dec:	06da      	lsls	r2, r3, #27
 8006dee:	d407      	bmi.n	8006e00 <__swsetup_r+0x30>
 8006df0:	2209      	movs	r2, #9
 8006df2:	602a      	str	r2, [r5, #0]
 8006df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006df8:	81a3      	strh	r3, [r4, #12]
 8006dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfe:	e033      	b.n	8006e68 <__swsetup_r+0x98>
 8006e00:	0758      	lsls	r0, r3, #29
 8006e02:	d512      	bpl.n	8006e2a <__swsetup_r+0x5a>
 8006e04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e06:	b141      	cbz	r1, 8006e1a <__swsetup_r+0x4a>
 8006e08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e0c:	4299      	cmp	r1, r3
 8006e0e:	d002      	beq.n	8006e16 <__swsetup_r+0x46>
 8006e10:	4628      	mov	r0, r5
 8006e12:	f000 f8af 	bl	8006f74 <_free_r>
 8006e16:	2300      	movs	r3, #0
 8006e18:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e20:	81a3      	strh	r3, [r4, #12]
 8006e22:	2300      	movs	r3, #0
 8006e24:	6063      	str	r3, [r4, #4]
 8006e26:	6923      	ldr	r3, [r4, #16]
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	f043 0308 	orr.w	r3, r3, #8
 8006e30:	81a3      	strh	r3, [r4, #12]
 8006e32:	6923      	ldr	r3, [r4, #16]
 8006e34:	b94b      	cbnz	r3, 8006e4a <__swsetup_r+0x7a>
 8006e36:	89a3      	ldrh	r3, [r4, #12]
 8006e38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e40:	d003      	beq.n	8006e4a <__swsetup_r+0x7a>
 8006e42:	4621      	mov	r1, r4
 8006e44:	4628      	mov	r0, r5
 8006e46:	f000 fd2f 	bl	80078a8 <__smakebuf_r>
 8006e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e4e:	f013 0201 	ands.w	r2, r3, #1
 8006e52:	d00a      	beq.n	8006e6a <__swsetup_r+0x9a>
 8006e54:	2200      	movs	r2, #0
 8006e56:	60a2      	str	r2, [r4, #8]
 8006e58:	6962      	ldr	r2, [r4, #20]
 8006e5a:	4252      	negs	r2, r2
 8006e5c:	61a2      	str	r2, [r4, #24]
 8006e5e:	6922      	ldr	r2, [r4, #16]
 8006e60:	b942      	cbnz	r2, 8006e74 <__swsetup_r+0xa4>
 8006e62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e66:	d1c5      	bne.n	8006df4 <__swsetup_r+0x24>
 8006e68:	bd38      	pop	{r3, r4, r5, pc}
 8006e6a:	0799      	lsls	r1, r3, #30
 8006e6c:	bf58      	it	pl
 8006e6e:	6962      	ldrpl	r2, [r4, #20]
 8006e70:	60a2      	str	r2, [r4, #8]
 8006e72:	e7f4      	b.n	8006e5e <__swsetup_r+0x8e>
 8006e74:	2000      	movs	r0, #0
 8006e76:	e7f7      	b.n	8006e68 <__swsetup_r+0x98>
 8006e78:	20000078 	.word	0x20000078

08006e7c <memset>:
 8006e7c:	4402      	add	r2, r0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d100      	bne.n	8006e86 <memset+0xa>
 8006e84:	4770      	bx	lr
 8006e86:	f803 1b01 	strb.w	r1, [r3], #1
 8006e8a:	e7f9      	b.n	8006e80 <memset+0x4>

08006e8c <_close_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	4d06      	ldr	r5, [pc, #24]	@ (8006ea8 <_close_r+0x1c>)
 8006e90:	2300      	movs	r3, #0
 8006e92:	4604      	mov	r4, r0
 8006e94:	4608      	mov	r0, r1
 8006e96:	602b      	str	r3, [r5, #0]
 8006e98:	f7f9 ffab 	bl	8000df2 <_close>
 8006e9c:	1c43      	adds	r3, r0, #1
 8006e9e:	d102      	bne.n	8006ea6 <_close_r+0x1a>
 8006ea0:	682b      	ldr	r3, [r5, #0]
 8006ea2:	b103      	cbz	r3, 8006ea6 <_close_r+0x1a>
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	bd38      	pop	{r3, r4, r5, pc}
 8006ea8:	20000b70 	.word	0x20000b70

08006eac <_lseek_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	4d07      	ldr	r5, [pc, #28]	@ (8006ecc <_lseek_r+0x20>)
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	4608      	mov	r0, r1
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	602a      	str	r2, [r5, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f7f9 ffc0 	bl	8000e40 <_lseek>
 8006ec0:	1c43      	adds	r3, r0, #1
 8006ec2:	d102      	bne.n	8006eca <_lseek_r+0x1e>
 8006ec4:	682b      	ldr	r3, [r5, #0]
 8006ec6:	b103      	cbz	r3, 8006eca <_lseek_r+0x1e>
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	bd38      	pop	{r3, r4, r5, pc}
 8006ecc:	20000b70 	.word	0x20000b70

08006ed0 <_read_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4d07      	ldr	r5, [pc, #28]	@ (8006ef0 <_read_r+0x20>)
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	4608      	mov	r0, r1
 8006ed8:	4611      	mov	r1, r2
 8006eda:	2200      	movs	r2, #0
 8006edc:	602a      	str	r2, [r5, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f7f9 ff4e 	bl	8000d80 <_read>
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	d102      	bne.n	8006eee <_read_r+0x1e>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	b103      	cbz	r3, 8006eee <_read_r+0x1e>
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	bd38      	pop	{r3, r4, r5, pc}
 8006ef0:	20000b70 	.word	0x20000b70

08006ef4 <_write_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	4d07      	ldr	r5, [pc, #28]	@ (8006f14 <_write_r+0x20>)
 8006ef8:	4604      	mov	r4, r0
 8006efa:	4608      	mov	r0, r1
 8006efc:	4611      	mov	r1, r2
 8006efe:	2200      	movs	r2, #0
 8006f00:	602a      	str	r2, [r5, #0]
 8006f02:	461a      	mov	r2, r3
 8006f04:	f7f9 ff59 	bl	8000dba <_write>
 8006f08:	1c43      	adds	r3, r0, #1
 8006f0a:	d102      	bne.n	8006f12 <_write_r+0x1e>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	b103      	cbz	r3, 8006f12 <_write_r+0x1e>
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	bd38      	pop	{r3, r4, r5, pc}
 8006f14:	20000b70 	.word	0x20000b70

08006f18 <__errno>:
 8006f18:	4b01      	ldr	r3, [pc, #4]	@ (8006f20 <__errno+0x8>)
 8006f1a:	6818      	ldr	r0, [r3, #0]
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	20000078 	.word	0x20000078

08006f24 <__libc_init_array>:
 8006f24:	b570      	push	{r4, r5, r6, lr}
 8006f26:	4d0d      	ldr	r5, [pc, #52]	@ (8006f5c <__libc_init_array+0x38>)
 8006f28:	4c0d      	ldr	r4, [pc, #52]	@ (8006f60 <__libc_init_array+0x3c>)
 8006f2a:	1b64      	subs	r4, r4, r5
 8006f2c:	10a4      	asrs	r4, r4, #2
 8006f2e:	2600      	movs	r6, #0
 8006f30:	42a6      	cmp	r6, r4
 8006f32:	d109      	bne.n	8006f48 <__libc_init_array+0x24>
 8006f34:	4d0b      	ldr	r5, [pc, #44]	@ (8006f64 <__libc_init_array+0x40>)
 8006f36:	4c0c      	ldr	r4, [pc, #48]	@ (8006f68 <__libc_init_array+0x44>)
 8006f38:	f000 fd24 	bl	8007984 <_init>
 8006f3c:	1b64      	subs	r4, r4, r5
 8006f3e:	10a4      	asrs	r4, r4, #2
 8006f40:	2600      	movs	r6, #0
 8006f42:	42a6      	cmp	r6, r4
 8006f44:	d105      	bne.n	8006f52 <__libc_init_array+0x2e>
 8006f46:	bd70      	pop	{r4, r5, r6, pc}
 8006f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f4c:	4798      	blx	r3
 8006f4e:	3601      	adds	r6, #1
 8006f50:	e7ee      	b.n	8006f30 <__libc_init_array+0xc>
 8006f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f56:	4798      	blx	r3
 8006f58:	3601      	adds	r6, #1
 8006f5a:	e7f2      	b.n	8006f42 <__libc_init_array+0x1e>
 8006f5c:	08007c8c 	.word	0x08007c8c
 8006f60:	08007c8c 	.word	0x08007c8c
 8006f64:	08007c8c 	.word	0x08007c8c
 8006f68:	08007c90 	.word	0x08007c90

08006f6c <__retarget_lock_init_recursive>:
 8006f6c:	4770      	bx	lr

08006f6e <__retarget_lock_acquire_recursive>:
 8006f6e:	4770      	bx	lr

08006f70 <__retarget_lock_release_recursive>:
 8006f70:	4770      	bx	lr
	...

08006f74 <_free_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4605      	mov	r5, r0
 8006f78:	2900      	cmp	r1, #0
 8006f7a:	d041      	beq.n	8007000 <_free_r+0x8c>
 8006f7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f80:	1f0c      	subs	r4, r1, #4
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	bfb8      	it	lt
 8006f86:	18e4      	addlt	r4, r4, r3
 8006f88:	f000 f8e0 	bl	800714c <__malloc_lock>
 8006f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8007004 <_free_r+0x90>)
 8006f8e:	6813      	ldr	r3, [r2, #0]
 8006f90:	b933      	cbnz	r3, 8006fa0 <_free_r+0x2c>
 8006f92:	6063      	str	r3, [r4, #4]
 8006f94:	6014      	str	r4, [r2, #0]
 8006f96:	4628      	mov	r0, r5
 8006f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f9c:	f000 b8dc 	b.w	8007158 <__malloc_unlock>
 8006fa0:	42a3      	cmp	r3, r4
 8006fa2:	d908      	bls.n	8006fb6 <_free_r+0x42>
 8006fa4:	6820      	ldr	r0, [r4, #0]
 8006fa6:	1821      	adds	r1, r4, r0
 8006fa8:	428b      	cmp	r3, r1
 8006faa:	bf01      	itttt	eq
 8006fac:	6819      	ldreq	r1, [r3, #0]
 8006fae:	685b      	ldreq	r3, [r3, #4]
 8006fb0:	1809      	addeq	r1, r1, r0
 8006fb2:	6021      	streq	r1, [r4, #0]
 8006fb4:	e7ed      	b.n	8006f92 <_free_r+0x1e>
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	b10b      	cbz	r3, 8006fc0 <_free_r+0x4c>
 8006fbc:	42a3      	cmp	r3, r4
 8006fbe:	d9fa      	bls.n	8006fb6 <_free_r+0x42>
 8006fc0:	6811      	ldr	r1, [r2, #0]
 8006fc2:	1850      	adds	r0, r2, r1
 8006fc4:	42a0      	cmp	r0, r4
 8006fc6:	d10b      	bne.n	8006fe0 <_free_r+0x6c>
 8006fc8:	6820      	ldr	r0, [r4, #0]
 8006fca:	4401      	add	r1, r0
 8006fcc:	1850      	adds	r0, r2, r1
 8006fce:	4283      	cmp	r3, r0
 8006fd0:	6011      	str	r1, [r2, #0]
 8006fd2:	d1e0      	bne.n	8006f96 <_free_r+0x22>
 8006fd4:	6818      	ldr	r0, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	6053      	str	r3, [r2, #4]
 8006fda:	4408      	add	r0, r1
 8006fdc:	6010      	str	r0, [r2, #0]
 8006fde:	e7da      	b.n	8006f96 <_free_r+0x22>
 8006fe0:	d902      	bls.n	8006fe8 <_free_r+0x74>
 8006fe2:	230c      	movs	r3, #12
 8006fe4:	602b      	str	r3, [r5, #0]
 8006fe6:	e7d6      	b.n	8006f96 <_free_r+0x22>
 8006fe8:	6820      	ldr	r0, [r4, #0]
 8006fea:	1821      	adds	r1, r4, r0
 8006fec:	428b      	cmp	r3, r1
 8006fee:	bf04      	itt	eq
 8006ff0:	6819      	ldreq	r1, [r3, #0]
 8006ff2:	685b      	ldreq	r3, [r3, #4]
 8006ff4:	6063      	str	r3, [r4, #4]
 8006ff6:	bf04      	itt	eq
 8006ff8:	1809      	addeq	r1, r1, r0
 8006ffa:	6021      	streq	r1, [r4, #0]
 8006ffc:	6054      	str	r4, [r2, #4]
 8006ffe:	e7ca      	b.n	8006f96 <_free_r+0x22>
 8007000:	bd38      	pop	{r3, r4, r5, pc}
 8007002:	bf00      	nop
 8007004:	20000b7c 	.word	0x20000b7c

08007008 <sbrk_aligned>:
 8007008:	b570      	push	{r4, r5, r6, lr}
 800700a:	4e0f      	ldr	r6, [pc, #60]	@ (8007048 <sbrk_aligned+0x40>)
 800700c:	460c      	mov	r4, r1
 800700e:	6831      	ldr	r1, [r6, #0]
 8007010:	4605      	mov	r5, r0
 8007012:	b911      	cbnz	r1, 800701a <sbrk_aligned+0x12>
 8007014:	f000 fca6 	bl	8007964 <_sbrk_r>
 8007018:	6030      	str	r0, [r6, #0]
 800701a:	4621      	mov	r1, r4
 800701c:	4628      	mov	r0, r5
 800701e:	f000 fca1 	bl	8007964 <_sbrk_r>
 8007022:	1c43      	adds	r3, r0, #1
 8007024:	d103      	bne.n	800702e <sbrk_aligned+0x26>
 8007026:	f04f 34ff 	mov.w	r4, #4294967295
 800702a:	4620      	mov	r0, r4
 800702c:	bd70      	pop	{r4, r5, r6, pc}
 800702e:	1cc4      	adds	r4, r0, #3
 8007030:	f024 0403 	bic.w	r4, r4, #3
 8007034:	42a0      	cmp	r0, r4
 8007036:	d0f8      	beq.n	800702a <sbrk_aligned+0x22>
 8007038:	1a21      	subs	r1, r4, r0
 800703a:	4628      	mov	r0, r5
 800703c:	f000 fc92 	bl	8007964 <_sbrk_r>
 8007040:	3001      	adds	r0, #1
 8007042:	d1f2      	bne.n	800702a <sbrk_aligned+0x22>
 8007044:	e7ef      	b.n	8007026 <sbrk_aligned+0x1e>
 8007046:	bf00      	nop
 8007048:	20000b78 	.word	0x20000b78

0800704c <_malloc_r>:
 800704c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007050:	1ccd      	adds	r5, r1, #3
 8007052:	f025 0503 	bic.w	r5, r5, #3
 8007056:	3508      	adds	r5, #8
 8007058:	2d0c      	cmp	r5, #12
 800705a:	bf38      	it	cc
 800705c:	250c      	movcc	r5, #12
 800705e:	2d00      	cmp	r5, #0
 8007060:	4606      	mov	r6, r0
 8007062:	db01      	blt.n	8007068 <_malloc_r+0x1c>
 8007064:	42a9      	cmp	r1, r5
 8007066:	d904      	bls.n	8007072 <_malloc_r+0x26>
 8007068:	230c      	movs	r3, #12
 800706a:	6033      	str	r3, [r6, #0]
 800706c:	2000      	movs	r0, #0
 800706e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007072:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007148 <_malloc_r+0xfc>
 8007076:	f000 f869 	bl	800714c <__malloc_lock>
 800707a:	f8d8 3000 	ldr.w	r3, [r8]
 800707e:	461c      	mov	r4, r3
 8007080:	bb44      	cbnz	r4, 80070d4 <_malloc_r+0x88>
 8007082:	4629      	mov	r1, r5
 8007084:	4630      	mov	r0, r6
 8007086:	f7ff ffbf 	bl	8007008 <sbrk_aligned>
 800708a:	1c43      	adds	r3, r0, #1
 800708c:	4604      	mov	r4, r0
 800708e:	d158      	bne.n	8007142 <_malloc_r+0xf6>
 8007090:	f8d8 4000 	ldr.w	r4, [r8]
 8007094:	4627      	mov	r7, r4
 8007096:	2f00      	cmp	r7, #0
 8007098:	d143      	bne.n	8007122 <_malloc_r+0xd6>
 800709a:	2c00      	cmp	r4, #0
 800709c:	d04b      	beq.n	8007136 <_malloc_r+0xea>
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	4639      	mov	r1, r7
 80070a2:	4630      	mov	r0, r6
 80070a4:	eb04 0903 	add.w	r9, r4, r3
 80070a8:	f000 fc5c 	bl	8007964 <_sbrk_r>
 80070ac:	4581      	cmp	r9, r0
 80070ae:	d142      	bne.n	8007136 <_malloc_r+0xea>
 80070b0:	6821      	ldr	r1, [r4, #0]
 80070b2:	1a6d      	subs	r5, r5, r1
 80070b4:	4629      	mov	r1, r5
 80070b6:	4630      	mov	r0, r6
 80070b8:	f7ff ffa6 	bl	8007008 <sbrk_aligned>
 80070bc:	3001      	adds	r0, #1
 80070be:	d03a      	beq.n	8007136 <_malloc_r+0xea>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	442b      	add	r3, r5
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	f8d8 3000 	ldr.w	r3, [r8]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	bb62      	cbnz	r2, 8007128 <_malloc_r+0xdc>
 80070ce:	f8c8 7000 	str.w	r7, [r8]
 80070d2:	e00f      	b.n	80070f4 <_malloc_r+0xa8>
 80070d4:	6822      	ldr	r2, [r4, #0]
 80070d6:	1b52      	subs	r2, r2, r5
 80070d8:	d420      	bmi.n	800711c <_malloc_r+0xd0>
 80070da:	2a0b      	cmp	r2, #11
 80070dc:	d917      	bls.n	800710e <_malloc_r+0xc2>
 80070de:	1961      	adds	r1, r4, r5
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	6025      	str	r5, [r4, #0]
 80070e4:	bf18      	it	ne
 80070e6:	6059      	strne	r1, [r3, #4]
 80070e8:	6863      	ldr	r3, [r4, #4]
 80070ea:	bf08      	it	eq
 80070ec:	f8c8 1000 	streq.w	r1, [r8]
 80070f0:	5162      	str	r2, [r4, r5]
 80070f2:	604b      	str	r3, [r1, #4]
 80070f4:	4630      	mov	r0, r6
 80070f6:	f000 f82f 	bl	8007158 <__malloc_unlock>
 80070fa:	f104 000b 	add.w	r0, r4, #11
 80070fe:	1d23      	adds	r3, r4, #4
 8007100:	f020 0007 	bic.w	r0, r0, #7
 8007104:	1ac2      	subs	r2, r0, r3
 8007106:	bf1c      	itt	ne
 8007108:	1a1b      	subne	r3, r3, r0
 800710a:	50a3      	strne	r3, [r4, r2]
 800710c:	e7af      	b.n	800706e <_malloc_r+0x22>
 800710e:	6862      	ldr	r2, [r4, #4]
 8007110:	42a3      	cmp	r3, r4
 8007112:	bf0c      	ite	eq
 8007114:	f8c8 2000 	streq.w	r2, [r8]
 8007118:	605a      	strne	r2, [r3, #4]
 800711a:	e7eb      	b.n	80070f4 <_malloc_r+0xa8>
 800711c:	4623      	mov	r3, r4
 800711e:	6864      	ldr	r4, [r4, #4]
 8007120:	e7ae      	b.n	8007080 <_malloc_r+0x34>
 8007122:	463c      	mov	r4, r7
 8007124:	687f      	ldr	r7, [r7, #4]
 8007126:	e7b6      	b.n	8007096 <_malloc_r+0x4a>
 8007128:	461a      	mov	r2, r3
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	42a3      	cmp	r3, r4
 800712e:	d1fb      	bne.n	8007128 <_malloc_r+0xdc>
 8007130:	2300      	movs	r3, #0
 8007132:	6053      	str	r3, [r2, #4]
 8007134:	e7de      	b.n	80070f4 <_malloc_r+0xa8>
 8007136:	230c      	movs	r3, #12
 8007138:	6033      	str	r3, [r6, #0]
 800713a:	4630      	mov	r0, r6
 800713c:	f000 f80c 	bl	8007158 <__malloc_unlock>
 8007140:	e794      	b.n	800706c <_malloc_r+0x20>
 8007142:	6005      	str	r5, [r0, #0]
 8007144:	e7d6      	b.n	80070f4 <_malloc_r+0xa8>
 8007146:	bf00      	nop
 8007148:	20000b7c 	.word	0x20000b7c

0800714c <__malloc_lock>:
 800714c:	4801      	ldr	r0, [pc, #4]	@ (8007154 <__malloc_lock+0x8>)
 800714e:	f7ff bf0e 	b.w	8006f6e <__retarget_lock_acquire_recursive>
 8007152:	bf00      	nop
 8007154:	20000b74 	.word	0x20000b74

08007158 <__malloc_unlock>:
 8007158:	4801      	ldr	r0, [pc, #4]	@ (8007160 <__malloc_unlock+0x8>)
 800715a:	f7ff bf09 	b.w	8006f70 <__retarget_lock_release_recursive>
 800715e:	bf00      	nop
 8007160:	20000b74 	.word	0x20000b74

08007164 <__sfputc_r>:
 8007164:	6893      	ldr	r3, [r2, #8]
 8007166:	3b01      	subs	r3, #1
 8007168:	2b00      	cmp	r3, #0
 800716a:	b410      	push	{r4}
 800716c:	6093      	str	r3, [r2, #8]
 800716e:	da08      	bge.n	8007182 <__sfputc_r+0x1e>
 8007170:	6994      	ldr	r4, [r2, #24]
 8007172:	42a3      	cmp	r3, r4
 8007174:	db01      	blt.n	800717a <__sfputc_r+0x16>
 8007176:	290a      	cmp	r1, #10
 8007178:	d103      	bne.n	8007182 <__sfputc_r+0x1e>
 800717a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800717e:	f7ff bde8 	b.w	8006d52 <__swbuf_r>
 8007182:	6813      	ldr	r3, [r2, #0]
 8007184:	1c58      	adds	r0, r3, #1
 8007186:	6010      	str	r0, [r2, #0]
 8007188:	7019      	strb	r1, [r3, #0]
 800718a:	4608      	mov	r0, r1
 800718c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007190:	4770      	bx	lr

08007192 <__sfputs_r>:
 8007192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007194:	4606      	mov	r6, r0
 8007196:	460f      	mov	r7, r1
 8007198:	4614      	mov	r4, r2
 800719a:	18d5      	adds	r5, r2, r3
 800719c:	42ac      	cmp	r4, r5
 800719e:	d101      	bne.n	80071a4 <__sfputs_r+0x12>
 80071a0:	2000      	movs	r0, #0
 80071a2:	e007      	b.n	80071b4 <__sfputs_r+0x22>
 80071a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071a8:	463a      	mov	r2, r7
 80071aa:	4630      	mov	r0, r6
 80071ac:	f7ff ffda 	bl	8007164 <__sfputc_r>
 80071b0:	1c43      	adds	r3, r0, #1
 80071b2:	d1f3      	bne.n	800719c <__sfputs_r+0xa>
 80071b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071b8 <_vfiprintf_r>:
 80071b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	460d      	mov	r5, r1
 80071be:	b09d      	sub	sp, #116	@ 0x74
 80071c0:	4614      	mov	r4, r2
 80071c2:	4698      	mov	r8, r3
 80071c4:	4606      	mov	r6, r0
 80071c6:	b118      	cbz	r0, 80071d0 <_vfiprintf_r+0x18>
 80071c8:	6a03      	ldr	r3, [r0, #32]
 80071ca:	b90b      	cbnz	r3, 80071d0 <_vfiprintf_r+0x18>
 80071cc:	f7ff fcd8 	bl	8006b80 <__sinit>
 80071d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071d2:	07d9      	lsls	r1, r3, #31
 80071d4:	d405      	bmi.n	80071e2 <_vfiprintf_r+0x2a>
 80071d6:	89ab      	ldrh	r3, [r5, #12]
 80071d8:	059a      	lsls	r2, r3, #22
 80071da:	d402      	bmi.n	80071e2 <_vfiprintf_r+0x2a>
 80071dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071de:	f7ff fec6 	bl	8006f6e <__retarget_lock_acquire_recursive>
 80071e2:	89ab      	ldrh	r3, [r5, #12]
 80071e4:	071b      	lsls	r3, r3, #28
 80071e6:	d501      	bpl.n	80071ec <_vfiprintf_r+0x34>
 80071e8:	692b      	ldr	r3, [r5, #16]
 80071ea:	b99b      	cbnz	r3, 8007214 <_vfiprintf_r+0x5c>
 80071ec:	4629      	mov	r1, r5
 80071ee:	4630      	mov	r0, r6
 80071f0:	f7ff fdee 	bl	8006dd0 <__swsetup_r>
 80071f4:	b170      	cbz	r0, 8007214 <_vfiprintf_r+0x5c>
 80071f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071f8:	07dc      	lsls	r4, r3, #31
 80071fa:	d504      	bpl.n	8007206 <_vfiprintf_r+0x4e>
 80071fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007200:	b01d      	add	sp, #116	@ 0x74
 8007202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007206:	89ab      	ldrh	r3, [r5, #12]
 8007208:	0598      	lsls	r0, r3, #22
 800720a:	d4f7      	bmi.n	80071fc <_vfiprintf_r+0x44>
 800720c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800720e:	f7ff feaf 	bl	8006f70 <__retarget_lock_release_recursive>
 8007212:	e7f3      	b.n	80071fc <_vfiprintf_r+0x44>
 8007214:	2300      	movs	r3, #0
 8007216:	9309      	str	r3, [sp, #36]	@ 0x24
 8007218:	2320      	movs	r3, #32
 800721a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800721e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007222:	2330      	movs	r3, #48	@ 0x30
 8007224:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80073d4 <_vfiprintf_r+0x21c>
 8007228:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800722c:	f04f 0901 	mov.w	r9, #1
 8007230:	4623      	mov	r3, r4
 8007232:	469a      	mov	sl, r3
 8007234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007238:	b10a      	cbz	r2, 800723e <_vfiprintf_r+0x86>
 800723a:	2a25      	cmp	r2, #37	@ 0x25
 800723c:	d1f9      	bne.n	8007232 <_vfiprintf_r+0x7a>
 800723e:	ebba 0b04 	subs.w	fp, sl, r4
 8007242:	d00b      	beq.n	800725c <_vfiprintf_r+0xa4>
 8007244:	465b      	mov	r3, fp
 8007246:	4622      	mov	r2, r4
 8007248:	4629      	mov	r1, r5
 800724a:	4630      	mov	r0, r6
 800724c:	f7ff ffa1 	bl	8007192 <__sfputs_r>
 8007250:	3001      	adds	r0, #1
 8007252:	f000 80a7 	beq.w	80073a4 <_vfiprintf_r+0x1ec>
 8007256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007258:	445a      	add	r2, fp
 800725a:	9209      	str	r2, [sp, #36]	@ 0x24
 800725c:	f89a 3000 	ldrb.w	r3, [sl]
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 809f 	beq.w	80073a4 <_vfiprintf_r+0x1ec>
 8007266:	2300      	movs	r3, #0
 8007268:	f04f 32ff 	mov.w	r2, #4294967295
 800726c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007270:	f10a 0a01 	add.w	sl, sl, #1
 8007274:	9304      	str	r3, [sp, #16]
 8007276:	9307      	str	r3, [sp, #28]
 8007278:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800727c:	931a      	str	r3, [sp, #104]	@ 0x68
 800727e:	4654      	mov	r4, sl
 8007280:	2205      	movs	r2, #5
 8007282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007286:	4853      	ldr	r0, [pc, #332]	@ (80073d4 <_vfiprintf_r+0x21c>)
 8007288:	f7f8 ffb2 	bl	80001f0 <memchr>
 800728c:	9a04      	ldr	r2, [sp, #16]
 800728e:	b9d8      	cbnz	r0, 80072c8 <_vfiprintf_r+0x110>
 8007290:	06d1      	lsls	r1, r2, #27
 8007292:	bf44      	itt	mi
 8007294:	2320      	movmi	r3, #32
 8007296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800729a:	0713      	lsls	r3, r2, #28
 800729c:	bf44      	itt	mi
 800729e:	232b      	movmi	r3, #43	@ 0x2b
 80072a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072a4:	f89a 3000 	ldrb.w	r3, [sl]
 80072a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80072aa:	d015      	beq.n	80072d8 <_vfiprintf_r+0x120>
 80072ac:	9a07      	ldr	r2, [sp, #28]
 80072ae:	4654      	mov	r4, sl
 80072b0:	2000      	movs	r0, #0
 80072b2:	f04f 0c0a 	mov.w	ip, #10
 80072b6:	4621      	mov	r1, r4
 80072b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072bc:	3b30      	subs	r3, #48	@ 0x30
 80072be:	2b09      	cmp	r3, #9
 80072c0:	d94b      	bls.n	800735a <_vfiprintf_r+0x1a2>
 80072c2:	b1b0      	cbz	r0, 80072f2 <_vfiprintf_r+0x13a>
 80072c4:	9207      	str	r2, [sp, #28]
 80072c6:	e014      	b.n	80072f2 <_vfiprintf_r+0x13a>
 80072c8:	eba0 0308 	sub.w	r3, r0, r8
 80072cc:	fa09 f303 	lsl.w	r3, r9, r3
 80072d0:	4313      	orrs	r3, r2
 80072d2:	9304      	str	r3, [sp, #16]
 80072d4:	46a2      	mov	sl, r4
 80072d6:	e7d2      	b.n	800727e <_vfiprintf_r+0xc6>
 80072d8:	9b03      	ldr	r3, [sp, #12]
 80072da:	1d19      	adds	r1, r3, #4
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	9103      	str	r1, [sp, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bfbb      	ittet	lt
 80072e4:	425b      	neglt	r3, r3
 80072e6:	f042 0202 	orrlt.w	r2, r2, #2
 80072ea:	9307      	strge	r3, [sp, #28]
 80072ec:	9307      	strlt	r3, [sp, #28]
 80072ee:	bfb8      	it	lt
 80072f0:	9204      	strlt	r2, [sp, #16]
 80072f2:	7823      	ldrb	r3, [r4, #0]
 80072f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80072f6:	d10a      	bne.n	800730e <_vfiprintf_r+0x156>
 80072f8:	7863      	ldrb	r3, [r4, #1]
 80072fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80072fc:	d132      	bne.n	8007364 <_vfiprintf_r+0x1ac>
 80072fe:	9b03      	ldr	r3, [sp, #12]
 8007300:	1d1a      	adds	r2, r3, #4
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	9203      	str	r2, [sp, #12]
 8007306:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800730a:	3402      	adds	r4, #2
 800730c:	9305      	str	r3, [sp, #20]
 800730e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80073e4 <_vfiprintf_r+0x22c>
 8007312:	7821      	ldrb	r1, [r4, #0]
 8007314:	2203      	movs	r2, #3
 8007316:	4650      	mov	r0, sl
 8007318:	f7f8 ff6a 	bl	80001f0 <memchr>
 800731c:	b138      	cbz	r0, 800732e <_vfiprintf_r+0x176>
 800731e:	9b04      	ldr	r3, [sp, #16]
 8007320:	eba0 000a 	sub.w	r0, r0, sl
 8007324:	2240      	movs	r2, #64	@ 0x40
 8007326:	4082      	lsls	r2, r0
 8007328:	4313      	orrs	r3, r2
 800732a:	3401      	adds	r4, #1
 800732c:	9304      	str	r3, [sp, #16]
 800732e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007332:	4829      	ldr	r0, [pc, #164]	@ (80073d8 <_vfiprintf_r+0x220>)
 8007334:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007338:	2206      	movs	r2, #6
 800733a:	f7f8 ff59 	bl	80001f0 <memchr>
 800733e:	2800      	cmp	r0, #0
 8007340:	d03f      	beq.n	80073c2 <_vfiprintf_r+0x20a>
 8007342:	4b26      	ldr	r3, [pc, #152]	@ (80073dc <_vfiprintf_r+0x224>)
 8007344:	bb1b      	cbnz	r3, 800738e <_vfiprintf_r+0x1d6>
 8007346:	9b03      	ldr	r3, [sp, #12]
 8007348:	3307      	adds	r3, #7
 800734a:	f023 0307 	bic.w	r3, r3, #7
 800734e:	3308      	adds	r3, #8
 8007350:	9303      	str	r3, [sp, #12]
 8007352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007354:	443b      	add	r3, r7
 8007356:	9309      	str	r3, [sp, #36]	@ 0x24
 8007358:	e76a      	b.n	8007230 <_vfiprintf_r+0x78>
 800735a:	fb0c 3202 	mla	r2, ip, r2, r3
 800735e:	460c      	mov	r4, r1
 8007360:	2001      	movs	r0, #1
 8007362:	e7a8      	b.n	80072b6 <_vfiprintf_r+0xfe>
 8007364:	2300      	movs	r3, #0
 8007366:	3401      	adds	r4, #1
 8007368:	9305      	str	r3, [sp, #20]
 800736a:	4619      	mov	r1, r3
 800736c:	f04f 0c0a 	mov.w	ip, #10
 8007370:	4620      	mov	r0, r4
 8007372:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007376:	3a30      	subs	r2, #48	@ 0x30
 8007378:	2a09      	cmp	r2, #9
 800737a:	d903      	bls.n	8007384 <_vfiprintf_r+0x1cc>
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0c6      	beq.n	800730e <_vfiprintf_r+0x156>
 8007380:	9105      	str	r1, [sp, #20]
 8007382:	e7c4      	b.n	800730e <_vfiprintf_r+0x156>
 8007384:	fb0c 2101 	mla	r1, ip, r1, r2
 8007388:	4604      	mov	r4, r0
 800738a:	2301      	movs	r3, #1
 800738c:	e7f0      	b.n	8007370 <_vfiprintf_r+0x1b8>
 800738e:	ab03      	add	r3, sp, #12
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	462a      	mov	r2, r5
 8007394:	4b12      	ldr	r3, [pc, #72]	@ (80073e0 <_vfiprintf_r+0x228>)
 8007396:	a904      	add	r1, sp, #16
 8007398:	4630      	mov	r0, r6
 800739a:	f3af 8000 	nop.w
 800739e:	4607      	mov	r7, r0
 80073a0:	1c78      	adds	r0, r7, #1
 80073a2:	d1d6      	bne.n	8007352 <_vfiprintf_r+0x19a>
 80073a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073a6:	07d9      	lsls	r1, r3, #31
 80073a8:	d405      	bmi.n	80073b6 <_vfiprintf_r+0x1fe>
 80073aa:	89ab      	ldrh	r3, [r5, #12]
 80073ac:	059a      	lsls	r2, r3, #22
 80073ae:	d402      	bmi.n	80073b6 <_vfiprintf_r+0x1fe>
 80073b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073b2:	f7ff fddd 	bl	8006f70 <__retarget_lock_release_recursive>
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	065b      	lsls	r3, r3, #25
 80073ba:	f53f af1f 	bmi.w	80071fc <_vfiprintf_r+0x44>
 80073be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073c0:	e71e      	b.n	8007200 <_vfiprintf_r+0x48>
 80073c2:	ab03      	add	r3, sp, #12
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	462a      	mov	r2, r5
 80073c8:	4b05      	ldr	r3, [pc, #20]	@ (80073e0 <_vfiprintf_r+0x228>)
 80073ca:	a904      	add	r1, sp, #16
 80073cc:	4630      	mov	r0, r6
 80073ce:	f000 f879 	bl	80074c4 <_printf_i>
 80073d2:	e7e4      	b.n	800739e <_vfiprintf_r+0x1e6>
 80073d4:	08007c50 	.word	0x08007c50
 80073d8:	08007c5a 	.word	0x08007c5a
 80073dc:	00000000 	.word	0x00000000
 80073e0:	08007193 	.word	0x08007193
 80073e4:	08007c56 	.word	0x08007c56

080073e8 <_printf_common>:
 80073e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ec:	4616      	mov	r6, r2
 80073ee:	4698      	mov	r8, r3
 80073f0:	688a      	ldr	r2, [r1, #8]
 80073f2:	690b      	ldr	r3, [r1, #16]
 80073f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073f8:	4293      	cmp	r3, r2
 80073fa:	bfb8      	it	lt
 80073fc:	4613      	movlt	r3, r2
 80073fe:	6033      	str	r3, [r6, #0]
 8007400:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007404:	4607      	mov	r7, r0
 8007406:	460c      	mov	r4, r1
 8007408:	b10a      	cbz	r2, 800740e <_printf_common+0x26>
 800740a:	3301      	adds	r3, #1
 800740c:	6033      	str	r3, [r6, #0]
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	0699      	lsls	r1, r3, #26
 8007412:	bf42      	ittt	mi
 8007414:	6833      	ldrmi	r3, [r6, #0]
 8007416:	3302      	addmi	r3, #2
 8007418:	6033      	strmi	r3, [r6, #0]
 800741a:	6825      	ldr	r5, [r4, #0]
 800741c:	f015 0506 	ands.w	r5, r5, #6
 8007420:	d106      	bne.n	8007430 <_printf_common+0x48>
 8007422:	f104 0a19 	add.w	sl, r4, #25
 8007426:	68e3      	ldr	r3, [r4, #12]
 8007428:	6832      	ldr	r2, [r6, #0]
 800742a:	1a9b      	subs	r3, r3, r2
 800742c:	42ab      	cmp	r3, r5
 800742e:	dc26      	bgt.n	800747e <_printf_common+0x96>
 8007430:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007434:	6822      	ldr	r2, [r4, #0]
 8007436:	3b00      	subs	r3, #0
 8007438:	bf18      	it	ne
 800743a:	2301      	movne	r3, #1
 800743c:	0692      	lsls	r2, r2, #26
 800743e:	d42b      	bmi.n	8007498 <_printf_common+0xb0>
 8007440:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007444:	4641      	mov	r1, r8
 8007446:	4638      	mov	r0, r7
 8007448:	47c8      	blx	r9
 800744a:	3001      	adds	r0, #1
 800744c:	d01e      	beq.n	800748c <_printf_common+0xa4>
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	6922      	ldr	r2, [r4, #16]
 8007452:	f003 0306 	and.w	r3, r3, #6
 8007456:	2b04      	cmp	r3, #4
 8007458:	bf02      	ittt	eq
 800745a:	68e5      	ldreq	r5, [r4, #12]
 800745c:	6833      	ldreq	r3, [r6, #0]
 800745e:	1aed      	subeq	r5, r5, r3
 8007460:	68a3      	ldr	r3, [r4, #8]
 8007462:	bf0c      	ite	eq
 8007464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007468:	2500      	movne	r5, #0
 800746a:	4293      	cmp	r3, r2
 800746c:	bfc4      	itt	gt
 800746e:	1a9b      	subgt	r3, r3, r2
 8007470:	18ed      	addgt	r5, r5, r3
 8007472:	2600      	movs	r6, #0
 8007474:	341a      	adds	r4, #26
 8007476:	42b5      	cmp	r5, r6
 8007478:	d11a      	bne.n	80074b0 <_printf_common+0xc8>
 800747a:	2000      	movs	r0, #0
 800747c:	e008      	b.n	8007490 <_printf_common+0xa8>
 800747e:	2301      	movs	r3, #1
 8007480:	4652      	mov	r2, sl
 8007482:	4641      	mov	r1, r8
 8007484:	4638      	mov	r0, r7
 8007486:	47c8      	blx	r9
 8007488:	3001      	adds	r0, #1
 800748a:	d103      	bne.n	8007494 <_printf_common+0xac>
 800748c:	f04f 30ff 	mov.w	r0, #4294967295
 8007490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007494:	3501      	adds	r5, #1
 8007496:	e7c6      	b.n	8007426 <_printf_common+0x3e>
 8007498:	18e1      	adds	r1, r4, r3
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	2030      	movs	r0, #48	@ 0x30
 800749e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074a2:	4422      	add	r2, r4
 80074a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074ac:	3302      	adds	r3, #2
 80074ae:	e7c7      	b.n	8007440 <_printf_common+0x58>
 80074b0:	2301      	movs	r3, #1
 80074b2:	4622      	mov	r2, r4
 80074b4:	4641      	mov	r1, r8
 80074b6:	4638      	mov	r0, r7
 80074b8:	47c8      	blx	r9
 80074ba:	3001      	adds	r0, #1
 80074bc:	d0e6      	beq.n	800748c <_printf_common+0xa4>
 80074be:	3601      	adds	r6, #1
 80074c0:	e7d9      	b.n	8007476 <_printf_common+0x8e>
	...

080074c4 <_printf_i>:
 80074c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074c8:	7e0f      	ldrb	r7, [r1, #24]
 80074ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074cc:	2f78      	cmp	r7, #120	@ 0x78
 80074ce:	4691      	mov	r9, r2
 80074d0:	4680      	mov	r8, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	469a      	mov	sl, r3
 80074d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80074da:	d807      	bhi.n	80074ec <_printf_i+0x28>
 80074dc:	2f62      	cmp	r7, #98	@ 0x62
 80074de:	d80a      	bhi.n	80074f6 <_printf_i+0x32>
 80074e0:	2f00      	cmp	r7, #0
 80074e2:	f000 80d2 	beq.w	800768a <_printf_i+0x1c6>
 80074e6:	2f58      	cmp	r7, #88	@ 0x58
 80074e8:	f000 80b9 	beq.w	800765e <_printf_i+0x19a>
 80074ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074f4:	e03a      	b.n	800756c <_printf_i+0xa8>
 80074f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074fa:	2b15      	cmp	r3, #21
 80074fc:	d8f6      	bhi.n	80074ec <_printf_i+0x28>
 80074fe:	a101      	add	r1, pc, #4	@ (adr r1, 8007504 <_printf_i+0x40>)
 8007500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007504:	0800755d 	.word	0x0800755d
 8007508:	08007571 	.word	0x08007571
 800750c:	080074ed 	.word	0x080074ed
 8007510:	080074ed 	.word	0x080074ed
 8007514:	080074ed 	.word	0x080074ed
 8007518:	080074ed 	.word	0x080074ed
 800751c:	08007571 	.word	0x08007571
 8007520:	080074ed 	.word	0x080074ed
 8007524:	080074ed 	.word	0x080074ed
 8007528:	080074ed 	.word	0x080074ed
 800752c:	080074ed 	.word	0x080074ed
 8007530:	08007671 	.word	0x08007671
 8007534:	0800759b 	.word	0x0800759b
 8007538:	0800762b 	.word	0x0800762b
 800753c:	080074ed 	.word	0x080074ed
 8007540:	080074ed 	.word	0x080074ed
 8007544:	08007693 	.word	0x08007693
 8007548:	080074ed 	.word	0x080074ed
 800754c:	0800759b 	.word	0x0800759b
 8007550:	080074ed 	.word	0x080074ed
 8007554:	080074ed 	.word	0x080074ed
 8007558:	08007633 	.word	0x08007633
 800755c:	6833      	ldr	r3, [r6, #0]
 800755e:	1d1a      	adds	r2, r3, #4
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6032      	str	r2, [r6, #0]
 8007564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007568:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800756c:	2301      	movs	r3, #1
 800756e:	e09d      	b.n	80076ac <_printf_i+0x1e8>
 8007570:	6833      	ldr	r3, [r6, #0]
 8007572:	6820      	ldr	r0, [r4, #0]
 8007574:	1d19      	adds	r1, r3, #4
 8007576:	6031      	str	r1, [r6, #0]
 8007578:	0606      	lsls	r6, r0, #24
 800757a:	d501      	bpl.n	8007580 <_printf_i+0xbc>
 800757c:	681d      	ldr	r5, [r3, #0]
 800757e:	e003      	b.n	8007588 <_printf_i+0xc4>
 8007580:	0645      	lsls	r5, r0, #25
 8007582:	d5fb      	bpl.n	800757c <_printf_i+0xb8>
 8007584:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007588:	2d00      	cmp	r5, #0
 800758a:	da03      	bge.n	8007594 <_printf_i+0xd0>
 800758c:	232d      	movs	r3, #45	@ 0x2d
 800758e:	426d      	negs	r5, r5
 8007590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007594:	4859      	ldr	r0, [pc, #356]	@ (80076fc <_printf_i+0x238>)
 8007596:	230a      	movs	r3, #10
 8007598:	e011      	b.n	80075be <_printf_i+0xfa>
 800759a:	6821      	ldr	r1, [r4, #0]
 800759c:	6833      	ldr	r3, [r6, #0]
 800759e:	0608      	lsls	r0, r1, #24
 80075a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80075a4:	d402      	bmi.n	80075ac <_printf_i+0xe8>
 80075a6:	0649      	lsls	r1, r1, #25
 80075a8:	bf48      	it	mi
 80075aa:	b2ad      	uxthmi	r5, r5
 80075ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80075ae:	4853      	ldr	r0, [pc, #332]	@ (80076fc <_printf_i+0x238>)
 80075b0:	6033      	str	r3, [r6, #0]
 80075b2:	bf14      	ite	ne
 80075b4:	230a      	movne	r3, #10
 80075b6:	2308      	moveq	r3, #8
 80075b8:	2100      	movs	r1, #0
 80075ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075be:	6866      	ldr	r6, [r4, #4]
 80075c0:	60a6      	str	r6, [r4, #8]
 80075c2:	2e00      	cmp	r6, #0
 80075c4:	bfa2      	ittt	ge
 80075c6:	6821      	ldrge	r1, [r4, #0]
 80075c8:	f021 0104 	bicge.w	r1, r1, #4
 80075cc:	6021      	strge	r1, [r4, #0]
 80075ce:	b90d      	cbnz	r5, 80075d4 <_printf_i+0x110>
 80075d0:	2e00      	cmp	r6, #0
 80075d2:	d04b      	beq.n	800766c <_printf_i+0x1a8>
 80075d4:	4616      	mov	r6, r2
 80075d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80075da:	fb03 5711 	mls	r7, r3, r1, r5
 80075de:	5dc7      	ldrb	r7, [r0, r7]
 80075e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075e4:	462f      	mov	r7, r5
 80075e6:	42bb      	cmp	r3, r7
 80075e8:	460d      	mov	r5, r1
 80075ea:	d9f4      	bls.n	80075d6 <_printf_i+0x112>
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d10b      	bne.n	8007608 <_printf_i+0x144>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	07df      	lsls	r7, r3, #31
 80075f4:	d508      	bpl.n	8007608 <_printf_i+0x144>
 80075f6:	6923      	ldr	r3, [r4, #16]
 80075f8:	6861      	ldr	r1, [r4, #4]
 80075fa:	4299      	cmp	r1, r3
 80075fc:	bfde      	ittt	le
 80075fe:	2330      	movle	r3, #48	@ 0x30
 8007600:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007604:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007608:	1b92      	subs	r2, r2, r6
 800760a:	6122      	str	r2, [r4, #16]
 800760c:	f8cd a000 	str.w	sl, [sp]
 8007610:	464b      	mov	r3, r9
 8007612:	aa03      	add	r2, sp, #12
 8007614:	4621      	mov	r1, r4
 8007616:	4640      	mov	r0, r8
 8007618:	f7ff fee6 	bl	80073e8 <_printf_common>
 800761c:	3001      	adds	r0, #1
 800761e:	d14a      	bne.n	80076b6 <_printf_i+0x1f2>
 8007620:	f04f 30ff 	mov.w	r0, #4294967295
 8007624:	b004      	add	sp, #16
 8007626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	f043 0320 	orr.w	r3, r3, #32
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	4833      	ldr	r0, [pc, #204]	@ (8007700 <_printf_i+0x23c>)
 8007634:	2778      	movs	r7, #120	@ 0x78
 8007636:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	6831      	ldr	r1, [r6, #0]
 800763e:	061f      	lsls	r7, r3, #24
 8007640:	f851 5b04 	ldr.w	r5, [r1], #4
 8007644:	d402      	bmi.n	800764c <_printf_i+0x188>
 8007646:	065f      	lsls	r7, r3, #25
 8007648:	bf48      	it	mi
 800764a:	b2ad      	uxthmi	r5, r5
 800764c:	6031      	str	r1, [r6, #0]
 800764e:	07d9      	lsls	r1, r3, #31
 8007650:	bf44      	itt	mi
 8007652:	f043 0320 	orrmi.w	r3, r3, #32
 8007656:	6023      	strmi	r3, [r4, #0]
 8007658:	b11d      	cbz	r5, 8007662 <_printf_i+0x19e>
 800765a:	2310      	movs	r3, #16
 800765c:	e7ac      	b.n	80075b8 <_printf_i+0xf4>
 800765e:	4827      	ldr	r0, [pc, #156]	@ (80076fc <_printf_i+0x238>)
 8007660:	e7e9      	b.n	8007636 <_printf_i+0x172>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	f023 0320 	bic.w	r3, r3, #32
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	e7f6      	b.n	800765a <_printf_i+0x196>
 800766c:	4616      	mov	r6, r2
 800766e:	e7bd      	b.n	80075ec <_printf_i+0x128>
 8007670:	6833      	ldr	r3, [r6, #0]
 8007672:	6825      	ldr	r5, [r4, #0]
 8007674:	6961      	ldr	r1, [r4, #20]
 8007676:	1d18      	adds	r0, r3, #4
 8007678:	6030      	str	r0, [r6, #0]
 800767a:	062e      	lsls	r6, r5, #24
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	d501      	bpl.n	8007684 <_printf_i+0x1c0>
 8007680:	6019      	str	r1, [r3, #0]
 8007682:	e002      	b.n	800768a <_printf_i+0x1c6>
 8007684:	0668      	lsls	r0, r5, #25
 8007686:	d5fb      	bpl.n	8007680 <_printf_i+0x1bc>
 8007688:	8019      	strh	r1, [r3, #0]
 800768a:	2300      	movs	r3, #0
 800768c:	6123      	str	r3, [r4, #16]
 800768e:	4616      	mov	r6, r2
 8007690:	e7bc      	b.n	800760c <_printf_i+0x148>
 8007692:	6833      	ldr	r3, [r6, #0]
 8007694:	1d1a      	adds	r2, r3, #4
 8007696:	6032      	str	r2, [r6, #0]
 8007698:	681e      	ldr	r6, [r3, #0]
 800769a:	6862      	ldr	r2, [r4, #4]
 800769c:	2100      	movs	r1, #0
 800769e:	4630      	mov	r0, r6
 80076a0:	f7f8 fda6 	bl	80001f0 <memchr>
 80076a4:	b108      	cbz	r0, 80076aa <_printf_i+0x1e6>
 80076a6:	1b80      	subs	r0, r0, r6
 80076a8:	6060      	str	r0, [r4, #4]
 80076aa:	6863      	ldr	r3, [r4, #4]
 80076ac:	6123      	str	r3, [r4, #16]
 80076ae:	2300      	movs	r3, #0
 80076b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076b4:	e7aa      	b.n	800760c <_printf_i+0x148>
 80076b6:	6923      	ldr	r3, [r4, #16]
 80076b8:	4632      	mov	r2, r6
 80076ba:	4649      	mov	r1, r9
 80076bc:	4640      	mov	r0, r8
 80076be:	47d0      	blx	sl
 80076c0:	3001      	adds	r0, #1
 80076c2:	d0ad      	beq.n	8007620 <_printf_i+0x15c>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	079b      	lsls	r3, r3, #30
 80076c8:	d413      	bmi.n	80076f2 <_printf_i+0x22e>
 80076ca:	68e0      	ldr	r0, [r4, #12]
 80076cc:	9b03      	ldr	r3, [sp, #12]
 80076ce:	4298      	cmp	r0, r3
 80076d0:	bfb8      	it	lt
 80076d2:	4618      	movlt	r0, r3
 80076d4:	e7a6      	b.n	8007624 <_printf_i+0x160>
 80076d6:	2301      	movs	r3, #1
 80076d8:	4632      	mov	r2, r6
 80076da:	4649      	mov	r1, r9
 80076dc:	4640      	mov	r0, r8
 80076de:	47d0      	blx	sl
 80076e0:	3001      	adds	r0, #1
 80076e2:	d09d      	beq.n	8007620 <_printf_i+0x15c>
 80076e4:	3501      	adds	r5, #1
 80076e6:	68e3      	ldr	r3, [r4, #12]
 80076e8:	9903      	ldr	r1, [sp, #12]
 80076ea:	1a5b      	subs	r3, r3, r1
 80076ec:	42ab      	cmp	r3, r5
 80076ee:	dcf2      	bgt.n	80076d6 <_printf_i+0x212>
 80076f0:	e7eb      	b.n	80076ca <_printf_i+0x206>
 80076f2:	2500      	movs	r5, #0
 80076f4:	f104 0619 	add.w	r6, r4, #25
 80076f8:	e7f5      	b.n	80076e6 <_printf_i+0x222>
 80076fa:	bf00      	nop
 80076fc:	08007c61 	.word	0x08007c61
 8007700:	08007c72 	.word	0x08007c72

08007704 <__sflush_r>:
 8007704:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800770c:	0716      	lsls	r6, r2, #28
 800770e:	4605      	mov	r5, r0
 8007710:	460c      	mov	r4, r1
 8007712:	d454      	bmi.n	80077be <__sflush_r+0xba>
 8007714:	684b      	ldr	r3, [r1, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	dc02      	bgt.n	8007720 <__sflush_r+0x1c>
 800771a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800771c:	2b00      	cmp	r3, #0
 800771e:	dd48      	ble.n	80077b2 <__sflush_r+0xae>
 8007720:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007722:	2e00      	cmp	r6, #0
 8007724:	d045      	beq.n	80077b2 <__sflush_r+0xae>
 8007726:	2300      	movs	r3, #0
 8007728:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800772c:	682f      	ldr	r7, [r5, #0]
 800772e:	6a21      	ldr	r1, [r4, #32]
 8007730:	602b      	str	r3, [r5, #0]
 8007732:	d030      	beq.n	8007796 <__sflush_r+0x92>
 8007734:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007736:	89a3      	ldrh	r3, [r4, #12]
 8007738:	0759      	lsls	r1, r3, #29
 800773a:	d505      	bpl.n	8007748 <__sflush_r+0x44>
 800773c:	6863      	ldr	r3, [r4, #4]
 800773e:	1ad2      	subs	r2, r2, r3
 8007740:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007742:	b10b      	cbz	r3, 8007748 <__sflush_r+0x44>
 8007744:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007746:	1ad2      	subs	r2, r2, r3
 8007748:	2300      	movs	r3, #0
 800774a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800774c:	6a21      	ldr	r1, [r4, #32]
 800774e:	4628      	mov	r0, r5
 8007750:	47b0      	blx	r6
 8007752:	1c43      	adds	r3, r0, #1
 8007754:	89a3      	ldrh	r3, [r4, #12]
 8007756:	d106      	bne.n	8007766 <__sflush_r+0x62>
 8007758:	6829      	ldr	r1, [r5, #0]
 800775a:	291d      	cmp	r1, #29
 800775c:	d82b      	bhi.n	80077b6 <__sflush_r+0xb2>
 800775e:	4a2a      	ldr	r2, [pc, #168]	@ (8007808 <__sflush_r+0x104>)
 8007760:	410a      	asrs	r2, r1
 8007762:	07d6      	lsls	r6, r2, #31
 8007764:	d427      	bmi.n	80077b6 <__sflush_r+0xb2>
 8007766:	2200      	movs	r2, #0
 8007768:	6062      	str	r2, [r4, #4]
 800776a:	04d9      	lsls	r1, r3, #19
 800776c:	6922      	ldr	r2, [r4, #16]
 800776e:	6022      	str	r2, [r4, #0]
 8007770:	d504      	bpl.n	800777c <__sflush_r+0x78>
 8007772:	1c42      	adds	r2, r0, #1
 8007774:	d101      	bne.n	800777a <__sflush_r+0x76>
 8007776:	682b      	ldr	r3, [r5, #0]
 8007778:	b903      	cbnz	r3, 800777c <__sflush_r+0x78>
 800777a:	6560      	str	r0, [r4, #84]	@ 0x54
 800777c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800777e:	602f      	str	r7, [r5, #0]
 8007780:	b1b9      	cbz	r1, 80077b2 <__sflush_r+0xae>
 8007782:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007786:	4299      	cmp	r1, r3
 8007788:	d002      	beq.n	8007790 <__sflush_r+0x8c>
 800778a:	4628      	mov	r0, r5
 800778c:	f7ff fbf2 	bl	8006f74 <_free_r>
 8007790:	2300      	movs	r3, #0
 8007792:	6363      	str	r3, [r4, #52]	@ 0x34
 8007794:	e00d      	b.n	80077b2 <__sflush_r+0xae>
 8007796:	2301      	movs	r3, #1
 8007798:	4628      	mov	r0, r5
 800779a:	47b0      	blx	r6
 800779c:	4602      	mov	r2, r0
 800779e:	1c50      	adds	r0, r2, #1
 80077a0:	d1c9      	bne.n	8007736 <__sflush_r+0x32>
 80077a2:	682b      	ldr	r3, [r5, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d0c6      	beq.n	8007736 <__sflush_r+0x32>
 80077a8:	2b1d      	cmp	r3, #29
 80077aa:	d001      	beq.n	80077b0 <__sflush_r+0xac>
 80077ac:	2b16      	cmp	r3, #22
 80077ae:	d11e      	bne.n	80077ee <__sflush_r+0xea>
 80077b0:	602f      	str	r7, [r5, #0]
 80077b2:	2000      	movs	r0, #0
 80077b4:	e022      	b.n	80077fc <__sflush_r+0xf8>
 80077b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ba:	b21b      	sxth	r3, r3
 80077bc:	e01b      	b.n	80077f6 <__sflush_r+0xf2>
 80077be:	690f      	ldr	r7, [r1, #16]
 80077c0:	2f00      	cmp	r7, #0
 80077c2:	d0f6      	beq.n	80077b2 <__sflush_r+0xae>
 80077c4:	0793      	lsls	r3, r2, #30
 80077c6:	680e      	ldr	r6, [r1, #0]
 80077c8:	bf08      	it	eq
 80077ca:	694b      	ldreq	r3, [r1, #20]
 80077cc:	600f      	str	r7, [r1, #0]
 80077ce:	bf18      	it	ne
 80077d0:	2300      	movne	r3, #0
 80077d2:	eba6 0807 	sub.w	r8, r6, r7
 80077d6:	608b      	str	r3, [r1, #8]
 80077d8:	f1b8 0f00 	cmp.w	r8, #0
 80077dc:	dde9      	ble.n	80077b2 <__sflush_r+0xae>
 80077de:	6a21      	ldr	r1, [r4, #32]
 80077e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80077e2:	4643      	mov	r3, r8
 80077e4:	463a      	mov	r2, r7
 80077e6:	4628      	mov	r0, r5
 80077e8:	47b0      	blx	r6
 80077ea:	2800      	cmp	r0, #0
 80077ec:	dc08      	bgt.n	8007800 <__sflush_r+0xfc>
 80077ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077f6:	81a3      	strh	r3, [r4, #12]
 80077f8:	f04f 30ff 	mov.w	r0, #4294967295
 80077fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007800:	4407      	add	r7, r0
 8007802:	eba8 0800 	sub.w	r8, r8, r0
 8007806:	e7e7      	b.n	80077d8 <__sflush_r+0xd4>
 8007808:	dfbffffe 	.word	0xdfbffffe

0800780c <_fflush_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	690b      	ldr	r3, [r1, #16]
 8007810:	4605      	mov	r5, r0
 8007812:	460c      	mov	r4, r1
 8007814:	b913      	cbnz	r3, 800781c <_fflush_r+0x10>
 8007816:	2500      	movs	r5, #0
 8007818:	4628      	mov	r0, r5
 800781a:	bd38      	pop	{r3, r4, r5, pc}
 800781c:	b118      	cbz	r0, 8007826 <_fflush_r+0x1a>
 800781e:	6a03      	ldr	r3, [r0, #32]
 8007820:	b90b      	cbnz	r3, 8007826 <_fflush_r+0x1a>
 8007822:	f7ff f9ad 	bl	8006b80 <__sinit>
 8007826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0f3      	beq.n	8007816 <_fflush_r+0xa>
 800782e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007830:	07d0      	lsls	r0, r2, #31
 8007832:	d404      	bmi.n	800783e <_fflush_r+0x32>
 8007834:	0599      	lsls	r1, r3, #22
 8007836:	d402      	bmi.n	800783e <_fflush_r+0x32>
 8007838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800783a:	f7ff fb98 	bl	8006f6e <__retarget_lock_acquire_recursive>
 800783e:	4628      	mov	r0, r5
 8007840:	4621      	mov	r1, r4
 8007842:	f7ff ff5f 	bl	8007704 <__sflush_r>
 8007846:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007848:	07da      	lsls	r2, r3, #31
 800784a:	4605      	mov	r5, r0
 800784c:	d4e4      	bmi.n	8007818 <_fflush_r+0xc>
 800784e:	89a3      	ldrh	r3, [r4, #12]
 8007850:	059b      	lsls	r3, r3, #22
 8007852:	d4e1      	bmi.n	8007818 <_fflush_r+0xc>
 8007854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007856:	f7ff fb8b 	bl	8006f70 <__retarget_lock_release_recursive>
 800785a:	e7dd      	b.n	8007818 <_fflush_r+0xc>

0800785c <__swhatbuf_r>:
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	460c      	mov	r4, r1
 8007860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007864:	2900      	cmp	r1, #0
 8007866:	b096      	sub	sp, #88	@ 0x58
 8007868:	4615      	mov	r5, r2
 800786a:	461e      	mov	r6, r3
 800786c:	da0d      	bge.n	800788a <__swhatbuf_r+0x2e>
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007874:	f04f 0100 	mov.w	r1, #0
 8007878:	bf14      	ite	ne
 800787a:	2340      	movne	r3, #64	@ 0x40
 800787c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007880:	2000      	movs	r0, #0
 8007882:	6031      	str	r1, [r6, #0]
 8007884:	602b      	str	r3, [r5, #0]
 8007886:	b016      	add	sp, #88	@ 0x58
 8007888:	bd70      	pop	{r4, r5, r6, pc}
 800788a:	466a      	mov	r2, sp
 800788c:	f000 f848 	bl	8007920 <_fstat_r>
 8007890:	2800      	cmp	r0, #0
 8007892:	dbec      	blt.n	800786e <__swhatbuf_r+0x12>
 8007894:	9901      	ldr	r1, [sp, #4]
 8007896:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800789a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800789e:	4259      	negs	r1, r3
 80078a0:	4159      	adcs	r1, r3
 80078a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078a6:	e7eb      	b.n	8007880 <__swhatbuf_r+0x24>

080078a8 <__smakebuf_r>:
 80078a8:	898b      	ldrh	r3, [r1, #12]
 80078aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078ac:	079d      	lsls	r5, r3, #30
 80078ae:	4606      	mov	r6, r0
 80078b0:	460c      	mov	r4, r1
 80078b2:	d507      	bpl.n	80078c4 <__smakebuf_r+0x1c>
 80078b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	6123      	str	r3, [r4, #16]
 80078bc:	2301      	movs	r3, #1
 80078be:	6163      	str	r3, [r4, #20]
 80078c0:	b003      	add	sp, #12
 80078c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078c4:	ab01      	add	r3, sp, #4
 80078c6:	466a      	mov	r2, sp
 80078c8:	f7ff ffc8 	bl	800785c <__swhatbuf_r>
 80078cc:	9f00      	ldr	r7, [sp, #0]
 80078ce:	4605      	mov	r5, r0
 80078d0:	4639      	mov	r1, r7
 80078d2:	4630      	mov	r0, r6
 80078d4:	f7ff fbba 	bl	800704c <_malloc_r>
 80078d8:	b948      	cbnz	r0, 80078ee <__smakebuf_r+0x46>
 80078da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078de:	059a      	lsls	r2, r3, #22
 80078e0:	d4ee      	bmi.n	80078c0 <__smakebuf_r+0x18>
 80078e2:	f023 0303 	bic.w	r3, r3, #3
 80078e6:	f043 0302 	orr.w	r3, r3, #2
 80078ea:	81a3      	strh	r3, [r4, #12]
 80078ec:	e7e2      	b.n	80078b4 <__smakebuf_r+0xc>
 80078ee:	89a3      	ldrh	r3, [r4, #12]
 80078f0:	6020      	str	r0, [r4, #0]
 80078f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078f6:	81a3      	strh	r3, [r4, #12]
 80078f8:	9b01      	ldr	r3, [sp, #4]
 80078fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80078fe:	b15b      	cbz	r3, 8007918 <__smakebuf_r+0x70>
 8007900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007904:	4630      	mov	r0, r6
 8007906:	f000 f81d 	bl	8007944 <_isatty_r>
 800790a:	b128      	cbz	r0, 8007918 <__smakebuf_r+0x70>
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	f023 0303 	bic.w	r3, r3, #3
 8007912:	f043 0301 	orr.w	r3, r3, #1
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	431d      	orrs	r5, r3
 800791c:	81a5      	strh	r5, [r4, #12]
 800791e:	e7cf      	b.n	80078c0 <__smakebuf_r+0x18>

08007920 <_fstat_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4d07      	ldr	r5, [pc, #28]	@ (8007940 <_fstat_r+0x20>)
 8007924:	2300      	movs	r3, #0
 8007926:	4604      	mov	r4, r0
 8007928:	4608      	mov	r0, r1
 800792a:	4611      	mov	r1, r2
 800792c:	602b      	str	r3, [r5, #0]
 800792e:	f7f9 fa6c 	bl	8000e0a <_fstat>
 8007932:	1c43      	adds	r3, r0, #1
 8007934:	d102      	bne.n	800793c <_fstat_r+0x1c>
 8007936:	682b      	ldr	r3, [r5, #0]
 8007938:	b103      	cbz	r3, 800793c <_fstat_r+0x1c>
 800793a:	6023      	str	r3, [r4, #0]
 800793c:	bd38      	pop	{r3, r4, r5, pc}
 800793e:	bf00      	nop
 8007940:	20000b70 	.word	0x20000b70

08007944 <_isatty_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	4d06      	ldr	r5, [pc, #24]	@ (8007960 <_isatty_r+0x1c>)
 8007948:	2300      	movs	r3, #0
 800794a:	4604      	mov	r4, r0
 800794c:	4608      	mov	r0, r1
 800794e:	602b      	str	r3, [r5, #0]
 8007950:	f7f9 fa6b 	bl	8000e2a <_isatty>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	d102      	bne.n	800795e <_isatty_r+0x1a>
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	b103      	cbz	r3, 800795e <_isatty_r+0x1a>
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	bd38      	pop	{r3, r4, r5, pc}
 8007960:	20000b70 	.word	0x20000b70

08007964 <_sbrk_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	4d06      	ldr	r5, [pc, #24]	@ (8007980 <_sbrk_r+0x1c>)
 8007968:	2300      	movs	r3, #0
 800796a:	4604      	mov	r4, r0
 800796c:	4608      	mov	r0, r1
 800796e:	602b      	str	r3, [r5, #0]
 8007970:	f7f9 fa74 	bl	8000e5c <_sbrk>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d102      	bne.n	800797e <_sbrk_r+0x1a>
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	b103      	cbz	r3, 800797e <_sbrk_r+0x1a>
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	bd38      	pop	{r3, r4, r5, pc}
 8007980:	20000b70 	.word	0x20000b70

08007984 <_init>:
 8007984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007986:	bf00      	nop
 8007988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798a:	bc08      	pop	{r3}
 800798c:	469e      	mov	lr, r3
 800798e:	4770      	bx	lr

08007990 <_fini>:
 8007990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007992:	bf00      	nop
 8007994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007996:	bc08      	pop	{r3}
 8007998:	469e      	mov	lr, r3
 800799a:	4770      	bx	lr
